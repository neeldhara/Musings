[
  {
    "objectID": "poems.html",
    "href": "poems.html",
    "title": "Poems",
    "section": "",
    "text": "Work in progress\n\n\n\nüëãüèΩ I am in the process of porting things over from an older setup. This site may therefore be rather rough around the edges.\n\n\n\n¬†\n\n\n\n\n\n\n\n\n\n\n\n\nOn the Fence\n\n\n\n\n\n\n\n\n\nApr 23, 2012\n\n\n0 min\n\n\n\n\n\n\n\n\nSprinkles of the Sky\n\n\n\n\n\n\n\n\n\nJan 5, 2011\n\n\n0 min\n\n\n\n\n\n\n\n\nSeek\n\n\n\n\n\n\n\n\n\nApr 3, 2007\n\n\n0 min\n\n\n\n\n\n\n\n\nBloom\n\n\n\n\n\n\n\n\n\nFeb 3, 2005\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tgif.html",
    "href": "tgif.html",
    "title": "Puzzles from the TGIF Group",
    "section": "",
    "text": "Work in progress\n\n\n\nüëãüèΩ I am in the process of porting things over from an older setup. This site may therefore be rather rough around the edges.\n\n\n\n¬†\n\n\n\n\n\n\n\n\n\n\n\n\nHat Puzzles\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nAB Separation\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nFolding Stamps\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n0 min\n\n\n\n\n\n\n\n\nMaking Grids\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n0 min\n\n\n\n\n\n\n\n\nIwahiro‚Äôs Square in Bag Puzzle\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nTurn the LED on\n\n\n\n\n\n\n\n\n\nMar 25, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\n4 Person Gift Exchange\n\n\n\n\n\n\n\n\n\nMar 25, 2021\n\n\n2 min\n\n\n\n\n\n\n\n\nConway‚Äôs Checkers\n\n\n\n\n\n\n\n\n\nMar 23, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nCoin Tossing\n\n\n\n\n\n\n\n\n\nMar 23, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nEstimating Pi\n\n\n\n\n\n\n\n\n\nMar 15, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nComing to Agreement\n\n\n\n\n\n\n\n\n\nMar 15, 2021\n\n\n2 min\n\n\n\n\n\n\n\n\nDeath‚Äôs Dice\n\n\n\n\n\n\n\n\n\nMar 15, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nFind The Puppy\n\n\n\n\n\n\n\n\n\nMar 14, 2021\n\n\n3 min\n\n\n\n\n\n\n\n\nThe Blue-Eyed Islanders\n\n\n\n\n\n\n\n\n\nMar 11, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nLighting Up a Grid\n\n\n\n\n\n\n\n\n\nMar 11, 2021\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/building-websites-with-notion/index.html",
    "href": "posts/building-websites-with-notion/index.html",
    "title": "Actually Building a Website with Notion",
    "section": "",
    "text": "Doesn't look like it's for non-geeks like me üòÑ or you may prove otherwise. However, if you can record a 10 min video setting up a basic one, that'll have a greater impact, I believe, if it's already not there.\n\n‚Äî Swaprava Nath (@swaprava) September 12, 2021\n\n\n\n\nThe Overall Process\nFor either framework, this is typically a three-step process:\n\nSetup your content in Notion. You can start from scratch, or use one of the templates provided by Super or Potion that feel like a closest match to what you want your website to eventually look like.\nEnable sharing to the web from within Notion ‚Äî this will generate a link for you.\nCopy this link into Super or Potion.\n\nAt the end of step 2, in fact, you already have a URL that you can share with anyone and, depending on how the content is laid out in Notion, can already look like a decent website.\nWhat step 3 allows you to do, however is:\n\nAdd some styling with CSS.\nAdd custom code snippets (useful, for example, if you want to add things like Google Analytics).\nBe assured that the webpage is good in terms of SEO, performance, etc.\nIf using Super, you can selectively password-protect pages (coming soon to Potion, where you can presently password-protect your whole site if you want to).\nHave automatically generated user-friendly URLs for the individual pages, and if on Potion, you get nice preview images for all your pages as well.\n\nA few optional steps that you might want to consider:\n\nBy default, both Super and Potion will give you a test subdomain to work with. Eventually, you might want the website to be available from your own domain. This is just a matter of adding a couple of A-records and typically can be done from wherever you registered the domain:\n\n\n\n\nYou might want to add custom styles to make the website render uniquely ‚Äî so you move beyond the standard look-and-feel of a Notion page if you so wish. You could do something on your own here, but the simplest thing is to just borrow the styling from one of the existing templates and tweak it if you want.\nInsert code for Google Analytics (or similar). As an aside, if you are looking for analytics that is user-friendly and privacy-conscious, I‚Äôd recommend Fathom.\n\n\n\nA Course Catalog with Super\n\n\n\n\n\n\nHeads up!\n\n\n\nThis content is deprecated because I‚Äôve moved this domain out to a different setup now. So please ignore the links, and hopefully the steps are still useful in principle!\n\n\nLet‚Äôs apply this process to an actual website now! I‚Äôll demonstrate how I setup the website at neeldhara.courses. Incidentally, if you want a quick overview without some details that will be specific to my website, you might want to watch the video made by @robhope and pointed out by @traf.\n\n\nHere's a little run through by @robhope on creating a site @super_:https://t.co/SCMdDMRfBd\n\n‚Äî traf (@traf) September 12, 2021\n\n\nBack to the setup for neeldhara.courses. You can check out the page on Notion here, but I‚Äôll describe some pieces of it below. First, recall Step 1:\n\n1Ô∏è‚É£ Setup your content in Notion.\n\nI started with the Super template HQ. It looks amazing and is apparently free to use ‚Äî at least at the time of this writing üòÄ\nDuplicate this template into Notion. If you like, you can duplicate it twice ‚Äî one, a copy that you actually work on, and the other could be a copy that you don‚Äôt edit but just keep handy in case you need to go back to the original for reference.\nThe first thing I did was to get rid of most of the content, and just retained this section:\n\nwhich, incidentally, will render like this once connected to Super:\n\nNow the next step is to replace the generic content with yours:\n\nSince I‚Äôm just starting out, I have added the three courses that I‚Äôm teaching this term and they all show up. Eventually, these courses will be filtered out based on the current timing, so that only the current ones show here and the rest get pushed to an archive ‚Äî which I‚Äôm yet to build. But the filter would look something like this in Notion:\n\nAnd for each of those entries, I‚Äôd go and setup the course home pages with the content that I have in my typical course homepages. The nice thing about Notion is the wide array of content types that lets you format things nicely. Here are a couple of sections from within Notion:\n\n\nOne thing worth pointing out for this particular setup ‚Äî for each course, the class plan is just a Notion database, where the columns are:\n\nName (text)\nWeek (single-select with 12 options; one for each week of the course)\nModule (a checkbox property)\nDescription (text)\n\nand the rows either correspond to an overview of a whole week or just one individual lecture, tagged with the week that it happened in.\nOn the course‚Äôs homepage, I display this database set to a Gallery view, and filtered to only those entries where the Module option is unchecked. These are intended to be overview pages. This is what it looks like in Notion:\n\nand this is what it will end up looking like on the website, once you‚Äôve gotten to the end of Step 3:\n\nFurther, overview page simply displays the same database again, this time in a list view filtered by the appropriate week:\n\nCheck out the views in Notion and the rendered version side-by-side:\n\n\n\n\n\n\n\n\n\nYou might wonder about the blockquote in the Notion view right at the top of the page. That‚Äôs a feature of the HQ template ‚Äî anything that goes into that first blockquote renders as page navigation on top. I think this now a bit obsolete with Super‚Äôs new features on navigation bars, but I still find it handy and use it on most pages. üëç\nSo that‚Äôs all of Step 1, getting all your content inside Notion. I‚Äôd say this is really the bulk of the process. The process is iterative, so you don‚Äôt need literally all your content in before you can move on. However, getting an indicative amount thrown in is, I think, useful.\nOnce you‚Äôre done with this bit, up next:\n\n2Ô∏è‚É£ Enable sharing to the web from within Notion ‚Äî this will generate a link for you.\n\nThis is very easy to do, it‚Äôs just a toggle on the top-right corner of your Notion app:\n\nNow for the final step to have everything come together:\n\n3Ô∏è‚É£ Copy this link into Super or Potion.\n\nThis is again quite straightforward, head to Super and just share your page‚Äôs public URL, give it a name, and optionally set it up to sync with your domain if you have one.\n\nGiven that we‚Äôre using a particular Super template, you would also need to remember to insert the CSS to make the site look as advertised above üòÖ\nSo remember to add this on the custom code section of your Super dashboard:\n<link rel=\"stylesheet\" href=\"[https://sites.super.so/hq/style.css](https://sites.super.so/hq/style.css)\">\nIf you do just this and are literally following along your site may still look a little different from mine, which is probably because I tweaked the CSS a bit to incorporate fonts of my liking (the fonts in the screenshot are from Google fonts ‚Äî Andika New Basic and Shadows into Light Two).\nYou might want to take care of some minor things at this stage, such as adding a favicon, a site description that will show up on Google searches, inserting any code you need to for analytics, and so forth.\nThe very first time that you setup your site, you may need to wait for a bit for it to build and render. But after this first time, any edits you make on Notion are reflected automatically on your website ‚Äî you may need to give it a minute or two, it‚Äôs not instantaneous, but trust that the changes will show up. Clear your cache if they don‚Äôt even after a couple of minutes.\nSuper generates pretty URLs automatically for all your pages, but because of the slightly peculiar setup I have, involving a particular nested structure and filtered views, I‚Äôve been doing my pretty URLs manually. For example, to go to the second module of Week 5 in the competitive programming course, the URL is:\nhttps://neeldhara.courses/competitive-programming/week-05/mod-02\nThis can be setup quite easily from inside the Super dashboard, and once it‚Äôs done once, it‚Äôs done for good.\nSo, that‚Äôs about it! I‚Äôd like to think I covered most major aspects, but if anything is unclear, ping me @neeldhara on Twitter and I‚Äôll be sure to update this appropriately üôÇ\n\n\nThe Manim Examples Collection with Potion\nFor the Potion example, I‚Äôd like to build out a quick page with latest tweets from @manim_community. Manim¬†is a community-maintained Python library for creating mathematical animations, and the twitter handle pulls in a lot of great examples.\n\n\n\n\n\n\nIncidentally, if you prefer watching a video tutorial, Potion has you covered already‚Ä¶\n\n\n\n\n\n\n\n\n\n\nSo, for step 1, which is to get our content in Notion, I start with a blank slate and populate it with some content:\n\n\nFor Step 2, I simply make this page public, and you can see the Notion version here.\nFor Step 3, I add this page to Potion and just follow step 4 on this page to set this up with a lovely template made by Dr.¬†Gil Pradana (@gildy). This just amounts to copy-pasting some CSS code into the Snippet Injection section of your Potion dashboard. This template treats horizontal line breaks as breakpoints to create cards, and the headings translate into the highlight boxes that you can see from this preview.\nhttps://twitter.com/gildy/status/1403680404092035075?s=20\nAfter connecting my domain, here‚Äôs what the website looks like this\nAnd that‚Äôs basically it! You have a fully functional page now. üéâ Changes you make in Notion will reflect instantaneously on Potion!\n\nYou might wonder if there is a way of setting things up so that new tweets from the Manim community handle show up automatically on this website. In principle, this should be possible with a little help from tools like automate.io, Zapier, or Integromat ‚Äî they can watch for new tweets and append them to the page you are working on, although I‚Äôm not sure how to set it up so that they respect the two-column layout that I have here. I figure tweets could also be added to a database and shown with a gallery view instead, but the gallery previews will typically not pick up embedded content, so you might have to go via an intermediate service like Tweetpik or Pikaso instead so you have screenshots for display.\nSo this was Potion - you can probably see the many ways in which Potion and Super are similar to setup. By the way, the templates on these platforms are not mutually compatible ‚Äî so watch out for the fact that they will not automatically work on the other platform if you are looking to migrate. As far as I can see, neither service has an importer for the other built yet.\nThat said, I hope you have fun making your website with Notion with whatever platform you choose to use! üéâ"
  },
  {
    "objectID": "posts/eight-self-sabotaging-behaviors/index.html",
    "href": "posts/eight-self-sabotaging-behaviors/index.html",
    "title": "Eight Self-Sabotaging Behaviors",
    "section": "",
    "text": "üßµ @fortelabs recently finished the opening keynote on the Second Brain summit, which incidentally has a great lineup including a panel discussion on PKM through the lens¬†of ADHD. Ironically, I didn‚Äôt quite take notes but I think the themes also feature in this short video:\n\n\nThe live session was fun because of a super engaged chat ‚Äî everyone had great suggestions for managing some of these (surprisingly common?) behaviors.\nI‚Äôll not share the premise (it‚Äôs self-explanatory + there‚Äôs the video), but the discussion involved three parts:\n\nwhy it‚Äôs an issue;\nwhy-do-we-do-this-to-ourselves;\nhow do we not keep doing it üòÄ\n\nI‚Äôll share a tweet-length summary of my takeaways.\n\nCaveat I: 280 chars! Twitter isn‚Äôt the platform for nuance. üòÖ\nCaveat II. Should go without saying, but all of this gyaan needs to be tempered with context, which was a frequently used word throughout the session!\n\n\n\n\n\n\n\n\nStarting over (again and again)\n\n\n\n\n\n‚ö†Ô∏è¬† Not learning from previous mistakes.\nü§î¬† False sense of accomplishment, dopamine hit from a clean slate, FOMO (new tools).\nüí°¬†Start simple, iterate slowly, resist looking at shiny new objects.\n\n\n\n\n\n\n\n\n\nFeeling guilty\n\n\n\n\n\n‚ö†Ô∏è¬† Can‚Äôt win when you are at war with yourself.\nü§î¬† Probably comes from knowing you‚Äôll trip again.\nüí°¬†Extend to yourself the same courtesy and patience you‚Äôd show to a friend, consider replacing guilt with curiosity.\n\n\n\n\n\n\n\n\n\nPerfectionism\n\n\n\n\n\n‚ö†Ô∏è¬† Not making mistakes is a risky way to live.\nü§î¬† Feeds ego, sense of control and safety, and you think you push yourself harder with lofty standards.\nüí°¬†Aim for B+, fail in public and value it ‚Äî can be a relief to not have to keep up with the perfect image.\n\n\n\n\n\n\n\n\n\nDo all the research first\n\n\n\n\n\n‚ö†Ô∏è¬† When overdone, really procrastination in disguise.\nü§î¬† Creates an illusion of getting work done. Paranoia associate with diving in without preparation.\nüí°¬†Second brains are not for archival, but production. Iterate often. Timebox research.\n\n\n\n\n\n\n\n\n\nGoing big\n\n\n\n\n\n‚ö†Ô∏è¬† Ambition dominates the public discourse around goal-setting. Big goals are not problematic until they get in the way.\nü§î¬† Ego boosted, creates a potentially misguided sense of being inspired.\nüí°¬†Break things down, take incremental (read: realistic!) steps.\n\n\n\n\n\n\n\n\n\nDoing it all yourself\n\n\n\n\n\n‚ö†Ô∏è¬† Potentially limiting.\nü§î¬† A desire for respect or credit, and the sense that nobody can do this as well as me.\nüí°¬†Delegate when appropriate, especially when looking to scale and/or diversify.\n\n\n\n\n\n\n\n\n\nComparing yourself to others\n\n\n\n\n\n‚ö†Ô∏è¬† Potentially depressing.\nü§î¬† Self-pity, and an excuse to not even try.\nüí°¬†Compare to past you. Read your old journal entries. (Also, journal.)\n\n\n\n\n\n\n\n\n\nPostpone gratification\n\n\n\n\n\n‚ö†Ô∏è¬† For something to be sustainable, it needs to be fun!\nü§î¬† Traditional positive quality.\nüí°¬†Enjoy the journey because nobody knows the destination. Live in the moment, find joy in the small things, be present. Also, music for instant gratification!\n\n\n\nDo check out the Second Brain Summit for the remaining sessions.\nI think you get a link to a recording if you‚Äôre registered for a session, at least this was the case for me with the opening session.\nThe community attending this is also on a slack."
  },
  {
    "objectID": "posts/kidney-exchanges/index.html",
    "href": "posts/kidney-exchanges/index.html",
    "title": "Kidney Exchanges",
    "section": "",
    "text": "This post is based on an excellent (chalk and board!) talk that Palash Dey gave at IIT Gandhinagar today. This is his joint work with Arnab Maiti, to appear as an extended abstract at AAMAS 2022 (preprint here)."
  },
  {
    "objectID": "posts/kidney-exchanges/index.html#background",
    "href": "posts/kidney-exchanges/index.html#background",
    "title": "Kidney Exchanges",
    "section": "Background",
    "text": "Background\nKidney paired donation or paired exchange allows donors to donate their kidneys to compatible patients with the understanding that their patients receive medically compatible kidneys in turn. The central problem in this setting is the clearing problem ‚Äî which involves matching patients to donors in such a way that a maximum number of patients receive compatible kidneys. We introduce a directed graph as a convenient abstraction for this question, where:\n\neach node v_i = (P_i,D_i) represents a patient-donor pair, and\nwe introduce a directed edge v_i ‚Üí v_j if the kidney of the donor D_i is compatible with the patient P_j.\n\nObserve that a cycle in this directed graph naturally represents a sequence of feasible exchanges within the cycle. For example, imagine that we have a three-cycle with the edges:\n(P_2,D_2) ‚Üí (P_5,D_5) ‚Üí (P_7,D_7) ‚Üí (P_2,D_2)\nThen we have the following compatible donations:\n\nP_5 is assigned the kidney of donor D_2\nP_7 is assigned the kidney of donor D_5\nP_2 is assigned the kidney of donor D_7\n\nThis accounts for all the patients and donors involved in this cycle and motivates the following question:\n\nGiven a directed graph, what is the largest number of vertices that can be covered by a disjoint union of cycles?\n\nWhile a positive answer to this question will ‚Äúresolve‚Äù all the needs in the system, consider that exchanges along a cycle of length \\ell involve \\ell simultaneous operations to mitigate the risks involved with donors potentially backing out of the exchange agreements.\nThis motivates the following refinement of the previously posed question:\n\nGiven a directed graph, what is the largest number of vertices that can be covered by a disjoint union of cycles, where each cycle is of length \\ell or less?\n\nIf the exchanges are restricted to swaps, that is, \\ell = 2, the problem reduces to finding a maximum matching. However, the problem is NP-complete already when \\ell = 3 (see Theorem 1, Abraham, Blum, and Sandholm; EC 2007).\nWe now generalize the model a little further to account for the presence of altruistic donors, who are donors without a matching patient and are willing to donate to any compatible patient. To account for the presence of such donors, we modify our graph representation as follows:\n\nEach node either:\n\nrepresents a patient-donor pair v_i = (P_i,D_i) or\nrepresents an altruistic donor u_k = D_k^\\star\n\nThe edges are as follows:\n\nWe have a directed edge v_i ‚Üí v_j if the kidney of the donor D_i is compatible with the patient P_j.\nWe have a directed edge u_k ‚Üí v_j if the kidney of the donor D_k^\\star is compatible with the patient P_j.\n\n\nIn this setting, note that we can also facilitate exchanges along paths as well, with the paths starting at the altruistic donors. For instance, if we have the path:\n(D_7^\\star) ‚Üí (P_2,D_2) ‚Üí (P_5,D_5) ‚Üí (P_7,D_7) ‚Üí (P_3,D_3)\nThen we have the following compatible donations:\n\nP_2 is assigned the kidney of donor D_7^\\star\nP_5 is assigned the kidney of donor D_2\nP_7 is assigned the kidney of donor D_5\nP_3 is assigned the kidney of donor D_7\n\nNote that in this situation, the donor D_3 is relieved from any obligation to donate to a patient. We now update our problem statement to reflect the presence of altrustic donors and the possibility of facilitating exchanges along paths:\n\nü§ù Optimal Kidney Exchange Along Short Paths and Cycles\nInput. A directed graph G = (V,E), where \\mathcal{A} \\subseteq V are source vertices; and positive integers \\ell_p, \\ell_c and t.\nOutput. Yes if and only if there is a collection of cycles of length at most \\ell_c each and a collection of paths of length at most \\ell_p each such that the cycles and paths altogether covers t nodes outside of \\mathcal{A}.\n\nThe main claim in the context of this problem is the following:\nThere exists a \\mathcal{O}(2^{\\mathcal{O}(t)} \\cdot \\text{poly}(n)) that decides Optimal Kidney Exchange Along Short Paths and Cycles."
  },
  {
    "objectID": "posts/kidney-exchanges/index.html#an-algorithm-for-oke",
    "href": "posts/kidney-exchanges/index.html#an-algorithm-for-oke",
    "title": "Kidney Exchanges",
    "section": "An Algorithm for OKE",
    "text": "An Algorithm for OKE\nHere‚Äôs a high-level description of the algorithm (perhaps best approached with some prior familiarity with color coding). To begin with, notice that we may assume without loss of generality that \\ell_p \\leq t and \\ell_c \\leq t ‚Äî intuitively, this is because if the permitted cycle and path lengths are longer than the number of patients we hope to cover, then we can simply look for cycles or paths of length t directly to begin with ‚Äî if we find one, then we are done, and if none exist, then we ‚Äúmight as well‚Äù set \\ell_p and/or \\ell_c to t-1.\nNow, if there is a solution that accounts for at least t patients, there is also one that involves at most 2t patients and in particular, also at most t paths. Such a solution engages at most t nodes from \\mathcal{A}. Therefore, if there is a solution, then there is one that spans s \\leq 3t vertices.\nAs is standard for color coding, we guess the correct value of s and randomly partition the vertex set V into s parts. The hope is that each part contains exactly one vertex from the solution (this is a so-called ‚Äúcolorful solution‚Äù). The probability that a random partition is a lucky one is (3t)!/(3t)^{(3t)}, which turns out to be at least e^{-3t}. This implies that e^{3t} repetitions ensure a constant success probability.\nGiven that the partition is indeed a lucky one, we can recover the solution using the following dynamic programming semantics. For C \\subseteq [3t] and i \\in [3t], let D[C,i] be TRUE if and only if there is a colorful solution spanning at least i nodes outside \\mathcal{A} in G[V_C], where V_C denotes the subset of vertices colored with colors from C.\nThe recurrence is based on isolating one path or cycle by guessing the set of colors involved in said component and using table lookups to figure out if this can be extended to a full solution.\nIn particular, we have:\nD[C,i] = P[C,i] \\lor Q[C,i],\nwhere\nP[C,i] = \\lor_{(B,j): B \\subseteq C \\text{ and } 1 \\leq j \\leq \\ell_c} [D[C \\setminus B, i - j] \\land f(B,j)]\nand\nQ[C,i] = \\lor_{(B,j): B \\subseteq C \\text{ and } 1 \\leq j \\leq \\ell_p} [D[C \\setminus B, i - j] \\land g(B,j)].\nHere, we have that:\n\nf(B,j) is TRUE if and only if the vertices of B can be covered with a cycle of length j.\ng(B,j) is TRUE if and only if the vertices of B can be covered with a path of length j.\n\nThe truth values of f(B,j) and g(B,j) can be determined directly using standard approaches to finding colorful paths and cycles in time that is single-exponential in j.\nTo claim the overall running time, note that:\n\nThe total number of entries in the table is 2^{O(t)} \\cdot t and each entry can be computed in time \\mathcal{O}^{}\\left(2^{\\mathcal{O}(\\ell)}\\right).\nTherefore, the algorithm outputs the correct decision in \\mathcal{O}^{}\\left(2^{\\mathcal{O}(t)}\\right) time with probability at least e^{-3t},\nBy repeating \\mathcal{O}\\left(e^{3 t}\\right) times, we find the correct decision with constant success probability.\nThe overall running time is \\mathcal{O}^{*}\\left(2^{\\mathcal{O}(t)}\\right)."
  },
  {
    "objectID": "posts/kidney-exchanges/index.html#other-results",
    "href": "posts/kidney-exchanges/index.html#other-results",
    "title": "Kidney Exchanges",
    "section": "Other Results",
    "text": "Other Results\nAs Palash mentioned in his talk, the preprint has more, and here are some highlights of the other results that were established:\n\nOptimal Kidney Exchange Along Short Paths and Cycles is FPT also when parameterized by the treewidth of the underlying graph + maximum length of path \\left(\\ell_{p}\\right)+ maximum length of cycle allowed \\left(\\ell_{c}\\right) and the number of vertex types1 when \\ell_{p} \\leq \\ell_{c}.\nA Monadic second-order formula for the problem is also presented, where the length of the formula is upper bounded by a function of \\ell=\\max \\left\\{\\ell{c}, \\ell_{p}\\right\\}.\nThe problem admits a polynomial kernel with respect to the number of patients receiving kidneys + maximum degree when \\max \\left\\{\\ell_{p}, \\ell_{c}\\right\\} is a constant.\nOn the other hand, the problem does not admit any polynomial kernel parameterized by the number of patients receiving kidneys + maximum degree +\\max \\left\\{\\ell_{p}, \\ell_{c}\\right\\} (under standard assumptions).\nA \\left(16/9+\\epsilon\\right)-approximation algorithm is presented for the case when only cycles of length at most 3 are allowed and no paths are allowed."
  },
  {
    "objectID": "posts/kidney-exchanges/index.html#pointers",
    "href": "posts/kidney-exchanges/index.html#pointers",
    "title": "Kidney Exchanges",
    "section": "Pointers",
    "text": "Pointers\nSome discussion that came up during the talk:\n\nThe so-called dual parameter (n-t), which in this case corresponds to the number of patients who were ‚Äúleft out‚Äù, is perhaps a natural parameter to study as well.\nThe notion of a patient without a matching donor seems complementary notion of altrusitic donors. Such patients would be the last vertices on paths kickstarted by altruistic donors. However, this notion likely does not manifest in practice.\n\nIf you‚Äôd like to dig deeper, be sure to check out the preprint! A few additional pointers:\n\nThis work closely builds on the works of Xiao and Wang (IJCAI, 2018), who proposed an exact algorithm with running time \\mathcal{O}(2^nn^3) where n is the number of vertices in the underlying graph. They also show an FPT algorithm parameterized by the number of vertex types if we do not have any restriction on the length of cycles and chains.\nLin, Wang, Feng, and Fu (Algorithms, 2019) studied the version of the kidney exchange problem which allows only cycles and developed a randomized parameterized algorithm with respect to the parameter being (number of patients receiving a kidney, maximum allowed length of any cycle).\nAlvin E. Roth was awarded the Nobel Prize in Economic Sciences 2012 (along with Lloyd S. Shapley) in part for his pioneering contributions to the theory and practice of kidney exchange ‚Äî his biographical account indicates that he had started anticipating the problem even before it emerged as a legal practice. His talk at Simons Institute surveys ‚Äúfifteen years of history‚Äù in the kidney exchange problem, with an emphasis on the game-theoretic aspects. (h/t: Rohit‚Äôs blog on this topic.)"
  },
  {
    "objectID": "posts/solo-chess/index.html",
    "href": "posts/solo-chess/index.html",
    "title": "Solo Chess",
    "section": "",
    "text": "üßµ¬†on our latest at FUN 2022 with @NRAravind1 and Harshil.\nHave you tried Solo Chess @chesscom yet? It‚Äôs addictive ‚Äî and NP-complete* even when you‚Äôre dealing only with rooks!\n*when appropriately generalized\n\n\n\nThe Rules of the Game\n\n\nSo this is a single-player, peg-solitaire-ish chess variant, where you have to clear board by making a sequence of valid captures, albeit starting with unorthodox ‚Äî and even unrealistic ‚Äî positions.\n\n\n\nAn example position\n\n\nTo begin with the boards start easy, with a few pieces at a time. Notice, even in the early games, how some positions have just one solution while others may have several.\n\n\n\nMore positions\n\n\nFrom initial plays, you sense that it has a very Hamiltonian-Path-ish vibe, and feels like you‚Äôre trying to find a path in some graph üòÖ¬†\nWe started with a variant that was simultaneously a generalization and specialization:\n\nn pieces üòé\n‚ôñ‚Äôs only\n1D boards üôà\n\nThis, it turns out, is case so special that its trivial - you can sweep all rooks to the extreme left or extreme right of the board, and any position is winning even if every rook can capture exactly once. Less trivial though: how many ways there are to win? ü§î\nWe also ask what happens if every rook had a designated number of captures left. Imagine you have a 1D board and three kinds of rooks:\n\nred rooks cannot move\nblue rooks can move at most once\ngreen rooks can move at most twice\n\n\n\n\n1D Boards\n\n\nWe show that such 1D boards can be cleared if and only if then number of green rooks is at least the number of red rooks. This ties nicely with the intuition that every immovable rook needs to be picked up by a rook that can help another one (i.e, > one move left).\nThis generalizes naturally to rooks with a designated number of moves left, where said number can be anything between 0 and d.¬†Since no other chess piece moves sensibly* across a 1D board, we decided to move on 2D boards from here.\n\nKings + rooks is an easy exercise.\n\nSo if you are still playing with red, blue, and green rooks, then the problem of checking if a given 2D configuration can be cleared up according to solo chess rules turns out to be NP-complete.\nNo Hamiltonian Path though ‚Äî this one was from bipartite dominating set üòé\n\n\n\nA reduction from bipartite dominating set - I\n\n\n\n\n\nA reduction from bipartite dominating set - II\n\n\nBishops are much the same as rooks, by a 45-degree tilt of the board.\n‚ö†Ô∏è¬†Still open though: what about the case when all pieces have at most two moves left, which is closer to the original spirit of the game?\nWe don‚Äôt know yet, although we‚Äôd bet it‚Äôs hard, I think.\nWhen playing with queens only, however, we can gadget in the behaviors of red and blue pieces. So we do have that Generalized Solo Chess with just queens that can all move at most twice is NP-complete.\nWhat about pawns? Let‚Äôs get clarifying assumptions out of the way:\n\nwhite pawns only\nregular captures only since there‚Äôs no premise for en passant captures\n\nIn solo chess, pawns are (heavily) constrained bishops: they can only move upwards and to a neighboring diagonal square. Knowing that bishops were hard, but pawns felt simple ‚Äî we didn‚Äôt have a bet either way. ü§î\nWe were pleasantly surprised that the case of pawns is tractable, even when each pawn has a designated* number of moves!\n*at most two.\n\n\n\nLemma for pawns\n\n\nThe algorithm is linear time, too.\nNext: what about knights? We don‚Äôt know yet!\n‚ùì¬†What‚Äôs the complexity of solo chess when played only with knights?\nKnights are special because we don‚Äôt have to worry about obstructions. So the game can be described by a more general token game on graphs:\n\n\n\nThe Graph Capture Problem\n\n\nWe do show that Graph Capture is hard by a reduction, again from bipartite dominating set. This might hint at the hardness for Solo Chess played with knights only, but we are not betting on this yet.\n\n\n\nAnother reduction from bipartite dominating set - I\n\n\n\n\n\nAnother reduction from bipartite dominating set - II\n\n\nI think these preliminary explorations have left us with more questions than answers:\n\noptimization versions (e.g, clear at least k pieces)\nother constraints (e.g, on distance moved)\nspecial cases (e.g, O(1) pieces per row/column)\nn x c boards, constant c\n\nWhile at it, I‚Äôm also curious about how @chesscom generates these puzzles, and if they have a mechanism for generating ones that have unique solutions. Also, is it true that if you throw ‚Äúenough‚Äù pieces on the board, it‚Äôs solvable WHP?\nShout out to the skak package for making it easy to bring chess pieces to TikZ. We expect to put up a preprint on ArXiV soon. üëÄ¬† Meanwhile, we welcome comments and feedback ‚Äî and if you read this far, thanks very much!\nPS. Also if you enjoy chess and algorithms, don‚Äôt miss Miguel Ambrona‚Äôs amazing Chess Unwinnability Analyzer, which also appears at FUN 2022!\n\n\n\nChess Unwinnability\n\n\nYou can find the full list of accepted papers here."
  },
  {
    "objectID": "posts/15-puzzle/index.html",
    "href": "posts/15-puzzle/index.html",
    "title": "Two approaches to the 15 puzzle",
    "section": "",
    "text": "This is a sliding puzzle having 15 square tiles numbered 1‚Äì15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to place the tiles in numerical order.\n\nAccording to Wikipedia, Johnson & Story (1879) used a parity argument to show that half of the starting positions for the n-puzzle are impossible to resolve, no matter how many moves are made. We are going to explore two approaches* parity-based argument to show that the puzzle shown here on the right is unsolvable.\n*I do believe the two proofs are essentially the same with slight differences of language.\n\n\n\nAn example of the 15 puzzle\n\n\nCommon to both approaches is the idea of associating a permutation with every state of the puzzle. For the purposes of this discussion, we will think of a permutation simply as a sequence of elements. To turn the grid layout into a sequence, you could, for instance, line up the rows next to each other, in other words, read off the numbers from left-to-right and top-to-bottom:\n\n\n\nAssociating the puzzle with a permutation\n\n\nSo we think of every puzzle state as a permutation over the set \\{1, 2, \\ldots, 15\\} \\cup \\{\\star\\}, where we use \\star to denote the blank space. For a particular sequence \\sigma and an index 1 \\leq i \\leq 16, we will use \\sigma_i to refer to the element that is at the i^{th} position in the sequence \\sigma.\nA couple of definitions in the context of permutations will be useful:\n\nAn inversion is a pair of elements that is out of their natural order. More precisely, if we have indices i < j such that \\sigma_i > \\sigma_j, then the pair (i,j) indulges in an inversion. Note that the starting state of our puzzle here has exactly one inversion.\nA transposition of locations i and j **is essentially a swap of the elements at positions i and j of a given permutation. So this is an operation performed on a permutation. Let‚Äôs say this again with more explicit notation ‚Äî if we start with \\sigma, then the permutation \\tau obtained from \\sigma by a transposition of i and j is given by the following:\n\n\n\\tau_\\ell = \\begin{cases}\n      \\sigma_j & \\text{if } \\ell = i,\\\\\n      \\sigma_i & \\text{if } \\ell = j,\\\\\n      \\sigma_\\ell & \\text{otherwise.}\n    \\end{cases}\n\nThe identity permutation, which we will denote by \\iota, is special ‚Äî it‚Äôs the following sequence:\n\n\\{1,2,\\ldots,14,15,\\star\\}.\n\nIt turns out that every permutation \\sigma can be obtained from the identity permutation by a sequence of transpositions. This is not terribly hard to see ‚Äî start with the identity permutation, and repeat the following until the permutation at hand is the one you want to see: find a location i that‚Äôs messed up in the current permutation, i.e, it doesn‚Äôt have the element you need in there. Find where the element is in the current permutation, and if that‚Äôs location j, you could perform a transposition between i and j. This fixes up the location i. In every step, you fix at least one location, and never mess up anything else: so at the end of at most n steps (assuming you are working with a sequence of n elements), you would be done. üéâ\nFor example, suppose the permutation you want to obtain is 3,4,2,1. Here is how the argument above would play out:\n\n1,2,3,4. The first location is messed up, so swap 1 and 3.\n3,2,1,4. The second location is messed up, so swap 2 and 4.\n3,4,1,2. The third location is messed up, so swap 1 and 2.\n3,4,2,1. Now we are done.\n\nNote that this may not be the only way of performing a sequence of transpositions that can morph \\iota into \\sigma ‚Äî there may be various roads to \\sigma. However, it turns out that no matter what route you take to transform \\iota \\longrightarrow \\sigma, the number of steps you perform will always have the same parity. So specifically, it‚Äôs not possible for you to have a series of, say, seventeen transpositions that turn \\iota into \\sigma, and for me to have a series of forty-two transpositions that do the same. We will take this as a cute exercise for the reader as given.\nThis partitions the set of all permutations into two categories:\n\neven permutations: those permutations that are reachable from the identity with an even number of transpositions\nodd permutations: those permutations that are reachable from the identity with an odd number of transpositions\n\nThe fact from the previous paragraph above makes this classification unambiguous.\nAlright, so now we have all the terminology we need to get to the argument about why the puzzle state we started with is unsolvable. We can roll up our sleeves and get started.\n\nThe first line of argument is based on this Numberphile video, and is also the one described in this 1999 American Math Monthly article by Archer. We begin with the observation that every move in the game is really a transposition behind the scenes. In particular, let‚Äôs say that we are currently in state s and we perform some move and move to state t. Let‚Äôs say the permutation associated with s was \\sigma and the permutation associated with t is \\tau. It‚Äôs not hard to see that:\n\n\\tau can be obtained from \\sigma with a single transposition.\n\nNow, note that the permutation corresponding to our target state is the following:\n\n\n\nThe permutation corresponding to our target state\n\n\nIn terms of the game state, notice that the final state has the blank tile at the bottom-right corner, just like we had at the start state. This means that in a hypothetical sequence of moves that morphs the initial game state into this solved state, we must have performed:\n\nan equal number of left and right moves; and\nan equal number of up and down moves.\n\nIf this is not the case ‚Äî imagine the blank tile traveling through the board as you perform the moves ‚Äî if the number of times you moved in opposite directions did not exactly cancel, it would be impossible for the blank location to be back at it‚Äôs original location.\nSo in any winning sequence, the number of moves performed must be even. This implies that the permutation corresponding to the start state, in particular, can be obtained from the identity permutation with an even number of transformations. That makes the starting permutation an even permutation.\nHowever, the permutation corresponding to the start state that we have been handed out is clearly an odd permutation: it can be obtained from the identtiy permutation by a transposition of the elements at the 14-th and 15-th positions. So, well, no dice! This shows that every solvable state that places a blank tile at the bottom-right corner must correspond to an even permutation. This does not automatically imply that all such states associated with even permutations are solvable* ‚Äî it just shows that states with blank tiles at the bottom-right corner corresponding to odd permutations are firmly out of reach.\n*It does turns out that all even permutations are in fact solvable.\n\nThe second approach is based on the notion of inversions. This one is based on the Strong Induction lecture in the MITOCW course on Mathematics for Computer Science. For this proof I‚Äôll actually switch to the 3 \\times 3 version of the puzzle because I don‚Äôt know how to extend it to the 15-puzzle the case analysis is more manageable for this version:\n\n\n\nA move in the 3 X 3 version of the puzzle\n\n\nAs we said before, the permutation associated with the starting point of the puzzle has exactly one inversion, while the permutation associated with the solved state, which is the identity permutation, has no inversions. So, when you make a move in the puzzle, what happens to the number of inversions?\nAs before, let‚Äôs say that we are currently in state s and we perform some move and move to state t. Let‚Äôs say the permutation associated with s was \\sigma and the permutation associated with t is \\tau. Let us say that a pair of elements (p,q) is affected by a move in the game if the relative order of p and q is different in the permutations \\sigma and \\tau. Now we have the following:\n\nif we perform a row move, the relative order of all elements corresponding to numbers remains the same ‚Äî in particular, all affected pairs involve \\star ‚Äî so the number of inversions in \\tau is exactly the same as the number of inversions in \\sigma.\nif we perform a column move, typically the element that is being moved, say p, ends up effectively jumping over two other elements, say a and b. In this case the following scenarios arise:\n\nNeither (p,a) nor (p,b) is an inversion in \\sigma.\n\n\n\nNeither (p,a) nor (p,b) is an inversion in \\sigma\n\n\n\nIn this case, both (p,a) and (p,b) emerge as new inversions in \\tau, and the total number of inversions in \\tau is two more than the total number of inversions in \\sigma.\n\nBoth (p,a) and (p,b) are inversions in \\sigma.\n\n\n\nBoth (p,a) and (p,b) are inversions in \\sigma\n\n\n\nIn this case, neither (p,a) nor (p,b) are inversions in \\tau ‚Äî they both get fixed! So the total number of inversions in \\tau is two less than the total number of inversions in \\sigma.\n\nWhile (p,a) is an inversion in \\sigma, (p,b) is not.\n\n\n\nWhile (p,a) is an inversion in \\sigma, (p,b) is not\n\n\n\nIn this case, you fix some, you spoil some ‚Äî so in \\tau, (p,a) is not an inversion any more, but (p,b) emerges as a new inversion; so the changes cancel and the number of inversions in \\tau is exactly the same as the number of inversions in \\sigma.\n\nWhile (p,a) is not an inversion in \\sigma, (p,b) is one.\n\n\n\nWhile (p,a) is not an inversion in \\sigma, (p,b) is one\n\n\n\nAs before, you fix some, you spoil some just the other way now ‚Äî so in \\tau, (p,a) is a new inversion, but (p,b) is no longer one; so the changes cancel again and the number of inversions in \\tau is exactly the same as the number of inversions in \\sigma.\n\n\n\nThe long and short of all this is that after every move, the number of inversions either remains the same or changes by two. So no matter how many moves you perform, a state whose associated permutation has an odd number of inversions is going to remain inaccessible.\nTada!\n\nSo there we have it‚Ä¶ I have a feeling that a little bit of language connecting transpositions and inversions will really make these proofs quite identical, at least for the 3 \\times 3 case ‚Äî although I did worry that the first approach seemed to rely rather explicitly on the location of the blank tile while the second one didn‚Äôt. It is quite possible that the first one actually demonstrates more than I‚Äôm giving it credit for!\nMeanwhile, to be honest, I haven‚Äôt thought much about pushing the second line of attack to the 4 \\times 4 case ‚Äî it seems already that the statement about the change in the number of inversions is no longer true and the change itself is no longer two: in particular, it could apparently go up or down by three or one instead, since the element involved in the action, p is now potentially jumping over three other elements, a, b, and c‚Ä¶ so this, at least from an immediate consideration, doesn‚Äôt quite take us where we want to go.\nPossibly one has to work with a somewhat different invariant, maybe a notion of inversions that involve triples instead of pairs? Any comments on this would be very welcome, and I‚Äôll have an update once I understand this a little better!"
  },
  {
    "objectID": "posts/django-app/index.html",
    "href": "posts/django-app/index.html",
    "title": "Building a first Django App",
    "section": "",
    "text": "The tutorial in Hello Web App goes over the process of building a generic ‚Äúcollection of things‚Äù with Django. In this tutorial, I‚Äôll focus on a more concrete example, because it was more fun for me to build a tangible concept that I might actually use later.\nSo, I am going to build a collection of talk announcements at IIT Gandhinagar, which I intend to be displayed, on the frontend, as a slideshow. I figure that this website can then be loaded up on any internet-connected display and serve as a virtual notice board. For the frontend design, I‚Äôm going to be stealing the Webslides framework, which is a really clean HTML/CSS template for making slideshows powered by Javascript.\n\nQuickstart\nI‚Äôm going to handwave the bit about installation. Briefly, I setup Django v2.0.4 in a virtual environment, put the codebase in a git repository, and initialized a Django project via:\ndjango-admin startproject announceiitgn .\nand then a Django app via:\ndjango-admin startapp talks\nIt‚Äôs also important to add this app to settings.py, like so:\nINSTALLED_APPS = [\n'talks',\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n]\nand also run a migration command to account for an initial setup for the databases (if you skip this step, Django will prompt you to do it anyway ‚Äî as I found out by forgetting üòé):\npython [manage.py](http://manage.py/) migrate\nFinally, see your app by running the server! üéâ\npython [manage.py](http://manage.py/) runserver\nYou should see a neat little success page if you navigate to something like http://127.0.0.1:8000/ (the exact URL should be in your console).\nIf you are not sure how to get to this point, I‚Äôd suggest looking up an installation/setup guide such as this one from the official documentation or this one from Django Girls.\n\n\nSetting up Templates\nThe first step is to setup a basic HTML template that becomes the frontend. We go into our app directory (which, in my case, is talks) and then make a templates directory inside it, where I make a simple index.html file. Instead of using a skeleton file here, I‚Äôm going to take a deep breath and throw in the index.html from the webslides codebase. At this point I know it won‚Äôt be a pretty sight, but I‚Äôm also optimistic that I can iron it out as I go along ü§ï\nI‚Äôm going to head over to urls.py and add the following import:\nfrom talks import views\nand then add the following item to urlpatterns, which I understand only vaguely at this point:\npath('',views.index,name='home'),\nWe now need to make sure that views.index actually makes sense, so switch to views.py in the talks directory and add the following:\ndef index(request):\nreturn render(request,'index.html')\nNote that render has already been imported for you from django.shortcuts. For now, I sense that this is the plumbing connecting the directive in urls.py to the meat in the templates directory. Now, navigating again to the webapp, while it‚Äôs not exactly pretty (just as predicted), but at least you can see that all the connections are working as intended:\n\n\n\n\n\n\nClick toggle to reveal a full-page screenshot of an unstyled webpage!\n\n\n\n\n\n\n\n\n\nSo it‚Äôs time to add the static supporting files for the webslides template. I‚Äôm going to create the folder static inside the talks folder. Inside the static folder, copy over the folders css, js and images from the webslides template bundle. Now, we need to make sure that our index.html loads these supporting files from the appropriate location. This is a critical step and will completely transform the way the website is rendered if done correctly. So what we are going to do is add the following line to the top of the file:\n{% load staticfiles %}\nNext, find all instances of anything that looks like:\n<link rel=\"stylesheet\" type='text/css' media='all' href=\"static/css/webslides.css\">\nand change it to:\n<link rel=\"stylesheet\" type='text/css' media='all' href=\"{% static 'css/webslides.css' %}\">\nCareful with getting the quotes and the template tags in place accurately! Also remember to attack every instance of a reference to anything the static/ directory. If you are comfortable with it, this is a near-one-shot find and replace with a regex search.`\nYou could also make this work by using relative paths (i.e., changing the paths to ../css/webslides.css), but using the Django template tags as above is more robust to changes in the directory structure ‚Äî so in case your static files folder moves around, your code doesn‚Äôt have to change.\nNow, for the moment of truth, restart the server:\npython [manage.py](http://manage.py/) runserver\nand revisit your site:\n\nSo there! We‚Äôve managed to render the webslides deck inside of our Django project ‚Äî which is an awesome start already: üéâ\n\n\nStarting Clean\nOf course, we don‚Äôt quite want the index.html file to hold this particular content. I‚Äôm going to quickly pick out a slide (from the webslides demonstrations) that looks nice for displaying talk announcements, and get rid of all the original sections and just use this one. Here‚Äôs the HTML for the sections that I ended up with, populated with some sample content:\n<section>\n<div class=\"wrap\">\n<div class=\"card-30 bg-white\">\n<div class=\"flex-content\">\n<h2>Talk Title 1\n</h2>\n<p>Speaker Name & Affiliation</p>\n<p class=\"text-intro\">A brief abstract of the talk.\n</p>\n<ul class=\"description\">\n<li><strong class=\"text-label\">Date:</strong> 16 June 2018</li>\n<li>\n<strong class=\"text-label\">Time:</strong> 10:00 AM\n</li>\n<li><strong class=\"text-label\">Venue:</strong> Academic Block 1, Room 101</li>\n</ul>\n</div>\n<!-- end .flex-content-->\n</div>\n<!-- .end .card-50 -->\n</div>\n<!-- .end .wrap -->\n</section>\nOf course, this data would eventually be passed into the template from the database, but let‚Äôs render our site anyway and check it out once more before moving on:\n\nIt‚Äôs not hard to customize the header from index.html, but I am postponing that for a little bit later.\n\n\nTemplate Inheritance\nIt‚Äôs useful to have global-ish aspects of our template separated out into a (presumably traditionally named) base.html template, so we can make spin-offs easily. For example, when we have interviews we like to display room numbers for candidates interviewing for different disciplines on the same day, and some related general information. This page will carry the same overall structure, but we might want to use a slightly different combination of section templates. So let‚Äôs rip out the generic stuff from index.html and move it to base.html:\n{% load staticfiles %}\n...bunch of webslides header stuff...\n\n<main role=\"main\">\n  <article id=\"webslides\" class=\"vertical\">\n\n    {% block content %}\n    {% endblock content %}\n\n  </article>\n  <!-- end article -->\n</main>\n<!-- end main -->\n...bunch of webslides footer stuff...\n(Please don‚Äôt copy-paste this, work with your own webslides template if you are literally following along! I‚Äôve not dislpayed a bunch of stuff from their index.html in the interest of space.)\nMeanwhile, your index.html now looks like this:\n{% extends 'base.html' %}\n{% load staticfiles %}\n{% block content %}\n<section>\n<div class=\"wrap\">\n<div class=\"card-30 bg-white\">\n<div class=\"flex-content\">\n<h2>Talk Title 1\n</h2>\n<p>Speaker Name & Affiliation</p>\n<p class=\"text-intro\">A brief abstract of the talk.\n</p>\n<ul class=\"description\">\n<li><strong class=\"text-label\">Date:</strong> 16 June 2018</li>\n<li>\n<strong class=\"text-label\">Time:</strong> 10:00 AM\n</li>\n<li><strong class=\"text-label\">Venue:</strong> Academic Block 1, Room 101</li>\n</ul>\n</div>\n<!-- end .flex-content-->\n</div>\n<!-- .end .card-50 -->\n</div>\n<!-- .end .wrap -->\n</section>\n{% endblock content %}\nRemember to make sure that the line:\n{% extends 'base.html' %}\nis the very first thing in your file, and that you add:\n{% load staticfiles %}\nin case you plan to use anything in your static directory in index.html. The power of inheritance becomes a little more evident when you have other files piggybacking on base.html, but I‚Äôll leave that to your imagination for now.\n\n\nSetting up the Database\nWe‚Äôre going to start by creating an admin user, by typing the following into the commandline:\npython manage.py createsuperuser\nThis prompts for a username, email and password ‚Äî nothing out of the ordinary here. Next up is a critical point in this whole exercise, which is to setup the model, or the database schema, for the items we wanted to display. From the HTML above you might have guessed that what I want to define at this point is a talk object with the following attributes:\n\nTalk Title\nSpeaker Name\nVenue\nDate\nTime\n\nTo capture this, add the code below to models.py:\nclass Talk(models.Model):\n    title = models.CharField(max_length=255)\n    speaker = models.CharField(max_length=255)\n    description = models.TextField()\n    venue = models.CharField(max_length=255)\n    date = models.DateField()\n    time = models.TimeField()\nThe field types should be self-explanatory. One type that I did not use was the SlugField, which can be handy if you want every talk to have its own page. For now, we‚Äôre keeping it simple. We then ask Django to pick up this updated database plan by running migrations as follows:\npython manage.py makemigrations python manage.py migrate\nWe next get the built-in Django admin interface up to speed with information about our new database, by adding the following lines to admin.py in the Talks folder:\nfrom talks.models import Talk\nclass TalkAdmin(admin.modelAdmin):\nmodel = Thing\nlist_display = ('title','speaker','description','venue','date','time')\nadmin.site.register(Talk, TalkAdmin)\nThe business with the TalkAdmin class is optional, but it lets you do nice things like prepopulate fields where relevant: for instance, if we had a slug field, we could have said something like:\nprepopulated_fields = {'slug'}: ('name',)}\njust after the list_display line above, and you could see the slug getting automatically generated in the admin interface. Speaking of admin interfaces, let‚Äôs check ours out ‚Äî head over to http://127.0.0.1:8000/admin/ and login with your superuser credentials. Here‚Äôs what I see:\n\nYou should find your own data in the users table. But the interesting bits are in the Talks table, which is going to look exactly the way we modeled it above when you go to the table and click on the Add Talk button:\n\nNow let‚Äôs go ahead and add some sample data in here:\n\nI added this from the admin interface. If you like, you can setup forms for other users to add data to the database, but that‚Äôs going to be beyond the scope of our first app. For now, let‚Äôs get to tying this all together by getting the data from here to display on the frontend‚Ä¶\n\n\nDisplaying Dynamic Content\nIf you‚Äôve come this far, you are now ready to pull your data into the slideshow that we setup from before. First, let‚Äôs get into views.py, pull the data from our database, and pass it on to our template. Modify the file so it looks like this:\nfrom django.shortcuts import render\nfrom talks.models import Talk\n\n#Create your views here.\n\ndef index(request):\ntalks = Talk.objects.all()\nreturn render(request, 'index.html', {\n'talks': talks,\n})\nNext, let‚Äôs head back to our index.html file, and adapt our content block:\n{% extends 'base.html' %}\n{% load staticfiles %}\n{% block content %}\n{% for talk in talks %}\n<section>\n<div class=\"wrap\">\n<div class=\"card-30 bg-white\">\n<div class=\"flex-content\">\n<h2>{{ talk.title }}\n</h2>\n<p>{{ talk.speaker }}</p>\n<p class=\"text-intro\">{{ talk.description }}\n</p>\n<ul class=\"description\">\n<li><strong class=\"text-label\">Date:</strong> {{ talk.date }}</li>\n<li>\n<strong class=\"text-label\">Time:</strong> {{ talk.time }}\n</li>\n<li><strong class=\"text-label\">Venue:</strong> {{ talk.venue }}</li>\n</ul>\n</div>\n    <!-- end .flex-content-->\n</div>\n<!-- .end .card-50 -->\n</div>\n<!-- .end .wrap -->\n</section>\n{% endfor %}\n{% endblock content %}\nNote that we‚Äôre now using a for loop to go over everything in talks, and replacing our static content with template tags that represent the corresponding data from the database. Django has a lot of interesting ways in which you can format your content (such as dates and times, especially, but even text strings ‚Äî for instance, they can always be rendered in title case, if you like, and so on). Since the default view here is not bad, I won‚Äôt be pursuing this further ‚Äî but it‚Äôs good to know that you can do cool things.\nLet‚Äôs check out our site now, to relish the sight of the slides populated with conent from our database:\n\n\n\nFiltering Dynamic Content\nLet‚Äôs say we only want to display those talks whose date is not in the past ‚Äî this is a natural ask, we don‚Äôt want our virtual notice board to be cluttered with information about talks from the past (that‚Äôs more suitable for a talk archive page), and we also don‚Äôt want to have to delete talks from the database manually (two issues with this: the first is that manual is tedious, the second is that it‚Äôs nice to keep the data ‚Äî quite likely the developer of the future archive page will find it useful).\nOne way to do this is to loop through all the talks in our template file, and setup a conditional for whether we display it. The main problem doing it this way is that we are doing waaaay more work than is called for: eventually this database will have thousands of talks, while you probably need to get hold of a dozen or so of them. The more appropriate solution is to setup what is called a filter when you make the database query. After some fiddling around, I finally got to this updated query in my views file:\ntalks = Talk.objects.filter(date__gte=datetime.now()).order_by('date')\nRemember to import datetime for the above to work:\nfrom datetime import datetime\nThe syntax here is almost self-explanatory: we got rid of the .all() and replaced it with a .filter() to indicate that, indeed, we don‚Äôt want all records but only those that match the filter criteria. Next, gte stands for greater than or equal to; datetime.now() refers to today‚Äôs date; while the order_by directive asks the retrieved objects to be ordered according to a particular field. You can order by this-then-that by simply adding multiple fields separated by commas, and you can reverse the order by adding a leading hyphen (or a ‚Äúminus‚Äù, if you like) to the field name. Try all this out! Also: try to mess around with the query to see what happens when the query returns an empty set of records.\nGoing back to our app, we see that the one talk that was in the past (at the time of this writing) is now gone:\n\n\n\nFinishing Touches\nOne thing I didn‚Äôt touch upon was how to pass Python variables into the template. Let‚Äôs try this now, by adding a final slide that displays today‚Äôs date and a nice background image (which resides in the images/ folder under the static directory). To pull out today‚Äôs date, let‚Äôs set a variable currdate in our views file, and pass it on to our template, like so:\ndef index(request):\n    talks = Talk.objects.filter(date__gte=datetime.now()).order_by('date')\n    currdate = datetime.now()\n    return render(request, 'index.html', {\n        'talks': talks,\n        'currdate': currdate,\n})\nBack to the template, as before, I picked up a nice-looking section from the vast array of webslide‚Äôs demo pages. Carefully add this section after the forloop block ends:\n<section class=\"bg-gradient-v slide-bottom\">\n<span class=\"background light\" style=\"background-image:url('{% static 'images/campus-bg.png' %}')\"></span>\n    <div class=\"wrap\">\n        <div class=\"content-right\">\n            <h3 class=\"alignright\">{{ currdate|date }}</h3>\n        </div>\n    </div>\n<!-- .end .wrap -->\n</section>\nNote the use of {{ currdate|date }} ‚Äî this displays the value of the variable currdate but formatted so that only the date is displayed (without the trailing date instruction, this would display the date and the time by default). This gives us a cool final slide:\n\nAlso remember to head back to base.html and customize the header so the social media links and the logos are relevant to your setting:\n\n\n\nBeyond the First App\nOur app was, by design, a largely view-only app. In most situations, however, your app will likely have users, so you would want features like:\n\nRegistration (possibly even single-sign ons)\nA Login Flow (optionally, also an onboarding flow)\nReset Password\nThe ability for users to view user-specific data\nThe ability for users to add/edit/delete user-specific data\n\nFor a lot of this you would need to invoke some kind of a customized form interface (different from Django‚Äôs built-in admin interface) that allows the user to interact with the database. Covering this is beyond the scope of our discussion, but if you would like to set these things up, I‚Äôd suggest continuing your journey with either this Django tutorial series, the official documentation, or Hello Web App. Have fun!"
  },
  {
    "objectID": "posts/on-teaching/index.html",
    "href": "posts/on-teaching/index.html",
    "title": "On Teaching",
    "section": "",
    "text": "A teacher does not teach, a student learns.\n‚Äî snippet from this interview of Ustad Zakir Hussain\nI‚Äôll pose some how/what/why questions in the context of teaching."
  },
  {
    "objectID": "posts/on-teaching/index.html#how",
    "href": "posts/on-teaching/index.html#how",
    "title": "On Teaching",
    "section": "How",
    "text": "How\nThe last couple of decades, especially the last few years, have seen dramatic changes in how information is communicated. A lot of learning happens in online communities, for instance, question-and-answer websites like Quora and StackExchange. Thanks to folks who invest time on these platforms, expert help seems to be nearer than ever before. Specialized and snark-free communities on Discord/Slack/Telegram are enabling peer-to-peer learning at global scale. I keep hearing that Quora is not what it used to be, but as long as Thomas Cormen is an active user, I am positive it remains a valuable resource.\nBooks are beginning to be injected with exciting new technology: CodeMirror makes code interactive and runnable, while tools like PythonTutor can help with visualizing what happens behind-the-scenes when code is executed. Say what you want about JavaScript, but the interactivity that it brings to the written medium has helped make reading less passive. Some of my favorite interactive texts include Seeing Theory, Probabilistic Models of Cognition, courses on Brilliant, Mathigon, and essays from Nicky Case, Minute Labs, and others on Explorables.The name ‚ÄúPythonTutor‚Äù is slightly misleading, since the website also lets you visualize code snippets written in C, C++, Java, and JavaScript.\n\n\nAnd finally there are the online courses. At the time of this writing, it has been just a little over two decades since MIT‚Äôs Open Course Ware opened to the public. The early hype around MOOCs roughly coincided with my years in college and graduate school. As far as I remember, it was quite the thrill to have free-flowing access to online lectures ‚Äî ‚Äútaught by the best‚Äù ‚Äî for several of the courses I was supposed to be doing as a part of my curriculum.\n\n\n\n\n\n\nAll this is to say that I walked into a career involving a substantial teaching component with plenty of hesitation. The delivery was/is still largely confined to classroom settings in broadcast mode. It is not entirely clear what this format has to offer over YouTube. Basic interactivity is being increasingly solved with questions built into video players. Peer learning is quite doable with WhatsApp/Slack/Discord groups and local chapter meetups. Scale in the context of assessments is somewhat addressed by peer evaluation. And then there are all the things you can do on YouTube that you can‚Äôt do with traditional lectures: find a teacher whose style resonates, find an accent you understand, replay, play at 2x, 0.5x, binge watch, don‚Äôt watch‚Ä¶\nSo: what‚Äôs the incentive for anyone to show up in a classroom at a fixed time, especially when said time is 8AM? This question became particularly relevant during the pandemic years: once the novelty wore off, almost nobody‚Ä† showed up to lectures. If I was a student, I‚Äôd likely do the same. This remains largely an open problem in my mind, but here are some pointers that have kept me motivated about the conventional format. ‚Ä† Shout out to those of you accounting for the ‚Äúalmost‚Äù, thank you!\n\nClassroom = theatre. I am increasingly treating it as a ground for practicing standup and magic skills. I should admit that this isn‚Äôt easy for a clinically shy person like myself, but I got used to making a fool of myself fast ‚Äî that‚Äôs served well. I imagine that some of the fun that comes out performance-first lectures is hard to recreate with recordings and notes.\n\n\n\n\n\nTotally. It's almost always a performance, irrespective of the class size. And the more you rehearse, the better it goes. At least that's what works for me.\n\n‚Äî Manu Awasthi (@mnwsth) August 24, 2022\n\n\n\n\n\n\n\nSome musings on teaching from a lunch talk awhile back: https://t.co/19vOXpxcjs\n\n‚Äî Tim Roughgarden (@Tim_Roughgarden) April 6, 2021\n\n\n\n\n\nIn a classroom setting, I can nudge the audience to discover things for themselves. As far as I know, the interactivity in online materials can help with validating understanding, but not as much with developing it from first principles. My hope is for learners to walk out of a classroom with the confidence that they came up with parts of the material in the textbook on their own.\nAgain, this is hard to do in time-bound fashion, given that a lot of this kind of understanding comes from brooding and hours of messing around. I can only hope to convince the audience that the process is worth the trouble.\nThe opportunity to show that you care. For learners who may have struggles with and beyond the materials ‚Äî classrooms, labs, and office hours afford opportunities for us to offer help.\nThis was a late realization for me personally: for the longest time, my own sense of self-doubt did not allow me to see that I could potentially be useful to someone else. While self-doubt remains, I have started to compartmentalize it enough to show up for others.\n\nAll this said, I believe online and remote formats have substantial potential for making quality education accessible at scale, and that it is only a matter of time before classrooms in their most conventional forms either become obsolete or a ruse.\n\n\n\n\nI am going to attend college lectures from now on just to increase my attention span. The goal will be to sit for an hour without sleeping or getting distracted from mobile notifications.\n\n‚Äî Priyansh Agarwal (@Priyansh_31Dec) September 5, 2022\n\n\n\n\n\nCalvin on 21st Century Education"
  },
  {
    "objectID": "posts/on-teaching/index.html#what",
    "href": "posts/on-teaching/index.html#what",
    "title": "On Teaching",
    "section": "What",
    "text": "What\nIt is also increasingly challenging to formulate a curricula gets people to the bleeding edge starting from the foundations. For instance, there is a growing sentiment that Machine Learning is the new Algorithms (or maybe not). On the other hand, the extent of involvement of ‚Äúmathematics‚Äù in introductory CS courses is also up for debate.\n\n\n\n\n\nCutting Edge\n\n\nHow much theory is needed for competence in practice? How crucial is it to develop competencies that don‚Äôt have an immediately visible ROI? How frequently do we rewrite the textbooks based on developments in industry?\nI once read a collection of answers to the question of what every computer science graduate should know on a Q&A site. As an aspiring graduate myself, I figured I should know what I should know. Unfortunately, I remember it as a mostly unnerving experience: it was a list that started with Voronoi diagrams and ended with incompleteness theorems, and a lot of things in between.\nFrom the other side of the fence, for whatever it‚Äôs worth ‚Äî the answer to this question remains elusive, mainly because I think it‚Äôs a context-heavy issue. For better or worse, there is a growing interest in computer science, and it will likely remain a non-trivial challenge to find an approach that is both maximally inclusive and sufficiently useful. I can only hope that between ruthless efficiency in teaching things driven purely by need and a curriculum flooded with random adventures, we can find an balance appropriate to our contexts!"
  },
  {
    "objectID": "posts/on-teaching/index.html#why",
    "href": "posts/on-teaching/index.html#why",
    "title": "On Teaching",
    "section": "Why",
    "text": "Why\nGiven that everything that needs to be explained has more or less been done and dusted really well on the interwebs, personally, this is hardest question of the lot. Not from my own POV, that‚Äôs the easy bit - as pointed out here, it‚Äôs fun to go through the idea exchange process with a captive audience, and in my experience at least one party is sufficiently triggered at the end of it (hopefully in a good way).\n\n\n\nThe satisfaction that you get when you are able to explain a concept to someone who did not know it earlier is immense. Sometimes it could be straightforward, and sometimes it could be frustrating. But the end point is always the same - a smile on the faces of those students. Money can buy all the books, but can‚Äôt buy that smile.\nProf Dheeraj Sanghi, ‚ÄúWhy I want to be a professor‚Äù\n\n\n\n\nOn hope in teaching.\n\n\nI am just not sure if we create enough of a net positive in a traditional classroom setup from a ROI perspective. Given the few good things that the internet has brought us, perhaps it is time to think beyond classrooms and focusing on making existing resources more accessible to everyone who‚Äôs interested.\n\n\n\n\nJoin the conversation\n\n\nNew blog, new post:https://t.co/c2lEHM0lTIMeanwhile ‚Äî happy teachers day to everyone!\n\n‚Äî Neeldhara (@neeldhara) September 5, 2022"
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html",
    "href": "posts/envelope-budgeting-notion/index.html",
    "title": "Envelope Budgeting with Notion",
    "section": "",
    "text": "YNAB (c.f. r/YNAB) (short for You Need a Budget) is a budgeting application that lets you track and manage your finances. Like most apps in this category, it provides a slick interface to enter all your transactions. YNAB is more than just cataloging transactions and tracking account balances, though. The design here revolves around (and goes beyond) what is called envelope budgeting, which basically boils down to this:\nYou can dig a little deeper into how YNAB works by looking up their four rules here. I am going to try and create an envelope budgeting system in Notion that is loosely inspired by my use of YNAB.\nTo be clear, I don‚Äôt expect to stop using YNAB, nor do I expect to replicate many of its sophisticated features. Also, there are some nice envelope budgeting systems on Notion already! For instance, you might want to check out the one here by u/sff_fan_17 or the one here by Ben Smith. These are really neat, but the only reason I‚Äôm not just duplicating one of them is that what I have in mind looks slightly different from the setups here. In particular, I would like the transactions to be dated and tied to specific accounts, and I would also like the system here to account for all the inflows and outflows in my actual system. Neither of these templates feature a hierarchy of categories either, which is something that we will attempt to do here.\nIn the first template above, I think the total income is mentioned separately, outside of the database system; and the budget covers a part of the total available income. There are explicit instructions on how to update this month-to-month, so do check this out ‚Äî perhaps it works for what you might have in mind! The second template explicitly accounts for inflows, and is apparently based on this Google sheet. It does seem that the transactions are missing information about accounts and dates, which could be a little limiting if you wanted to generate a report or a dashboard for a particular period of time. Again, a great starting point, and if it resonates with your kind of setup, it‚Äôs definitely worth duplicating and playing with. Both templates are free to access and replicate.\nIncidentally, if you don‚Äôt use Notion and are hesitant to try YNAB, you could take a look at their guide to building your own budgeting template ‚Äî this does not require using YNAB at all and can even be made to work pen and paper. Many people have also recreated YNAB‚Äôs core features using their own favourite tools, the most popular among which appears to be Google sheets ‚Äî see, for example: Aspire Budget (c.f. r/aspirebudgeting) ‚Äî I have not tried this myself, but it appears to be very feature-rich and neat overall.\nThat said, onto our own YNAB-esque budgeting template in Notion! We‚Äôre on our way to something that looks like this:\nIf you want to just skip ahead and play with the template, you can duplicate it by following this link:\nThere are three key pieces to this setup: the first is the categories (these are the labels on the envelopes, if you like), the second is the actual transactions that take take place, and the third is a list of accounts that you have (could be bank accounts, credit accounts, virtual wallets, and so on). You would want the transactions database to be linked to both categories and the accounts. More on the exact table designs below. I‚Äôm going to assume some familiarity with Notion terminology, if this is your first time with Notion then some of this may not make sense right away, but if you could just look up how Notion databases work ‚Äî especially the relational aspect ‚Äî then I think you‚Äôd have all you need to follow along!"
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html#budgeting-categories",
    "href": "posts/envelope-budgeting-notion/index.html#budgeting-categories",
    "title": "Envelope Budgeting with Notion",
    "section": "Budgeting Categories",
    "text": "Budgeting Categories\nIt may be natural for this table to just have one row for each category. You probably want to have a small number of higher-order categories (e.g: monthly supplies, services, maintenance, health, investments, etc.) and smaller, more specific ones under these broad umbrellas (e.g, services would likely have sub-categories along the lines of internet, phone, electricity, water, etc.). You can do this by setting up a relation property to the table itself, and have it sync two-way, like so:\n\n\n\nScreenshot 2021-09-18 at 3.29.11 PM.png\n\n\n\n‚ö° We want to make a database that captures the categories that our expenses fall under, and the budget that‚Äôs available for these categories.\n\nIf you want to see just the higher-order categories nicely, you can setup a gallery view with a filter for the main category to be empty, which would look like this (I‚Äôve disabled the preview and added some icons from notion.vip):\n\n\n\nThe Gallery View\n\n\nNext, we want to specify a budget for each of these categories. We can do this directly for the lower-order categories first. Then, we can have the main category budgets calculated automatically by rolling up the budgets of the corresponding child categories and adding up their budget values. To have a clean view of the budget, you could add a formula column that just adds up the values from the direct budgets and the rollup, like so:\n\n\n\nBudget View\n\n\nYou can add two dummy properties with the text Budgeted: and Remaining: for each row, and set them to show along with the budget in the Gallery view so you get something like this:\n\n\n\nBudgeted and Remaining Labels\n\n\nThere are two natural questions at this point:\n\nHow do we know that we have budgeted what we actually have?\nHow do we know what amounts are remaining at any given point of time in the month?\n\nTo address both of these questions, we will need to flesh out the transactions database, link it to the categories and come back to this. But before that, let‚Äôs do a quick detour with an accounts database just to setup the foundation we need for the transactions database."
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html#accounts",
    "href": "posts/envelope-budgeting-notion/index.html#accounts",
    "title": "Envelope Budgeting with Notion",
    "section": "Accounts",
    "text": "Accounts\nFor this demonstration, I am just going to add two accounts ‚Äî one savings bank account and one credit card account:\nThe most natural property we want for the Accounts database would be a balance column. Instead of maintaining this manually, we will just link this with the transactions database and derive the balance by rolling up the relevant transactions.\n\n\n\nAccounts View\n\n\n\n‚ö° The accounts database simply has one row for every account you have ‚Äî these could be savings accounts, credit card accounts, a cash account, or your virtual wallets."
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html#transactions",
    "href": "posts/envelope-budgeting-notion/index.html#transactions",
    "title": "Envelope Budgeting with Notion",
    "section": "Transactions",
    "text": "Transactions\nYou might want to optionally add a memo property that lets you add a quick note or explanation for the transaction. However, given that each database entry is also a page, you could also quite flexibly add all the additional information you want to the page corresponding to any transaction. Meanwhile, you might also want to setup relations to other parts of your Notion setup if you find anything relevant ‚Äî for instance, if you have a books database, or an inventory database, and so on. That said, we‚Äôre going to keep it simple here, and here‚Äôs an example transaction:\n\n\n\nAn Example Transaction\n\n\n\n‚ö° Every transaction has the following: an amount, a payee, the account to which the amount was debited or credited to, the date the transaction happened, and and the expense category that the transaction belonged to. We set these up as columns with the appropriate properties, with the accounts and categories being relational links.\n\nYou‚Äôll notice that I‚Äôve linked to both the child and the parent category for this transaction. It would be nice if the parent category was pulled up automatically ‚Äî and this is possible with a formula, but as far as I know the formula will not actually link the transaction to the main category. So for now, we assign both categories manually. ü§∑‚Äç‚ôÄÔ∏è\nOne quick thing to do now is to go back to the Accounts database and add a rollup property that takes on the sum of the amounts property from the related transactions table, and once done, the balances show up nicely in the gallery view:\n\n\n\n\n\nRollup sum of amounts in accounts\n\n\n\n\n\n\nGallery view of balances\n\n\n\n\nNow we go back to our categories database and rename the relational column to transactions and add a rollup that collects all expenses from the transactions that happened in a particular category, so this is what it looks like:\n\n\n\nCategory view\n\n\nNow add a formula column available that simply adds up the budget and the expense columns so you can find out how much of your budget is still available for use. My formula looks like this:\nprop(\"Final Budget\") + prop(\"Expenses\")\nNote that it might feel more natural to subtract expenses, but my expenses are already negative amount transactions, so I just need to bundle it all together.\n\n\n\nCategory View\n\n\nJust for fun, you could also add a status column that visually indicates how much of your budget you have left. The progress-bar style of the status property here is inspired by this guide, and the formula I used requires a couple of auxiliary columns that calculate the percentage and determine if a half-star should be used or not based on the value of the decimal part. It also first checks that the available balance is in fact positive, if not, it‚Äôs going to display a suitably scary warning emoji. I won‚Äôt bore you with the specifics here, but you can find the formula in the template that I‚Äôve linked to at the end of this post.\nSo now we are at a point where the remaining amounts are calculated based on the transactions. However, we still have to think about how to link the budgeted amounts to the actual money available. In fact, speaking of money available, I haven‚Äôt really touched upon how to handle transactions that are not expenses; i.e, transactions with a positive amount value and that reflect money coming into the system as opposed to leaving it. These are, of course, just regular transactions ‚Äî but what category do we assign them to? All the ones we have so far really capture spends, not inflows‚Ä¶\nSo, it turns out that YNAB would take all this money and automatically categorize it as unassigned, or to be budgeted. We can mimic this by creating a special category called to be assigned, and have all income-type transactions categorized as such. Typically this would be transactions corresponding to a salary, client payments, refunds, credit from interest, and so forth.\n\n\n\nThe TBA Category\n\n\nNotice that the so-called expenses1 that are now accumulating in this category is actually the total amount of money that came into the system. Incidentally, if you were to just look at the sum of the balance column in the accounts database, that‚Äôs the net amount of money in the system at any given point of time.1¬†Remember that the expenses column just rolled up the transaction amounts in a particular category.\n\n\n\n\nAccounts View\n\n\n\n‚ö° Note that transactions that just move money within your accounts, like a credit card payment, don‚Äôt need any explicit expense categories.\n\nYou also don‚Äôt need to budget separately for credit card payments, because your credit card bill is composed of transactions that were already budgeted for! Even if they were items corresponding to, say, credit card fees, you probably categorized them under Services, for example. So we won‚Äôt have a separate budget for credit card bill payments (although I should mention that YNAB does this explicitly and handles it automatically).\nAlright, so it seems like we are nearly there, except that our current situation is the following:\n\nThe amount the to be assigned category is a true reflection of incoming funds.\nThe amounts that we added to our category budgets were setup manually and generally divorced from the reality in the transactions database.\n\n\n‚ö° To fix this, we need some way to move funds from the to be assigned category to the other ones.\n\nFor example, let‚Äôs say I want to budget 750 for ebooks this month. I could do this by adding a dummy transaction that debits an amount of 750 to the to be assigned category and credits it to the ebooks category. What this means is that when we roll up the amounts from all transactions, we directly obtain the amount remaining for us to spend!\nSo for the very first month, when we have a clean slate, we just have a bunch of such transactions ‚Äî these won‚Äôt have any explicit account associated with them because they aren‚Äôt real transactions; and in fact you can always filter your transactions table so that you only see the meaningful ones by setting the condition that the accounts column should be non-empty.\nMeanwhile, here is how we do the budgets for our categories all over again, this time via these virtual transactions:\n\n\n\nBudget Overview\n\n\nIf you go to the to be assigned row in the categories table and look at the rollup value in the expenses column, then you‚Äôll see that it corresponds to either the amount of money that‚Äôs still assigned (these are dollars ‚Äî or in my case, rupees ‚Äî that don‚Äôt have a job yet), or, in case you happen to have overshot the budget, the amount by which you are falling short. In the former situation, the available amount will be a positive number, while in the latter, it‚Äôll be negative.\n\n\n\nTo Be Assigned\n\n\nIdeally, we just want this number to be zero, indicating that everything has been assigned appropriately. To achieve this:\n\nIf your budgets have collectively overshot the amount of money available, re-adjust them them ‚Äî specifically, reduce some of the amounts ‚Äî so that this is no longer the case. Of course, I am saying this from a theoretical standpoint; if your situation is that you have real expenses that you don‚Äôt have real money for, then you would want to plan for this by bringing the differential amount of money into the system via a loan, and then planning the repayment by budgeting for it as well. Dealing with debt is beyond the scope of this discussion, but I think the YNAB blog, book, and videos go into this at length.\nIf you have money left over, you could either add it to your budgets, giving yourself some extra wiggle room; but I prefer to budget for fixed amounts generally, so in this situation I‚Äôll just add this amount to something I call a Miscellaneous or Scratchpad category. It‚Äôs something you can borrow from if you fall short later, it has no particular semantics. Some people like to sweep off any excess money into deposit accounts, and if you do this, then you might want to create those accounts in the system and enter those transactions to get rid of this positive balance.\n\nAt the end of this, you are in a situation where all money is nice and assigned. Since we started off by specifying budgets manually, we should go back and fix some formulas in our database of categories. In particular, here‚Äôs what I did to simplify things:\n\nRemove the Available column (previously this was the difference of the manually set budget and the rolled up expenses).\nRename Expenses to Available, since the rollup now just reflects what‚Äôs truly available.\n\nI‚Äôm going to leave the manually added budgets in ‚Äî although we won‚Äôt use them to calculate what‚Äôs truly available any more, they will help us plan our budgets going forward.\nEverything so far should make sense for an initial setup, but what do we do when we have new incoming transactions that need to be assigned to categories? I generally like to do the budgeting exercise once at the start of every month, so any intermediate positive transactions into the system will either remain in the To be assigned category, or if you are OCD about wanting that that category to be set to zero always, you can always push this number out into your scratchpad.\nAt the start of the month (this could be another day and a different frequency; but I do recommend being consistent for simplicity), we need to refuel the categories with the funds available. There are two kinds of things that could happen here, broadly speaking:\n\nFor categories that represent a plan to save up to something, like a vacation, or a category where you feel like you want to have a certain amount of money set aside every month irrespective of how much you spent in the last month, you just want to push budget amount of money into that category via the virtual transactions we discussed earlier.\nFor other categories, which I like to think of as those having rolling budgets, you want to only assign the difference between what was budgeted and what was spent‚Ä¶ and hopefully this is a non-negative quantity!\n\nYou could setup a checkbox to indicate which categories have rolling budgets and which ones do not, and then this formula:\nprop(\"IsRolling?\") ? (prop(\"Budget\") - prop(\"Available\")) : prop(\"Budget\")\nwill tell you how much you should budget for next month.\n\n\n\nIn this example, Ebooks are not a rolling category, so even though I need only 628.95 to meet the original budget, I‚Äôll still set aside the full 750, and the amount that will be available will be 871.05. On the other hand, Phone is a rolling category, and presumably my phone-related expenses in the current month added up to 420, so the recommendation is to budget 420 next time so you‚Äôll still have 500 available total.\n\n\nIn this example, Ebooks are not a rolling category, so even though I need only 628.95 to meet the original budget, I‚Äôll still set aside the full 750, and the amount that will be available will be 871.05. On the other hand, Phone is a rolling category, and presumably my phone-related expenses in the current month added up to 420, so the recommendation is to budget 420 next time so you‚Äôll still have 500 available total."
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html#the-process-after-setting-up",
    "href": "posts/envelope-budgeting-notion/index.html#the-process-after-setting-up",
    "title": "Envelope Budgeting with Notion",
    "section": "The Process After Setting Up",
    "text": "The Process After Setting Up\nThere are two main times that you‚Äôll interact with this budget: whenever a transaction is made, and once every X days to reset the budgets for the individual categories.\nAdding transactions is reasonably easy, although admittedly it‚Äôs probably not as smooth as a specialized app that might have a Siri command to do this for you or a widget that let‚Äôs you quick-add things. However, it‚Äôs not too bad, especially if you enter it right away. You could also potentially automate this via API integrations, or enter your transactions in your regular app and export them as a CSV and import them into the Notion system once every so often.\n\n\n\nTransaction Table\n\n\nThe budgeting bit is going to be a little more work, especially if you work with a gazillion categories. The formulas will guide to you what needs to be done, but those virtual transactions still need to be added manually. On YNAB, you can do what I described above (adding the deficit to rollup categories and the originally intended budgets to the others) in one click ‚Äî and there are other options too, for example, you may have moved to a new location and you‚Äôre still getting the hang of what you‚Äôll need to set aside for groceries, so YNAB will offer to budget what you spent last month, or your average expenses from the last six months, and so on. Here, since you are assigning things manually, you can definitely tweak as you go; the next month column is just a suggestion.\nYou can probably prepare a CSV file with the default budget amounts and just merge this in at the start of every month if your expenses are super predictable, and just adjust the entries that need adjusting. This will save you some time, but remember that the categories still need to be linked to manually. It‚Äôs not too bad for something that happens once a month and that will hopefully bring you some sense of control and awareness üòá\nPerhaps also try and not have a gazillion categories and sub-categories, at least to begin with ‚Äî it helps to keep things simple, especially when starting out."
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html#common-pitfalls",
    "href": "posts/envelope-budgeting-notion/index.html#common-pitfalls",
    "title": "Envelope Budgeting with Notion",
    "section": "Common Pitfalls",
    "text": "Common Pitfalls\nHere are a couple of mistakes I made frequently, even while just setting up this template!\n\nForgetting that transaction amounts corresponding to expenses should be recorded as negative numbers! If this happens very very frequently to you, you could also set this up a little differently ‚Äî have a checkbox to indicate if a transaction is an expense or an inflow, and always enter a positive number reflecting the amount, and let a formula do the work of adding the sign!\nForgetting to add the parent category ‚Äî this can mess up the views of what‚Äôs available in the high-level categories and cause the numbers to not tally. So if you need to debug your numbers, check for whether you have added both categories to your transactions or not!"
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html#dashboards",
    "href": "posts/envelope-budgeting-notion/index.html#dashboards",
    "title": "Envelope Budgeting with Notion",
    "section": "Dashboards",
    "text": "Dashboards\nMost of the action here is happening in the Transactions database. You could create linked copies of this database anywhere you like and filter things out to see what you want. For instance, if you want to keep tabs on the transactions in specific accounts, you could have this on your account pages:\n\n\n\nAccount Overview\n\n\nYou could filter out transactions for a particular month, a particular category (either a top-level category or an atomic one), and so on. I think there‚Äôs plenty you can do here, but I am not sure how much of this can be automated. For instance, you might want to generate ‚Äî or have over email ‚Äî a monthly report of your expenses across various categories and how did relative to your estimated budgets. This should be possible by leveraging the API and tools like Integromat/Zapier/Automate.io - but I haven‚Äôt really explored the possibilities here."
  },
  {
    "objectID": "posts/envelope-budgeting-notion/index.html#missing-features",
    "href": "posts/envelope-budgeting-notion/index.html#missing-features",
    "title": "Envelope Budgeting with Notion",
    "section": "Missing Features",
    "text": "Missing Features\nIt would be nice to have a gallery view of the months of the year showing spends and budgets in each (high-level?) category. For this though I‚Äôd need the rows to correspond to months, columns corresponding to categories, which pull up transactions that happened in a particular month from said category.\nEven if I manually linked the transactions database to this calendar one, and made sure each transaction was linked to the correct row, I don‚Äôt see how I can split up those transactions across categories, since it‚Äôs not possible to add a filter to relational columns or rollups as far as I know. It‚Äôs a similar bottleneck going through the Categories database as well. This information is of course implicit in the system, I just can‚Äôt think of a neat way of visualizing it.\nThis is possible to do for the current month though:\n\n\n\nMonthly Overview\n\n\nYNAB also has more sophisticated category types ‚Äî apart from budgets that roll or accumulate, you could have categories that aim to have a certain amount of funds assigned by a certain date and so on. For those who are freelancers with incomes spread over the days of the month, I think YNAB has a lot of little features that allow for a more flexible way of budgeting, which I‚Äôm not super familiar with because I‚Äôm not in this situation. This is just to say that this setup here may be both limiting and feeing because of how much of the setup is manually done. At least that‚Äôs my optimistic view right now üòÄ\nFinally, YNAB also has an option to reconcile accounts, which is when you declare that the numbers in YNAB match the book balance according to your bank or credit card agency. This is a neat little thing that I like to check off every so often. Here, I suppose you could just glance through the balances on the Accounts database (remember the gallery view from earlier?), but it won‚Äôt have the same song-and-dance-y feeling ‚Äî but maybe this could be a recurring task that you can check off, and hopefully that will feel good üòÖ\nSo that‚Äôs about it! I‚Äôd love to hear any feedback on this, and suggestions for improving the setup would be very welcome too. You can duplicate the template from here."
  },
  {
    "objectID": "posts/women-in-mathematics/index.html",
    "href": "posts/women-in-mathematics/index.html",
    "title": "Women in Mathematics",
    "section": "",
    "text": "I‚Äôll also leave this relatively sobering thought (or this one) here with no further comment.\n\nBooks:\n\nComplexities ‚Äì Women in Mathematics\nWomen in Mathematics ‚Äì The Addition of Difference\nHow to Free Your Inner Mathematician: Notes on Mathematics and Life\nAda‚Äôs Algorithm: How Lord Byron‚Äôs Daughter Launched the Digital Age Through the Poetry of Numbers\nWomen Who Count: Honoring African American Women Mathematicians\nWomen Becoming Mathematicians ‚Äì Creating a Professional Identity in Post‚ÄìWorld War II America\nPower in Numbers: The Rebel Women of Mathematics\nMy Remarkable Journey: A Memoir (Katherine Johnson)\nProving It Her Way: Emmy Noether, a Life in Mathematics\nEmmy Noether‚Äôs Wonderful Theorem\nLove and Mathematics: Sofya Kovalevskaya (alternate link)\nEinstein‚Äôs Wife: The Real Story of Mileva Einstein-Maric\nInventing the Mathematician: Gender, Race, and Our Cultural Understanding of Mathematics\nIn Code: A Mathematical Journey\nAgainst All Odds: Women‚Äôs Ways to Mathematical Research Since 1800: 6 (Women in the History of Philosophy and Sciences)\nThe Ascent of Mary Somerville in 19th Century Society\nJulia: A Life in Mathematics (ebook only)\nWomen of Mathematics: A Bio-Bibliographic Sourcebook\nA Celebration of the EDGE Program‚Äôs Impact on the Mathematics Community and Beyond\nThose Magnificent Women and their Flying Machines: ISRO‚ÄôS Mission to Mars\nGirls Coming to Tech!: A History of American Engineering Education for Women\nFifty Years of Women in Mathematics\nx+y: A Mathematician‚Äôs Manifesto for Rethinking Gender\n\nIllustrated Books:\n\nMaryam‚Äôs Magic: The Story of Mathematician Maryam Mirzakhani\nNothing Stopped Sophie: The Story of Unshakable Mathematician Sophie Germain\nGrace Hopper: Queen of Computer Code\nAda Byron Lovelace and the Thinking Machine\nThe Thrilling Adventures of Lovelace and Babbage: The (Mostly) True Story of the First Computer\nThe Girl With a Mind for Math: The Story of Raye Montague\nHidden Figures: The True Story of Four Black Women and the Space Race\nCounting on Katherine: How Katherine Johnson Put Astronauts on the Moon\nEmmy Noether: The Most Important Mathematician You‚Äôve Never Heard Of\n\nMiscellaneous:\n\nA Tribute to Professor Helena Rasiowa (PDF)\nA Groundbreaking Mathematician on the Gender Politics of Her Field (New Yorker)"
  },
  {
    "objectID": "posts/skj/index.html",
    "href": "posts/skj/index.html",
    "title": "SKJ",
    "section": "",
    "text": "Prof.¬†Jain at the farewell event held on the 3rd January, 2022.\n\n\nYou can find out more about Prof.¬†Jain‚Äôs own take on the cultural foundations of IIT Gandhinagar here, where he is in conversation with Achal Mehra.\n\n\nCanadian astronaut Chris Hadfield has said that leadership is not about glorious crowning acts. It‚Äôs about keeping your team focused on a goal and motivated to do their best to achieve it, especially when the stakes are high and the consequences really matter. It is about laying the groundwork for others‚Äô success, and then standing back and letting them shine. If that sounds familiar, I think it‚Äôs because we have lived this experience at IIT Gandhinagar, thanks to Prof.¬†Jain.\nOur guiding principles have been often unconventional ‚Äî whether it‚Äôs about having students first, or choosing to trade short-term gains for the long-term vision. They have sometimes led to decisions that would seem quite inexplicable to anyone who did not have the context. Some of you might remember how early we started the undergraduate program in Computer Science, for example. Ok, so for the record, we started it quite late, at least according to conventional wisdom.\nCrucially, these core values have always been articulated in collaboration, with inputs from all stakeholders, which is what enables our shared conviction in them once they have been established.\nProf.¬†Jain‚Äôs vision for IIT Gandhinagar is as precise as it‚Äôs bold ‚Äì he knew exactly what needed to be done for this place to emerge as a model institution. He had recently shared with us his roadmap for IITGN from a dozen years ago. This roadmap committed not to vague ideas but concrete goals, complete with numbers for metrics that are fraught with uncertainty. It‚Äôs absolutely stunning how everything panned out almost exactly according to plan!\nOur narrative has many collaborators, including our students, faculty, and staff. And while some of us are relatively inexperienced, Prof.¬†Jain‚Äôs trust in everyone has been hugely empowering. It manifests in many concrete ways ‚Äì starting from wanting for students to be recognized as adults, to turning young colleagues into decision-makers‚Ä¶ and this is why all of us have a deep sense of ownership for IITGN.\nAn environment that gives all of us the freedom to experiment and the leeway to fail is extremely enabling. This has led to a wide spectrum of wins, many that are quantifiable and others that are less tangible. If you want to get a sense of how good the times have been, just look around ‚Äì the sheer beauty and the attention to detail that the campus embodies is an excellent symbolism for the inclusive, thoughtful, and innovative leadership that we have experienced. When it comes to how far we have come, I could go on‚Ä¶ pretty much forever, so I‚Äôll defer you to the website for more details.\nIt is impossible to imagine IITGN without you. This is your brainchild through and through. Despite knowing that you‚Äôll not be distancing in spirit, we will miss having you nurture the institution in the hands-on manner that you have always done. Your passion for the IITGN mission ‚Äì of being a breakout university while operating within the limitations and strengths of the IIT system ‚Äì is contagious. I am sure you plan to double down on this even though you may have a few distractions going forward.\nI recently watched Maanaadu, a movie based on the idea of a time loop. In such stories, the plot involves the protagonist experiencing the same day over and over again, and their goal, typically, is to find an exit. If there is one day that we could put into a time loop, it would be today, and there would be no need to get out of it.\nIn the meantime ‚Äì on behalf of all of us, thank you.\nThank you for your commitment, trust, and friendship; for listening patiently, for leading tirelessly, and for fighting the good fight through tough times, and for the good times through tough fights ‚Äì ok, I‚Äôm going to be out of time, here, clearly ‚Äì so let me just say, thank you for everything."
  },
  {
    "objectID": "posts/homework-help/index.html",
    "href": "posts/homework-help/index.html",
    "title": "How Expensive Can Homework Help Be?",
    "section": "",
    "text": "Tapesh has been struggling lately with the dire task of undergraduate homework. He has been asked to find a vertex cover on 23 vertices - not one more - in a graph that has a thousand vertices. Being the straightforward boy that he is, Tapesh considers writing a program that will try its luck on every possible subset of 23 vertices.\nHe then heads over to Wolfram Alpha to check how long it will be before he‚Äôs done examining all the {1000 \\choose 23} possibilities, assuming (rather liberally) that he has at his disposal a computer that can perform 10^{24} operations per second.\nIt turns out that he, and more critically, his professor, would be in for a long, long wait. The algorithm would need time proportional to the age of the universe many times over, and this is decidedly depressing, particularly when one‚Äôs expected lifespan appears to be determined by the deadline for turning in homework.\nTapesh now appeals to his very clever cousin, Prodosh, for help.\nProdosh borrows the monstrous graph, and in short order, points out a vertex cover on 24 vertices, using powers evidently beyond what processors with 10^{24} FLOPS can do. Tapesh is thrilled, however‚Ä¶\n‚ÄúI need to get one with 23, the assignment says not one more ‚Äî‚Äù\n‚ÄúTime for a smoke,‚Äù Prodosh yawns, and then delves into a distracted, pensive mood, with no signs of immediate return.\nTapesh is torn, but he decides to (gulp) show whatever he has so far - after all, it is progress!\nPredictably, Professor Maganlal displays no signs of being impressed, but he grudgingly admits that Tapesh‚Äôs solution (which we will call T) is not very far from the correct answer, and points out those vertices in T that happen to partake in the solution that was sought.\nTapesh is back to the drawing board, but with the distinct feeling that he is now armed with enough information to crack the code himself.\nHis solution T is now partitioned into the good part (T_G), that is, all the vertices of T that belong to X, and the bad part (T_B), which are all the vertices that do not belong to X.\n‚ÄúAha.‚Äù\nNecessarily, all the neighbors of the bad part must belong to X!\nHe checks, and sure enough, the number of vertices in T_G and N(T_B) is an exact, resounding 23. Also, very fortunately, there are no edges in T_B, so he has no trouble swapping T_B for N(T_B) to get to the newer and smaller vertex cover.\nMission accomplished!\nNow more confident, Tapesh wonders if he could have arrived at X all on his own. Indeed, what would he have done without Pradosh‚Äôs help? And without Professor Maganlal giving him that partition?\nCome to think of it, the second question has an easy answer. Tapesh would just try all possible partitions of the solution that Pradosh had given him. He would only have to disregard the partitions that didn‚Äôt work‚Ä¶ and sooner or later, he would hit the one that his Professor so graciously suggested. This would mean examining 2^{24} subsets, a matter of a split second for a personal computer.\nBut - can he replicate Pradosh‚Äôs magic on his own?\nTapesh is up into the middle of the night waiting for the brainwave that will make him completely self-dependent, at least in the broad context of finding small vertex covers in large graphs.\nHe is still impressed that he has just found a general scheme for taking a vertex cover of size 24 and bringing it down to 23. Wanting to make the most of the only trick he knew, he wondered if he could use it more than once.\nSo he looked at the 1,000-vertex monstrosity and contemplated the possibility of working with a manageable chunk first. What if he selected an easy subgraph H for isolated consideration? Surely, if G has a vertex cover of 23 vertices, H has one too. So all he would need is to find a vertex cover on 24 vertices, and he already knew how to squish it to one of size 23.\nWhat was the easiest chunk that he could work with? One on which finding a vertex cover of size 24 wasn‚Äôt hard?\nBut of course, a subgraph on 24 vertices would be really easy to deal with!\nThe entire graph H would serve as its own vertex cover, would be of size 24 ‚Äî it couldn‚Äôt get easier than that.\nSo Tapesh starts by selecting the first 24 vertices that he can find, and applies his squishing strategy to find a vertex cover on 23 vertices.\nWhat now?\nHe gives the remaining 976 vertices a hesitant look.\nMaybe it was time to grow H to include some more vertices? If Tapesh could get H to eventually morph into being all of G, he would be done!\nBut if he added a whole bunch of new vertices, he would need to do something about finding a vertex cover of size 24 in the bigger H to make progress‚Ä¶ but that sounded like work :(\nMaybe, maybe just let in one more vertex into the precious subgraph H? Indeed, there is enough room in the vertex cover of size 23 for one more vertex. So H would grow by a single vertex, and so would the vertex cover - and then Tapesh could squish it again!\nAnd there is no stopping Tapesh from repeating this 975 times more, and each time, the reincarnated H would be one larger than before, and every time he would beat down the vertex cover to one of size 23, till he got to the end.\nBut, Tapesh wonders sleepily, wouldn‚Äôt this take awfully long?\nThe squishing was quick, and now it has to be done 977 times altogether‚Ä¶ and even at the lesiurely pace of doing one iteration in one second, you would need less than half an hour before you finished.\nNot too shabby ‚Äî certainly no waiting for universes to come and go!\nIn general, the problem of finding a vertex cover of size k in a graph on n vertices vertices can be done in time:\nO((n-k) \\cdot 2^{k+1})\nfollowing the recipe in this story.\nIf this algorithm aborts, unable to find a vertex cover of size k, it is because a subgraph did not have a vertex cover of size k. Of course, this also means that the entire graph does not have a vertex cover of size k either, so the process makes sense.\nIt is important to note that not every problem is designed to fit this bill, for instance, if the next homework assignment demands a vertex cover that is also connected, the iteration procedure, as it stands, might not be accurate when it reports a negative answer.\nThe next assignment, therefore, potentially leads to a more demanding adventure."
  },
  {
    "objectID": "posts/comms/index.html",
    "href": "posts/comms/index.html",
    "title": "External Communications",
    "section": "",
    "text": "I finish seven years at IIT Gandhinagar today.\nThis year, I also concluded my stint with the Department of External Communications, which feels about as long. Indeed, little did I know that a casual remark that I had made during my interview1, about wanting to be a writer for as long as I can remember, was carefully noted ‚Äî and magically my service responsibilities would end up being related to my childhood dream. A few days after I joined, I met Achal Mehra, who introduced me to Connections: a four-page newsletter that went places every quarter. In my mind, that conversation kickstarted my collaboration with what everyone fondly calls ‚Äúcomms‚Äù. Seven years later, I‚Äôm here to report that the journey has been fun and fulfilling in equal measure.\nThrough this post, I‚Äôd like to introduce you to the comms team: if you have been to IITGN for an event, read about us in the press, have recieved a newsletter from us, visited our website, or followed our social media: these are the folks who work behind the scenes on these fronts. Being a part of this gang has been a huge inspiration: everyone is talented but always willing to learn; their hard work is driven by a sense of ownership; and there‚Äôs plenty of wit to help beat the heat :)\nHere‚Äôs collection of some randomly chosen memories: my hat-tip to a stellar team."
  },
  {
    "objectID": "posts/comms/index.html#hatim",
    "href": "posts/comms/index.html#hatim",
    "title": "External Communications",
    "section": "Hatim",
    "text": "Hatim\nHatim joined us in the summer of 2018 and worked with us for four years. This summer, he moved on to join the design unit at ISDM as a Graphic Designer and Video Editor.\nHatim has had a creative flair from the get go. He‚Äôs been a part of several exciting projects, including being the person behind the visuals for Alok Kanungo‚Äôs book, Glass Crafts in Northern India. Also, here‚Äôs a cool trailer he put together very quickly for the ACM-W India Grad Cohort that I was involved in organizing in 2020."
  },
  {
    "objectID": "posts/comms/index.html#dilip",
    "href": "posts/comms/index.html#dilip",
    "title": "External Communications",
    "section": "Dilip",
    "text": "Dilip\nDilip joined us in the summer of 2018. He had a distinct passion for developing mobile and web applications, and indeed, he‚Äôs been a huge asset to the web vertical of the team. He‚Äôs been relentless in learning new things and has been writing on Medium too.\nWhen we were organizing the ACM-India Annual event and the team was freaking out over having upwards of 1000 registrations, Dilip wrote a mobile app for us ‚Äî literally overnight ‚Äî which allowed us to send all participants a QR code that they simply had to show to get through physical registration. It saved us a ton of time. You can find out more about Dilip here."
  },
  {
    "objectID": "posts/comms/index.html#tej",
    "href": "posts/comms/index.html#tej",
    "title": "External Communications",
    "section": "Tej",
    "text": "Tej\nTej joined us in the winter of 2016 as a web developer and has been my officemate. Tej is among the first points of contact for all new faculty at IITGN: their institutional profile pages are set up even before they actually set foot on campus. Tej‚Äôs name is synonymous with ‚Äúwebsite‚Äù. If anyone needs one done, whether it‚Äôs for their lab, or an event, he‚Äôs always been an email away. True to an appropriate mispronouciation of his name2, Tej has remarkable turnaround times, and seems to get things done as fast as you can spell them out.\nOne of my most memorable projects with Tej (along with Dilip, Divyangi, and the rest of the team) is the revamp of the main IITGN website. We went from this:\n\n\n\nThe old IITGN website, here.\n\n\nto this:\n\n\n\nThe current IITGN website, here.\n\n\nin about a year. Despite several very well-intended warnings about how crazy this was, the team picked up the project with cautious courage, and pulled it off. I think I can say with some confidence that the IITGN website is easy on the eyes, and things are not hard to find."
  },
  {
    "objectID": "posts/comms/index.html#apeksha",
    "href": "posts/comms/index.html#apeksha",
    "title": "External Communications",
    "section": "Apeksha",
    "text": "Apeksha\nApeksha joined us in the summer of 2019, just on the heels of completing her MTech in Biological Engineering at IITGN, and stayed with the team for a year. At the time of joining, she was an avid consumer of popular science material, and aspired to make the research at IITGN more broady accessible with her writing. She was a freelance writer already, and was looking for an opportunity to spend some time writing full-time. Her stint with us resulted in a number of articles, and her growth during the time has been remarkable. You can find her writing on her Medium blog.\nThe ACM-W India Grad Cohort event we did in 2020 was a virtual one, and in the tradition of Grad Cohorts, was not recorded. I am grateful that Apeksha stepped up at the time, offered to attend all the sessions, and wrote up comprehensive summaries.\nShe has now joined the Ph.D.¬†program in the Humanities and Social Sciences and is currently researching cognitive aspects of science communication with Frederick Coolidge."
  },
  {
    "objectID": "posts/comms/index.html#dhara",
    "href": "posts/comms/index.html#dhara",
    "title": "External Communications",
    "section": "Dhara",
    "text": "Dhara\nDhara joined us in the summer of 2018, and immediately got to work on managing our social media channels. She also streamlined the process of collecting information: a lot of what we do revolves around robust archival, and IITGN being a happening place does not make this easy! We get dozens of emails every day announcing events of varying scales, updates of various kinds.\nAnticipating that the volume would only get worse, we devised a system for manually cataloging every bit of news in a bunch of Airtable bases. The long-term vision was that the Airtable API exposes this data to anyone who needs it: the web team could draw from it and filter appropriately to display upcoming events, an archival team could write a report generating app that used this as the backend, and so forth. We even had a web app developed by a team of undergraduates that pulled data from these bases to show off upcoming events on a big screen.\nDhara now manually curates information from these databases and runs a weekly internal newsletter collating what‚Äôs happened and what‚Äôs coming up at IITGN: this has been a major value addition for many. She also serves up the raw data needed for our public quarterly newsletter and annual reports based on this system, which saves everyone a lot of time. Apart from all of this, she is in the driver‚Äôs seat for all our major social media channels, and then some‚Ä¶ and magically manages to stay on top of everything. You can find her writing on Medium."
  },
  {
    "objectID": "posts/comms/index.html#divyangi",
    "href": "posts/comms/index.html#divyangi",
    "title": "External Communications",
    "section": "Divyangi",
    "text": "Divyangi\nDivyangi joined us in the summer of 2018 and worked with us for three years until the summer of 2021. She was a wizard when it came to scripting for automating tasks, and quickly became the go-to person for departments who were looking to improve their workflows.\nIITGN runs on the Google ecosystem. Divyangi figured out several nice ways of bringing data from spreadsheets to frontends, generating reports, and so forth. She even ran a workshop on Google scripts and related tools as a part of an initiative coordinated by our Staff Development Cell.\nAmong the many projects Divyangi was involved in, one of my favorites was the backend for our rather popular Summer Research Internship Program. The website is powered by WordPress, and provides various interfaces for both interns and mentors to keep track of their applications during the application phase (this runs into tens of thousands of records), and progress during the internship (updates from interns and feedback from mentors are all managed from here). Divyangi, together with Dilip, deeply customized the WordPress instance to provide a number of features that help with running a large-scale program smoothly, with most of the tedious tasks completely automated."
  },
  {
    "objectID": "posts/comms/index.html#chandni",
    "href": "posts/comms/index.html#chandni",
    "title": "External Communications",
    "section": "Chandni",
    "text": "Chandni\nChandni joined us in the summer of 2019 for a year. She was already a very talented photographer at the time of joining us. As our events and activities grew in number and scale, we found very valuable support in Chandni‚Äôs presence. Check out her Instagram here!\n\n\n\nA sample of Chandni‚Äôs photography"
  },
  {
    "objectID": "posts/comms/index.html#vandana",
    "href": "posts/comms/index.html#vandana",
    "title": "External Communications",
    "section": "Vandana",
    "text": "Vandana\nVandana joined us in the summer of 2017 in the role of a Communications and Media Officer for a year. During this time, she was working closely with local press and media, and ensuring that our stories are filed with them on a regular basis.\nVandana was already passionate about writing and had a keen eye for detail. She filled an important void at the time she joined and immediately setup various important foundations in the context of this role. She expanded our style guide, made a press kit, and developed a starting database of journalists that we could work with: these are all tools that the whole content team uses regularly to this day.\nHer spirit of volunteerism meant that a lot of our content got reviewed and improved across the board: on the website, on our brochures, and so forth. This was also the time when we launched what I think is our best-kept secret: IITGN‚Äôs news blog. Vandana, along with the rest of the team, setup a careful pipeline to ensure that everything we capture across press and social media gets a permanent home on the blog. She continues to pitch in remotely, even after moving on from her onsite role with us on campus."
  },
  {
    "objectID": "posts/comms/index.html#shivangi",
    "href": "posts/comms/index.html#shivangi",
    "title": "External Communications",
    "section": "Shivangi",
    "text": "Shivangi\nShivangi joined us in the summer of 2018 in the role of a Communications and Media Officer, picking up from where Vandana left off. She has been synonymous with media and press at IITGN, and is currently our main interface with the press. She has substantially expanded on our network of partners in press, and ensures that we have the visibility we deserve in the local and national news, and even beyond. She is especially diligent about ensuring that regionally-focused news is appropriately translated in the local languages whenever appropriate, a widely appreciated effort.\nShivangi‚Äôs style has been remarkably proactive: if anything at IITGN is newsworthy, she makes sure it‚Äôs covered. She draws on her substantial experience in the field to bring nuanced insights to the table, and these have served us very well in our overall communications and outreach strategy.\nBeyond coordinating stories for the press, Shivangi also comprehensively tracks IITGN‚Äôs presence in the news and other public domains, is closely invovled in the production of the quarterly newsletter and annual reports, and our social media activities as well. Shivangi is, unsurprisingly, an amazing writer, and here‚Äôs a performance of hers in a SDC event that was among my favorites."
  },
  {
    "objectID": "posts/comms/index.html#gaurav",
    "href": "posts/comms/index.html#gaurav",
    "title": "External Communications",
    "section": "Gaurav",
    "text": "Gaurav\nGaurav has been around for longer than I have, and he is a founding member of the team. He is among the most versatile people I know: not only does the scope of his work at IITGN go well beyond communications, even within communications his skills span a very wide range: he‚Äôs behind the camera, he‚Äôs the person behind the design and layouts for some of our best print collaterals, he‚Äôs directed and produced a number of videos, and I could go on and on.\nI‚Äôve freely relied on his mentorship: much of the growth that has happened within the team, especially in terms of creative efforts, is thanks to Gaurav‚Äôs experience and guidance.\nIf you pick up any of our booklets, there‚Äôs a good chance that Gaurav has been involved in engineering the layout and design. Among them, I‚Äôll single out a couple for you to sample: the World Class Faculty brochure looks especially lovely in print, and the 10 on 10 brochure has a bold aesthetic that was a crowd favorite when it was released for our 10-year celebration."
  },
  {
    "objectID": "posts/comms/index.html#devarsh",
    "href": "posts/comms/index.html#devarsh",
    "title": "External Communications",
    "section": "Devarsh",
    "text": "Devarsh\nDevarsh joined us in the summer of 2017, with a background in creative film-making and theatre. He quickly became the go-to person when it came to anything to do with video or photography. Over the years here, he‚Äôs grown leaps and bounds in his craft and understanding of all aspects of the process ‚Äî both work that happens on the field and in post.\nOur YouTube presence was in its nascent stages when Devarsh joined. He‚Äôs single-handedly worked on our channel in mission mode from the get go, and it is largely thanks to his efforts that we have a fairly systematic video respository of most major events and talks on campus.\nDevarsh has been involved in several memorable projects. Here‚Äôs a video that he shot for our first virtual convocation, which also happened to be among the first virtual convocation events to be held in India (as far as we know)."
  },
  {
    "objectID": "posts/comms/index.html#nostalgia",
    "href": "posts/comms/index.html#nostalgia",
    "title": "External Communications",
    "section": "Nostalgia",
    "text": "Nostalgia\nSome of the early members of the team are not pictured. Apart from everyone above, I had the good fortune to have worked with: Ritu (among other things, was the curator for all the early editions of the quarterly newsletter, Connections, and our annual reports), Dayanand (our first communications and media officer), Maria (our first social media intern), and Khushbu (who took over from Maria and preceded Dhara on managing social media).\nIt would be remiss of me to not give a shout out to the faculty support we have enjoyed over the years. Several colleagues have played major roles in helping out on all aspects of our responsbilities. A special thanks to Achal Mehra, who brought extensive experience to the table, and has been forever generous with his time and advice, and Vasco Trigo, whose inputs for the whole team were extremely timely and valuable.\nI‚Äôll also take this opportunity to thank friends at the Communications department at Duke University ‚Äî they hosted us in the very early days, and their detailed and candid tour of various operational aspects was massively helpful in setting up a lot of the foundations back here.\nI walked into this gig more or less by accident. I should confess here that I didn‚Äôt have a 5-year vision from which I could work backwards to nicely chunked milestones. There were no OKRs or KPIs or whatever else the pros do. A few times, it‚Äôs occurred to us that we should have targets, strategies, and systems3. While we never articulated any as far as I can remember, I think we did have a tacitly shared goal: it was to ensure that everyone got what they needed from comms, and that we didn‚Äôt make any mistake twice. My biases notwithstanding, I would say we have largely succeded :)\nMy time with this team remains special forever."
  },
  {
    "objectID": "posts/massren/index.html",
    "href": "posts/massren/index.html",
    "title": "Massren for fast file renaming",
    "section": "",
    "text": "Massren¬†is a command line tool that can be used to rename multiple files using your own text editor. Multiple-rename tools are usually difficult to use from the command line since any regular e xpression needs to be escaped, and each tool uses its own syntax and flavor of regex. The advantage of massren is that you are using the text editor you use every day, and so you can use all the features you are already used to.\n\nSimply navigate to the directory in which your files are and invoke massren. You can easily set it up to use your favorite text editor, so for example, I have mine configured to use VSCode:\nmassren --config editor code\nIf you have a text editor you are comfortable with, then this can lead to all kinds of interesting possibilities, especially when combined with regular expression search.\n\n\n\nUsing Massren, VS Code, and regex for bulk file renaming.\n\n\nThis workflow is especially convenient in combination with an Alfred wokflow to open the current Finder directory in the terminal, such as¬†this one."
  },
  {
    "objectID": "posts/tgif/blue-eyed-islanders-puzzle/index.html",
    "href": "posts/tgif/blue-eyed-islanders-puzzle/index.html",
    "title": "The Blue-Eyed Islanders",
    "section": "",
    "text": "You can read up on a relatively standard version of the puzzle from Terrance Tao‚Äôs blog or here at XKCD.\nAkash proposed a variation where not everyone sees everyone, but people see each other via a graph. What goes on in such a setting? We don‚Äôt quite know!\nThe links have pointers to other variants and the blog also sparked a rather long discussion ‚Äî enjoy thinking about this and looking things up!"
  },
  {
    "objectID": "posts/tgif/estimating-pi/index.html",
    "href": "posts/tgif/estimating-pi/index.html",
    "title": "Estimating Pi",
    "section": "",
    "text": "Take two random numbers X and Y between 0 and 1.\nWhat is the probability that the integer nearest to X/Y is even?\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\n\nFolks, here‚Äôs one way to reason why this probability should be (5 - pi)/4.Even if the math doesn‚Äôt appeal to you, please don‚Äôt miss the key lesson at the end! pic.twitter.com/IDEsQCuRVZ\n\n‚Äî 10-K Diver (@10kdiver) March 15, 2022"
  },
  {
    "objectID": "posts/tgif/hat-puzzles/index.html",
    "href": "posts/tgif/hat-puzzles/index.html",
    "title": "Hat Puzzles",
    "section": "",
    "text": "a bunch of (not necessarily finite (!!!)) people are in a location\nall of them are wearing hats of one of c colors, typically c = 2 (we will assume that hats are either red or blue)\nnobody knows the color of their own hat\nfolks can see the colors of other‚Äôs hats (but not necessarily all of them; this depends on the setting)\neveryone is tasked with determining/guessing the color of their own hat, and failure to get it right (most of the time) will usually lead to unpleasant outcomes\n\nA traditional special case is the following:\n\nThere are n people standing on a line.\nEveryone can see the colors of the hats of everyone ahead of them.\nA strategy for how one‚Äôs own hat color is determined can be coordinated in advance.\nStarting from the person who can see everyone else (and their hats, more importantly), to the person at the end who sees nothing, everyone spells out their guess of the color of their own hat loudly and clearly for everyone else to hear. There is no communication between poeple other than this.\nAll but one person must figure out the color of their hat correctly.\n\n\n\n\n\n\n\nA Strategy for the Finite Case\n\n\n\n\n\nThe first person says ‚Äúred‚Äù if the number of red hats s/he sees is even, and ‚Äúblue‚Äù otherwise. This person may be mistaken about the color of their own hat. However, knowing the rationale for what the first person called out, the second can tally up parities to determine the color of their own hat (e.g, if the first person said red and the second person sees an even number of red hats, they conclude they are wearing a blue hat, otherwise they know they are wearing a read hat; and so on).\n\n\n\nA crazier version is the following:\n\nThere are infinitely many people in a room.\nEveryone can see the colors of the hats of everyone else, but not their own.\nNobody can hear anyone else‚Äôs guess.\nEveryone guesses simultaneously.\nIs there a strategy to ensure that infinitely many guesses are correct?\n[Level Up]: Is there a strategy to ensure that at most finitely many guesses are wrong?\n\nThis is fun to think about, and you‚Äôre probably going to have to invoke something something axiom of choice something something to tackle the situation! Spoiler Alert!"
  },
  {
    "objectID": "posts/tgif/coming-to-agreement/index.html",
    "href": "posts/tgif/coming-to-agreement/index.html",
    "title": "Coming to Agreement",
    "section": "",
    "text": "This is apparently a logic puzzle that comes up in admission interviews at Oxford:\n\n\nAn Oxford University admissions interview question. You are a contestant on a game show, known for having perfectly logical contestants. There is another contestant, whom you've never met, but whom you can count on to be perfectly logical, just as logical as you are.\n\n‚Äî Joel David Hamkins (@JDHamkins) December 26, 2021\n\n\nThis puzzle has since been featured on the Guardian. The full setting is reproduced below from here. The source also has extended discussions about possible solutions ‚Äî you have been warned!\nYou are a contestant on a game show, known for having perfectly logical contestants. There is another contestant, whom you‚Äôve never met, but whom you can count on to be perfectly logical, just as logical as you are.\nThe game is cooperative, so either you will both win or both lose, together. Imagine the stakes are very high‚Äîperhaps life and death. You and your partner are separated from one another, in different rooms. The game proceeds in turns‚Äîround 1, round 2, round 3, as many as desired to implement your strategy.\nOn each round, each contestant may choose either to end the game and announce a color (any color) to the game host or to send a message (any kind of message) to their partner contestant, to be received before the next round. Messages are sent simultaneously, crossing in transit.\nYou win the game if on some round both players opt to end the game and announce a color to the host and furthermore they do so with exactly the same color. That is, you win if you both halt the game on the same round with the same color. lf only one player announces a color, or if both do but the colors don‚Äôt match, then the game is over, but you have lost.\nRound 1 is about to begin. What do you do?\nVariations:\nAlternation variation. In this variation of the puzzle, the contestants alternate in their right to send messages‚Äîonly contestant 1 can send on round 1, then contestant 2 on round 2 and so forth, but still they aim to announce the same color on a round. You are contestant 1‚Äîwhat do you do?\nCollision variation. In this variation, players may opt on each round either to end the game and announce a color, to send a message, or to do nothing. But the new thing is that if both players opt to send a message, then the messages collide and are not delivered, although an error message is generated (so the players know what happened). What do you do?\nPigeon variation. This version is like the alternating turn variation, except that now the contestants are separated at much greater distance, and the messages are sent by carrier pigeon, so neither can be sure that the messages actually arrive. You are contestant 1‚Äîwhat do you do?"
  },
  {
    "objectID": "posts/tgif/deaths-dice/index.html",
    "href": "posts/tgif/deaths-dice/index.html",
    "title": "Death‚Äôs Dice",
    "section": "",
    "text": "I'd like to tell you about a game/puzzle to help celebrate today.We'll call it \"Death's Dice\". (1/9) pic.twitter.com/6lportLU9V\n\n‚Äî Grant Sanderson (@3blue1brown) March 14, 2022\n\n\nA spoiler-free version of the thread above is reproduced below:\nDeath finds you. You plead with him that it‚Äôs too soon, and he agrees to a concession. Every year, he‚Äôll roll a set of dice, and if it turns up snake eyes (both 1‚Äôs) he‚Äôll take your life, otherwise, you get one more year.\nBut it‚Äôs not necessarily a normal pair of dice.\nOn the first year, both ‚Äúdice‚Äù will only have two sides, numbered 1 and 2. So in that first year, there‚Äôs a 25% chance of rolling snake eyes and ending things there.\nOn the second year, he comes with tetrahedral dice, i.e.¬†both are four-sided, numbered 1 through 4, and again only takes your life if he rolls two 1‚Äôs.\nThe next year, the dice are six-sided, after that, eight-sided, etc., etc.\nEach year you have a lower and lower chance of dying, but he‚Äôll come back every year with a new set of dice, never stopping.\nYou might think the question now is something like ‚Äúwhat‚Äôs your expected number of remaining years of life?‚Äù\nBut actually, Death gave you a pretty good deal.\nThe better question to ask here is ‚Äúwhat‚Äôs the probability that you end up immortal?‚Äù That is, the probability that Death rolls infinitely many times, with his ever-growing dice, and never once turns up snake eyes.\n\n\n\n\n\n\nHint\n\n\n\n\n\n\n\n\nAn image that shows a square circumscribed inside a circle."
  },
  {
    "objectID": "posts/tgif/ab-separation/index.html",
    "href": "posts/tgif/ab-separation/index.html",
    "title": "AB Separation",
    "section": "",
    "text": "A probability puzzle involving tournaments and elimination matches:\n\n\nHere‚Äôs a neat probability puzzle ‚Äî somewhat counter-intuitive: pic.twitter.com/QA6jxaIYFT\n\n‚Äî 10-K Diver (@10kdiver) September 23, 2022\n\n\nTo begin with, a clarification: to say that Alex is the best player is to say that Alex will always win a match that he plays; and to say that Bob is the second best player is to say that Bob will win any match that he plays other than one against Alex. The puzzle asks for the probability that Bob emerges the runner up in the tournament. This is indicated in the tweet but the crop seems to hide it.\nSuppose we denote the players \\{a_1,a_2,a_3,a_4,b_1,b_2,b_3,b_4\\}, and say the players are initially matched up like so:\n(a_1,a_2); (a_3,a_4); (b_1,b_2); (b_3,b_4),\nand in particular we have:\n\none of the quarter finals will be between a_p and a_q for p \\in \\{1,2\\} and q \\in \\{3,4\\},\nthe quarter finals will be between b_r and b_s for r \\in \\{1,2\\} and s \\in \\{3,4\\}, and\nthe semi finals will be between an a-player and a b-player.\n\nA moment‚Äôs reflection reveals that for Bob to be a runner up, he should not meet Alex in the quarter-finals or earlier. This happens if and only if:\n\neither Alex is one of the a-players and Bob is one of the b-players, or\nBob is one of the a-players and Alex is one of the b-players.\n\nFrom here it is a counting argument. I was distracted by some idea of symmetry and originally jumped to the conclusion that the answer is one-half. Spoiler alert: I quickly learned that it‚Äôs not!"
  },
  {
    "objectID": "posts/tgif/turn-the-led-on/index.html",
    "href": "posts/tgif/turn-the-led-on/index.html",
    "title": "Turn the LED on",
    "section": "",
    "text": "Another fun probability puzzle:\n\n\nEach switch has a 50/50 chance of being ON or OFF.The switches are all independent of each other.What‚Äôs the probability that the LED is on? pic.twitter.com/idQnJRqFnL\n\n‚Äî 10-K Diver (@10kdiver) March 25, 2022"
  },
  {
    "objectID": "posts/tgif/conways-checkers/index.html",
    "href": "posts/tgif/conways-checkers/index.html",
    "title": "Conway‚Äôs Checkers",
    "section": "",
    "text": "Suppose you take the infinite square lattice and put solitaire pieces on all points (x,y) that lie on or below the x-axis. Using solitaire moves, can you reach a position where the point (0,5) is occupied?\nNote: A solitaire move consists in a piece jumping over a neighbouring piece to a vacant square and removing (or ‚Äútaking‚Äù) the neighbouring piece.\nYou can attempt this challenge interactively here.\nHint: if you can‚Äôt get there, don‚Äôt feel too bad about it.\n\n\n\n\n\n\nSpoilers\n\n\n\n\n\nAn introduction to the problem featuring Zvezdelina Stankova:\n\n\nA description of the original proof based on coming up with an invariant involving the golden ratio:\n\n\nA description of the original proof based on coming up with an invariant involving the golden ratio, but in this case in real-time, while thinking out loud:\n\n\nA description of a more recent proof based on a rather clever and beautiful use of Fibonacci numbers:\n\n\nAnd by the way, if you are really keen on reaching row 5 here‚Äôs how you can do it with infinitely many moves!"
  },
  {
    "objectID": "posts/tgif/4-person-gift-exchange/index.html",
    "href": "posts/tgif/4-person-gift-exchange/index.html",
    "title": "4 Person Gift Exchange",
    "section": "",
    "text": "First the warm-up edition.\n\n\nHere's a beautiful probability puzzle inspired by Professor Henk Tijms (@Hendrikc44).See if you can solve it. The answer may surprise you!(I'll post a solution tomorrow.) pic.twitter.com/m1c8u0J5MN\n\n‚Äî 10-K Diver (@10kdiver) March 23, 2022\n\n\nNow for the harder version.\n\n\n\n\n\n\n\n\n\n\nA number of people will exchange gifts at a holiday party. Each person brings a gift to the party and attaches a label with a unique number to this gift. These numbers are also put on cards, which are deposited in a box and shuffled. Each person at the party then sequentially draws a card from the box, and receives the gift whose label corresponds to the number on the card drawn. If the number corresponds to his or her own gift, the card is returned to the box and the person draws another card. Of course, it is not possible for the last person to draw a second card.\nWhat is the probability that the last person is left with the card corresponding to his or her own present? In the simple case of two people, the probability is zero. The problem is also easy to solve in the case of three people, using a chance tree. It is no restriction to imagine that the persons are numbered as 1, 2 and 3 like the labels of their presents, and that they draw a card in this order. Then person 1 gets either the present with label 2 or the present with label 3, each with a probability of 1/2. If person 1 gets the present with label 3, then the conditional probability of the last person 3 to get his or her own present is zero. If person 1 gets the present with label 2, then the cards with labels 1 and 3 are left and person 2 draws the card with label 1 with probability of 1/2, in which case the last person 3 is left with the card of his or her own present. Therefore the probability that the last person will be left with the card of his or her own present is ¬Ω √ó 0 + ¬Ω √ó ¬Ω = ¬º.\nThe challenges for this week are these: What is the probability that the card left for the last person corresponds to his or her own present when there are four people at the party? What is the probability when there are five people at the party?\n\n\nSource NB. may be paywalled"
  },
  {
    "objectID": "posts/tgif/folding-stamps/index.html",
    "href": "posts/tgif/folding-stamps/index.html",
    "title": "Folding Stamps",
    "section": "",
    "text": "The following is perhaps best attempted with a physical prop.\n\n\nYesterday's puzzles seem to be a hit, so here's another one, due to Henry Dudeny. Fold the paper so the squares end up in numerical order (1 on top, 8 on bottom, sequential in between, not necessarily \"face up\" in the stack, as shown). The first one is easier than the second. pic.twitter.com/oRGXl90mKp\n\n‚Äî Dave Richeson (@divbyzero) October 5, 2022\n\n\n\n\n\n\n\n\nHere‚Äôs a bit from the original source:\n\n\n\n\n\n\n\n\nScreenshot of a text containing the original problem"
  },
  {
    "objectID": "posts/tgif/making-grids/index.html",
    "href": "posts/tgif/making-grids/index.html",
    "title": "Making Grids",
    "section": "",
    "text": "This is a tiling puzzle:\n\n\nA tiling problem with wireframes. [Source: Micheal Brand]. #exportober pic.twitter.com/vhhoc0OB9C\n\n‚Äî Algorithmic Puzzles (@algopuzzles) October 7, 2022\n\n\nThe lines cannot overlay, I imagine. Here‚Äôs a valid looking 2 x 2:\n\n\n\nA 2 x 2 grid made from the given wireframe.\n\n\nMore soon on this as the story develops!"
  },
  {
    "objectID": "posts/tgif/coin-tossing/index.html",
    "href": "posts/tgif/coin-tossing/index.html",
    "title": "Coin Tossing",
    "section": "",
    "text": "Suppose you were to keep flipping a coin until it landed either HTHHT or HHHHH on five consecutive flips. Which of these two sequences would you predict would occur first?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSee here. Also, a shorter sequence (HTT vs HTH) but with a similar element of surprise is explained also in this TED Talk:"
  },
  {
    "objectID": "posts/tgif/find-the-puppy/index.html",
    "href": "posts/tgif/find-the-puppy/index.html",
    "title": "Find The Puppy",
    "section": "",
    "text": "There are 5 boxes with lids kept in a row.\n[] [] [] [] []\nLet‚Äôs call them B[1‚Ä¶5].\nThere is a puppy P inside one of these boxes.\nOur goal is to find the puppy.\n[?] [?] [?] [?] [?]\nEvery morning you get a chance to open any one of the boxes. If you find the puppy: great, congrats!\nIf you don‚Äôt, tough luck, you have to wait again for the next day. Meanwhile, during the night, the Puppy will move to one of the neighbouring boxes.(can‚Äôt stay in same box). Eg:\n[] [P] [] [] [] -> [P] [] [] [] [] or [] [] [P] [] [].\n\nDoes there exist protocols (ways of opening boxes) in which I can guarantee that I can catch the puppy in a finite time?\nIf yes, what is the smallest number of days I have to wait to catch the puppy (Which is the best protocol?)\nHow does this protocol work?\n\n\n\n\n\n\n\nSpoilers: based on our discussion in the second TGIF meetup.\n\n\n\n\n\nHere‚Äôs a strategy that uses seven days (h/t: Harshil).\nMorning 1: Open Box 2. If it contains P, we are done. Otherwise, P is in one of Box 1,3,4 or 5.\nMorning 2: Open Box 2. If it contains P, we are done. Otherwise, P is in one of Box 3,4 or 5.\nMorning 3: Open Box 3. If it contains P, we are done. Otherwise, P is in one of Box 2,4 or 5.\nMorning 4: Open Box 4. If it contains P, we are done. Otherwise, P is in one of Box 1,3 or 5.\nMorning 5: Open Box 4. If it contains P, we are done. Otherwise, P is in Box 2.\nMorning 6: Open Box 3. If it contains P, we are done. Otherwise, P is in Box 1.\nMorning 7: Open Box 2. It definitely contains P.\n\nHere‚Äôs a strategy that uses six days (h/t: Debanuj):\nFirst Observation: The puppy P alternates between odd and even boxes\nSecond Observation: The puppy P only has one possible choice to go to, if it is in Box 1 or Box n\nLet us assume that P is in an even box i.e.¬†B[2] or B[4] on the first morning.\nMorning 1: Check B[2], if you find P, done. Otherwise, according to the assumption, P is in B[4]\nNight 1: P moves to B[3] or B[5]\nMorning 2: Check B[3], if you find P, done. Otherwise P is in B[5] according to initial assumption.\nNight 2: P moves to B[4], no other choice.\nMorning 3: Check B[4]. If assumption was true, then P must be in B[4]. If you find P, done. If you don‚Äôt find P, that means initial assumption was false.\nThus on morning 1, P was in an odd box ‚áí on morning3 (today), P is again in an odd box. Which means tomorrow (morning 4), P must be in an even box.\nNight 3: P moves to B[2] or B[4]\nMorning 4: Now our assumption holds true that P is in an even box, and now you can repeat the procedure we followed on mornings 1,2,3 again on mornings 4,5,6 and we are guaranteed to catch P.\n\n\n\nUnresolved questions:\n\nCan we do this in five days? Or can we show that it‚Äôs impossible to come up with a protocol that uses only five days?\nWhat about six boxes? Or seven? Or n?\nIf the moves are equiprobable and the initial choice is uniformly random, what is the expected number of moves executed by either of the strategies above?\nHow much faster can we do this if we are allowed to open two boxes at once?\nQuestion from Bireswar: If the puppy is allowed to stay put, then there‚Äôs no protocol to find the puppy even in the trivial setting with two boxes. What if we are allowed to open more than one box? How many more boxes do we need to be able to open per day to catch a potentially non-moving puppy amongst five boxes?"
  },
  {
    "objectID": "posts/tgif/square-in-bag/index.html",
    "href": "posts/tgif/square-in-bag/index.html",
    "title": "Iwahiro‚Äôs Square in Bag Puzzle",
    "section": "",
    "text": "Here‚Äôs a very fun packing puzzle.\n\n\nOne of my all-time favorite puzzles: Iwahiro's \"Square in a Bag\" puzzle. Put a square piece of paper (14 cm x 14 cm) completely inside a bag (20 cm x 11 cm) without folding, cutting, or rolling up the paper; it should end up lying completely flat. pic.twitter.com/nGv2TwR8Wp\n\n‚Äî Dave Richeson (@divbyzero) October 4, 2022\n\n\nWhen we discussed this in the meetup, it was a little hard to describe what‚Äôs allowed and what‚Äôs not with the bag. Another thing that was important to emphasize is the side of the bag that is open: I am not sure this is even possible if the bag is sealed on both the long sides and only the short side is the one that is open.\nA quick sanity check with respect to surface areas reassures us of the potential feasibility of the task: the total surface area of the square is indeed smaller than the surface area of the bag. So if you imagine cutting the bag along the short sides, and using it as a gift wrap to cover up the square, that‚Äôs very much doable.\nThe other hint was the fact that the length of the diagonal of the square is less than the length of the longer side of the bag. This prompts us to line up the square so that it‚Äôs opposite corners align with the long and open edge of the bag.\n\n\n\n\n\n\nSpoiler Alert\n\n\n\n\n\nThe solution does indeed involve starting here and squishing the bag gradually so that it engulfs the square. Here‚Äôs a nice video demonstration:\n\n\n\n\n\nWe did wonder about formalizing the question and the process above a little more, but we were not able to come up with any appropriate language. At least as an activity-based puzzle I think the instructions are quite clear:\n\n\nAh. The bag can stretch and fold as much as any ordinary kitchen bag can. And for that matter, the paper can warp and bend as you'd expect it would. But in the end everything will end up flat on the tabletop.\n\n‚Äî Dave Richeson (@divbyzero) October 7, 2022\n\n\nIt would be nice to be come up with a procedure that, given the dimensions of the square and the bag, can determine if the square can in fact be accommodated in the bag playing by the rules here. Already here, it was pointed out later that it would have worked with a slightly smaller bag too, and at least for the purpose of getting to this particular solution, all that matters is the proportions of the side lengths.\nIt might also be interesting to think about what happens with other combinations of shapes."
  },
  {
    "objectID": "posts/tgif/lighting-up-a-grid/index.html",
    "href": "posts/tgif/lighting-up-a-grid/index.html",
    "title": "Lighting Up a Grid",
    "section": "",
    "text": "Here‚Äôs the puzzle:\n\n\nOn an nxn grid a few nodes are set on fire at t=0. The fire spreads like this: if at least two neighboring nodes of node x are lit, then node x will also catch fire in the next time step. What's the minimum number of nodes that have to be lit to burn the entire grid?#exportober\n\n‚Äî Algorithmic Puzzles (@algopuzzles) October 18, 2021\n\n\n\n\n\n\n\n\nHere‚Äôs an argument for the lower bound by Harshil Mittal.\n\n\n\n\n\nConsider an arbitrary but fixed solution. Let p denote the number of nodes that are lit up at time 0. Let T denote the time taken to lit the entire grid. WLOG, assume that for each 1 \\leq t \\leq T, exactly one new node is lit up at time t.\nAt any time 0 \\leq t \\leq T,\n\nFor every lit node (i,j), let f(i,j,t) denote the number of edges of the node (i,j) that are not shared with another lit node.\nLet g(t) denote the sum of f(i,j,t) over all lit nodes (i,j)\n\nWe show that g(t+1) \\leq g(t) for all 0 \\leq t \\leq T-1.\nLet 0 \\leq t \\leq T-1. Let (u,v) denote the new node which is lit up at time t+1. Let X denote the set of all lit neighbors of (u,v) at time t. For every node (i,j) in X, we have f(i,j,t+1) = f(i,j,t) - 1. Also, note that f(u,v,t+1) = 4-|X|. Therefore, g(t+1) = g(t) - |X| + (4-|X|) = g(t) + 4-2|X|. So, as |X| \\geq 2, we get g(t+1) \\leq g(t).\nNow, we have 4n = g(T) \\leq g(0) \\leq 4p. Thus, n \\leq p, as desired."
  },
  {
    "objectID": "posts/dsanotes/introduction/index.html",
    "href": "posts/dsanotes/introduction/index.html",
    "title": "Data Structures and Structured Data",
    "section": "",
    "text": "Link to Slides"
  },
  {
    "objectID": "posts/dsanotes/introduction/index.html#wdym-data-structures",
    "href": "posts/dsanotes/introduction/index.html#wdym-data-structures",
    "title": "Data Structures and Structured Data",
    "section": "WDYM, data structures?",
    "text": "WDYM, data structures?\nWe will keep it casual and skip formal definitions for now. üëÄ\nData structures give us principled ways to stow away information. It‚Äôs important to do this nicely based on what you want to do with the information.\nFor example, the notes you might be taking in this class is information. If you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!\nHowever, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don‚Äôt have to be neat, and it‚Äôs enough for them to be useful.\nOn the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.\n\n\n\n\n\n\nThroughout this course, we will try to make sense of trade-offs.\n\n\n\nWe‚Äôll equip ourselves with ideas that will ultimately help you decide questions like: how do you organise the clothes in your cupboard?\n\n\n\n\n\n\n\n\n\nThrow ‚Äôem in, nobody‚Äôs looking\nKeep it where you can find it later\n\n\n\n\nTime to process\nNegligible\nForever\n\n\nTime to retrieve\nForever\nNegligible\n\n\n\nTable 1. No free lunches.\n\n\n\n\n\n\n\n\nThis is in fact a useful framing!\n\n\n\n\n\n\n\n\nTable 1 Revisited. No Free Lunches"
  },
  {
    "objectID": "posts/dsanotes/introduction/index.html#representing-polynomials",
    "href": "posts/dsanotes/introduction/index.html#representing-polynomials",
    "title": "Data Structures and Structured Data",
    "section": "Representing Polynomials",
    "text": "Representing Polynomials\nLet‚Äôs say that you are spending a fine evening watching the #LockdownMath playlist from 3blue1brown. The first episode happens to be all about solving quadratics:\n\n\n\nA screenshot from #LockdownMath showing Grant Sanderson solving quadratics.\n\n\nNow, it‚Äôs quite natural to want to ‚Äúwrite a program‚Äù, so to speak, that can take a quadratic equation such as x^2 - 7x + 12 as input and output its two roots.\nGiven that programs running on your phone are able to make suggestions, even if dubious, for what series to binge-watch next on Netflix, finding roots of quadratics should be a fairly benign exercise.\nYou might recall that most programs let you declare variables that can hold on to specific types of information, for instance: numbers, strings, and so forth. Our input doesn‚Äôt ‚Äúlook‚Äù like a number, so it would be a fair take to simply store it as a string:\npx = \"x^2 - 7x + 12\";\n\n\n\n\n\n\nNow‚Ä¶\n\n\n\n\n\n\n\n\n\nWhile this is a perfectly faithful representation, you can imagine that it would be slightly painful to work with. You would have to write some code that can ‚Äúpull out‚Äù the parts of the string that represent the numbers you care about (in this example, b = -7 and c = 12), so that you can move on to your calculation, which is an expression involving numbers.\nGiven that a quadratic with the leading coefficient normalized to one is uniquely determined by two numbers, it seems a lot simpler to directly represent the polynomial as two integers instead:\npx_b = -7\npx_c = 12\nYou might appreciate that this saves us quite some circus and we can quite directly get to the computation we‚Äôre interested in. What if you cared about higher order polynomials? You may want to solve them (even if you run out of expressions for solutions pretty quickly, you might be interested in other ways of getting to the roots), or manipulate them in other ways (for example, by adding or multiplying them).\n\n\n\n\n\n\nFood for thought.\n\n\n\nHow would you represent higher-order polynomials? What about multivariate polynomials? Is there a way that you might be able to capture an algebraic expression for a polynomial without either using strings or just the coefficients?"
  },
  {
    "objectID": "posts/dsanotes/introduction/index.html#representing-a-game---i",
    "href": "posts/dsanotes/introduction/index.html#representing-a-game---i",
    "title": "Data Structures and Structured Data",
    "section": "Representing a Game - I",
    "text": "Representing a Game - I\nThe game of 100 goes like this: I pick a number between 1 and 10, and then you pick one within the next ten numbers, and on and on. The first person to reach 100 wins.\n\n\n\n\n\n\nRecall from class and/or figure out that‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\nSPOILER ALERT\n\n\n\n\n\n...whoever starts has a way of winning the game:\n\n    0. To begin with, I say 1.\n    1. No matter what number you pick, I can say 12.\n    2. No matter what number you pick, I can say 23.\n    3. No matter what number you pick, I can say 34.\n    4. No matter what number you pick, I can say 45.\n    5. No matter what number you pick, I can say 56.\n    6. No matter what number you pick, I can say 67.\n    7. No matter what number you pick, I can say 78.\n    8. No matter what number you pick, I can say 89.\n    9. No matter what number you pick, I can say 100.\n\n\n\n\n\n\nWhat if you want to write a program that mimics the winning strategy?\nNote that this game can go on for at most a 100 steps, and in fact exactly 20 steps (or ten rounds) when you employ said winning strategy. So one way to go about this is to declare 20 variables to track the 20 numbers exchanged between the players. But a moment‚Äôs reflection may reveal that you don‚Äôt need to store anything at all.\n\n\n\n\n\n\nExercise\n\n\n\nCan you write a program that makes the first move, prompts the user for their moves on their turn, uses the winning strategy discussed above, and uses no variables for explicit storage?"
  },
  {
    "objectID": "posts/dsanotes/introduction/index.html#representing-a-game---ii",
    "href": "posts/dsanotes/introduction/index.html#representing-a-game---ii",
    "title": "Data Structures and Structured Data",
    "section": "Representing a Game - II",
    "text": "Representing a Game - II\nIf you missed the first class you haven‚Äôt played the Game of Trust, you are welcome to take a break and experience it now. Let‚Äôs recollect the setup:\n\n\n\n\n\nIllustration from an implementation by Nicky Case.\n\n\nSuppose you want to implement your own version of this game, where the program responds to inputs from the user and plays according to a specific, pre-meditated strategy. Remember you have seen some strategies already:\n\n\n\n\n\nA second illustration from the same implementation by Nicky Case.\n\n\nWe reproduce these strategies below:\n\n\n\n\n\n\nPlayer Strategies\n\n\n\n\nCOPYCAT: Hello! I start with Cooperate, and afterwards, I just copy whatever you did in the last round. Meow.\nALWAYS CHEAT: The strong shall eat the weak.\nALWAYS COOPERATE: Let‚Äôs be best friends <3\nGRUDGER: Listen, pardner. I‚Äôll start cooperatin‚Äô, and keep cooperatin‚Äô, but if y‚Äôall ever cheat me, I‚ÄôLL CHEAT YOU BACK TIL THE END OF TARNATION.\nDETECTIVE: First: I analyze you. start: Cooperate, Cheat, Cooperate, Cooperate. If you cheat back, I‚Äôll act like Copycat. If you never cheat back, I‚Äôll act like Always Cheat, to exploit you. Elementary, my dear Watson.\n\n\n\nLet‚Äôs say that your program is designed to play 5 rounds and that your program is playing the copycat strategy. To begin with, you might want to declare a couple of variables to keep track of the scores of the players, and ten variables to track the moves of both players in each round. With this, your code may start out looking like this:\nmy_points = 0\nuser_points = 0\n\nuser_move_1 = input(\"Input 1 for Cooperate and 0 for Cheat.\")\n\n//Sanity check input:\nif(user_move_1 != 1 and user_move_1 != 0):\n    express disappointment and abort\n// My first move is to cooperate:\nmy_points += -1\nuser_points += 3\n\nif(user_move_1):\n    my_points += 3\n    user_points -= 1\nNow your next move is determined by the value of user_move_1, so you might proceed as follows.\nuser_move_2 = input(\"Input 1 for Cooperate and 0 for Cheat.\")\n\n//Sanity check input:\nif(user_move_2 != 1 and user_move_2 != 0):\n    express disappointment and abort\n// My next move is based on the user's first:\nif(user_move_1):\n    my_points += -1\n    user_points += 3\n\nif(user_move_2):\n    my_points += 3\n    user_points -= 1\n‚Ä¶and so on and on, you get the drift.\n\n\n\n\n\n\nFood for thought.\n\n\n\nDo you really need ten variables to track the game? If you were instead implementing the always cheat or always cooperate strategy, how many variables would you need? What about the strategies of the grudger and the detective?\n\n\nNow, suppose we come up with our own player, whom we call the majority mover. This player looks at your entire game history, and cooperates if you have cooperated more than you have cheated, and cheats if you have cheated more than you have cooperated, and acts randomly otherwise.\nIt seems like implementing the majority mover strategy would really require keeping track of everything. Or would it? You might observe at this point that it‚Äôs enough to keep track of two counts: the number of rounds and the number of moves where the user has cheated: note that it does not matter when the cheats happened in the history of the game.\n\n\n\n\n\n\nYou could also‚Ä¶\n\n\n\n\n\n‚Ä¶track the number of cooperate moves along with the number of rounds; or the number of cheat moves and the number of cooperate moves.\nAt this point it‚Äôs a matter of taste :)\n\n\n\nHow about a completely random player? This one chooses a number K between 1 and N uniformly at random (let‚Äôs not worry about how this is done for now, because that would be a story for another day), where N is the number of rounds played so far; and mimics the other player‚Äôs Kth move. To implement this strategy, you really would need to keep track of the user‚Äôs entire game history with the five variables, and also assume that you have a way of picking a number at random.\nFinally, consider that instead of fixing your program to play five rounds ‚Äî ü•± ‚Äî you want to politely ask the user how many rounds they want to play.\n\n\n\n\n\n\nAfter all‚Ä¶\n\n\n\n\n\n\n\n\n\nWell, for the first few players, this is just a matter of upgrading your for loop (which you should have switched to already when you realised that you don‚Äôt need all. those. variables.) to use N: and you are done.\n\n\n\n\n\n\nFood for thought.\n\n\n\nHow will you implement this version if you are working with our latest player? If you happen to have a very enthusiastic user who asks for half a million rounds, would you be able to declare that many variables all at once, while your program is running? Notably, you don‚Äôt know what the user is going to say ahead of time!"
  },
  {
    "objectID": "posts/dsanotes/introduction/index.html#representing-a-subset-of-a-deck-of-cards",
    "href": "posts/dsanotes/introduction/index.html#representing-a-subset-of-a-deck-of-cards",
    "title": "Data Structures and Structured Data",
    "section": "Representing a subset of a deck of cards",
    "text": "Representing a subset of a deck of cards\nIf you are implementing a card1 game, you might need a mechanism for keeping track of ‚Äúhands‚Äù, or various subsets of cards. Let‚Äôs say a hand is a subset of cards. For many games, you would need the ability to be able to quickly:\n\ntell if a particular card belongs to a hand or not,\nadd a card to a hand,\nremove a card from a hand, and\nreplace a card in a hand with another one.\n\nOne way to meet these requirements is to declare a collection of 52 boolean (i.e, true/false or 0/1) variables to represent the hand: the cards in the hand are set to true while cards that don‚Äôt belong are set to false.\n\n\n\n\n\n\nFood for thought.\n\n\n\nWhat do you like about this method? What don‚Äôt you like about it?\n\n\nHere‚Äôa another way, though: you could agree on a notation for the cards in the deck: e.g, a standard one is to use a number, A/J/Q/K to denote the value, and S/C/D/H to denote the suit, so every card can be represented as a pair of characters. For example the Ace of Diamonds would be AD, the five of spades would be 5S and the King of Hearts would be KH. With this in place, you could represent a hand also by simply concatenating these string representations of the cards in the hand.\n\n\n\n\n\n\nFood for thought.\n\n\n\nWhat do you like about this method? What don‚Äôt you like about it?\n\n\nNow for this toy example, if you were to implement both methods and clock the time taken to implement the four operations above, you may not notice a major difference. However, for actual applications, you may be in a situation where your subsets (here, the ‚Äúhands‚Äù) may be coming from a large universe (here, the ‚Äúdeck‚Äù). On the other hand, you may have a very large number of operations to take care of efficiently.\n\n\n\n\n\n\nFood for thought.\n\n\n\nAre there other ways that you might want to store this kind of information, given the things you want to do are as enlisted above?\n\n\nYour choice of method will again be driven by the requirements: the one thing to keep in mind is that you cannot have it all, but we can usually get pretty damn close!"
  },
  {
    "objectID": "posts/dsanotes/debruijn/index.html",
    "href": "posts/dsanotes/debruijn/index.html",
    "title": "On Cards and Graphs",
    "section": "",
    "text": "Link to slides\nLink to a Tweet thread summarizing these notes\nBefore we talk about exploring graphs, we will take a small detour to throw in some motivation. In our discussion here we will establish that knowing how to go around a graph can meaningfully help us pull off a spectacular card trick. I trust that this should leave us sufficiently interested in finding out how we can actually find those Euler tours, which is our next stop.\n\n\n\nA deck with 32 cards is given to someone in the audience.\nAny number of cut shuffles1 are done.\nOnce the audience is satisfied that the deck is suitably shuffled, it is passed to someone, say P, from where the following happens:\nP takes the top card and passes the deck to the next person (Q).\nQ takes the top card and passes the deck to the next person (R).\nR takes the top card and passes the deck to the next person (S).\nS takes the top card and passes the deck to the next person (T).\nAll five people look at their cards without revealing them to anyone else.\nThose who got red cards are requested to stand up.\nAll cards are identified.\n\n1¬†A cut shuffle involves taking some number of cards from the top of the deck, placing them on the table, and then placing the rest of the deck on top of them. So if the stack has cards 1,2,3,4,5 from bottom to top, then it will look like 4,5,1,2,3 after a cut shuffle with two cards shaved off the top.\n\n\nInterpreting reds as 1‚Äôs and blacks as 0‚Äôs, any sequence of five cards is a signal: a bitstring of length 5. This is ‚Äî at least in principle ‚Äî enough to ID one of the cards in a 32-card deck, for sure. But to ID the next five cards too? Wow!\nSo to begin with, let‚Äôs just focus on ID-ing card. The deck, of course, is setup: the cards appear in a specific order, one whose relevant properties are unperturbed by cut shuffles. Note that we have no control over how many times the deck is cut, so the top card could be effectively anywhere in from the original sequence. So what we need is a sequence of 32 bits:\nb_0, b_1, \\ldots, b_i, \\ldots, b_{31}\nwith the following property. For any i \\in \\{0,\\ldots,31\\}, if B_i denotes2 the substring:2¬†subscripts are mod 32\nb_{i}, b_{i+1}, b_{i+2}, b_{i+3}, b_{i+4},\nthen we would very much like that b_i \\neq b_j whenever i \\neq j. This ensures that no matter how many times the deck is cut, when the members of the audience with the red cards stand up, we have a clean and unambiguous signal, which we can pre-relate by our powers of rote memory to the card at position i in said sequence. Because subscripts are read mod 32, note that this is really all we need. For example, here‚Äôs a seuquence that does happen to have the property we are after:\n\n00000100101100111110001101110101\n\nThe diagram below shows why cut shuffles still result in sequences where the signal from any location continues to be unique, and in some sense, invariant across shuffles: suppose a position x corresponds to a certain signal S_x before a cut shuffle, then after a cut shuffle, if position x shifts to y, then S_y = S_x. Note that this would not be true if someone, say, enthusiastically riffle shuffled the pack ‚Äî so do make sure to prevent this at all cost.\n\n\n\nExamples of cut shuffles and why they don‚Äôt affect the addressing technique. The first column shows the original sequence, the second shows the proposed cut, and the last shows the final sequence after the cut shuffle is excecuted.\n\n\nThis property makes the sequence a robust device for card discovery: we simply associate a specific card with every 5-length bit string, and position the card corresponding to b_i at location i. By knowing the signature corresponding to the top five cards after any number of cut shuffles, you know where this signal appeared in the original sequence, and by turdging further along in the sequence, you also know the signals for the next five cards.\n\n\n\n\n\n\nYou perhaps see now how you can perform the entire trick:\n\n\n\n\nmemorize the sequence 00000100101100111110001101110101\nassociate‚Ä† a card with each bit-string of length 5\nmemorize said association\nplace cards as dictated by the sequence and given by the association\nprofit and/or impress\n\n‚Ä† Note that the association has to respect the semantics of the bitstring: so the 1-positions get red cards and the 0-positions get black (or the other way round if you please, so long as you are consistent in your conventions throughout).\n\n\nNotice that once you can read off one card, having committed the seuqence and the association to memory, you can also read off any of the cards after that. This does seem like a lot of memorizing, but it‚Äôs worth it for the impact.\n\n\n\nIf you want to make your life easier, you could use an association that is easy to remember:\n\n\n\nA useful dictionary between 5-bit strings and cards from a standard deck of cards\n\n\nSo getting to the first card is quite straightforward already:\n\nIf the first person is seated, they have a black card, and otherwise they have a red card. But this is immediate anyway from the convention, so not particularly impressive to point out.\n\nWhen the card is black: if the second person is seated, it is a ‚ô£, otherwise a ‚ô†.\nWhen the card is red: if the second person is seated, it is a ‚¨•, otherwise a ‚ô•.\n\nFinally, the value of the card is just translating the last three bits to their value in decimal (remembering to map all zeroes to eight).\n\nIf you want to really impress with the next four, you could just memorize the whole sequence, but to avoid visible murmuring, you can also exploit a handy feature of this particular sequence that helps you navigate it with only a little bit of mental math.\nIt turns out that if you know b_i (which you do based on who stands up), you can obtain the next bit (i.e, the sixth bit relative to the start of b_i) in the sequence by simply adding the first and third bits from b_i. In other words, the sequence has the following nice pattern: standing anywhere, you can obtain the next bit by taking the sum (mod 2) of the bits that are three and five bits behind wherever you are standing. Go on, verify this for yourself!33¬†If you do, you‚Äôll find this is not quite true at the fourth and fifth positions. The claimactually works if you drop any one of the leading 0‚Äôs, e.g.¬†the first one. This gives you a sequence of 31 cards to work with which have this nice pattern. If you want to be a purist, though, you can commit this exception to memory.\n\n\n\nSo how does this lovely self-working card-trick fit, even if as a detour, into our discussion about graphs?\nLet‚Äôs step back for a bit. We pulled out the driver of this whole setup, the sequence:\n\n00000100101100111110001101110101\n\nmuch like a real magician pulls out a real rabbit from a real hat. You very likely raised an eyebrow and wondered about where this sequence came from. It‚Äôs a useful exercise to experiment with coming up with one, even if by means of ad-hoc scribbling. As a warmup, it‚Äôs worth trying to find one of length eight, where every 3-bit string occurs exactly once4.4¬†Apparently the Sanskrit sutra yam√§t√§rajabh√§nasalagam (and variants thereof), which describes all possible triplets of short and long syllables, is considered evidence that such sequences were known in India from a while ago. Sanskrit meters are based on the system of short (laghu) and long (guru) syllables, and you might count this as a hint for the exercise here. If you are curious about the history of the sutra, look no further than this article.\nIt turns out that such sequences are in fact rather well-studied, and one way of generating them involves taking a walk in an appropriate graph! In particular, let us go back to our original task of generating a 32-bit sequence like the one shown above, except that we are on our own this time. Consider a graph where we have:\n\na vertex for every bit string of length four, and let us say that the bit string associated with a vertex u is denoted by b_u; and\nan edge from u to v if the corresponding bit strings are all but the same: i.e, the 3-length suffix of u is the same as the 3-length prefix of v.\n\n\n\n\n\n\n\nIf you want to take a look at the graph, it‚Äôs right here‚Ä¶\n\n\n\n\n\n‚Ä¶although a bit of a monstrosity!\n\n\n\nThe de Bruijn graph of order 4\n\n\n\n\n\nThe following properties are worth thinking about:\n\n\n\n\n\n\nthe total number of vertices is _____\n\n\n\n\n\nOne for every bit string of length four, so sixteen.\n\n\n\n\n\n\n\n\n\nevery vertex has indegree and outdegree _____\n\n\n\n\n\nFix a vertex v and let s_v denote the last three bits of v. The only outgoing edges are to vertices that represent the bit strings s_v0 and s_v1.\nFix a vertex v and let p_v denote the first three bits of v. The only incoming edges are from vertices that represent the bit strings 0p_v and 1p_v.\n\n\n\n\n\n\n\n\n\nthe total number of edges is _____\n\n\n\n\n\nThere are sixteen vertices and each of them has outdegree two, so the total number of edges is 32. Does that ring a bell yet?\n\n\n\n\n\n\n\n\n\nthere are exactly _____ self-loops\n\n\n\n\n\nConsider a vertex v. Let the bit string associated with v be denoted by WXYZ. For v to be adjacent to itself, we will need XYZ = WXY, which implies that W = X, X = Y, Y = Z.\nSo if W = 1, then we have that WXYZ = 1111 and if W = 0 then we have WXYZ = 0000.\nThese are the only two possible scenarios, so our graph has exactly two self-loops.\n\n\n\nIf you were to take an Euler tour in this graph, i.e, walk around visiting every edge exactly once, then it very naturally spells out a sequence as follows. Start with an empty string. Now as you move around, going from the vertex u to v along the edge (u,v) amounts to essentially ‚Äúseeing one new bit‚Äù: recall that the suffix of u almost fully eats up the prefix of v, leaving one new bit to observe, which is what we tag on to our sequence. Once you have traveled along every edge exactly once, you‚Äôve collected exactly 32 bits, so we have written out a sequence of length 32 by the time we are done5.5¬†If edges were 1km roads, we would have been just 10km shy of a full marathon.\nNow: our somewhat outrageous claim is that this infact is a valid de Bruijn sequence! Given that we have written out exactly 32 bits, it is enough to show that any bit sequence of length 5 shows up as a substring in this sequence starting from some position. The main intuition here is the following: suppose you want to ‚Äúsee‚Äù the bitstring PQRST in your sequence. Well, at some point in our walk on the graph, we moved from the vertex representing PQRS to the one representing QRST6. This made us add T to whatever sequence we had so far. Let‚Äôs rewind our walk a bit and see what happened in the last few steps too:6¬†Indeed, this must have happened at some point, since we visit every edge exactly once.\nLMNO ‚Üí MNOP ‚Üí NOPQ ‚Üí OPQR ‚Üí PQRS ‚Üí QRST\nRetracing our steps, here are the bits that would have been triggered by this walk: PQRST, and thus we are almost done. You might say: perhaps the edge from the vertex representing PQRS to the one representing QRST was taken very early on, at the start of the tour, so we don‚Äôt have these many steps to retrace: but here‚Äôs the thing ‚Äî we are on a tour, so you can continue walking back past your starting point and the sequence would still have this overall form: it‚Äôs just that a few of those bits would be written at the end, rather than at the start, and that just means that we can find our substring wrapped around the end, which is a perfectly valid place to discover it.\nNotice that there was nothing special about this whole process and the numbers four and five: you can generate so-called ‚Äúde Bruijn sequences of order k‚Äù, which are bitstrings of length 2^k with the property that every k-bit string appears exactly once in the sequence as a substring (including wraparoudns), using exactly the same idea.\nSo you should be convinced by now ‚Äî perhaps after reflecting for a moment or two ‚Äî that de Bruijn sequences of any order in fact exist, which is not obvious at all from the definition. It turns out that there are actually quite a few of them: 2^{2^{k-1}-k}, to be precise, a formula we know thanks to de Bruijn, after whom the sequences are named.\nYou might wonder if there are other ways of coming up with these sequences, or possibly even enumerating them. These discussions are unfortunately out of scope, but there are several excellent resources for the curious. Much of these notes are based on the third chapter of the book Magical Mathematics: The Mathematical Ideas That Animate Great Magic Tricks which is a treasure of a book. Paraphrasing from this chapter, here is a little about the people behind this trick:\n\nThe origins of this trick go back to Charles T. Jordan in 1919, and the original version required a color pattern of length 6 to identify all the cards. Later William Larson and T. Page Wright came up with another variant involving 52 cards, and 3 people revealing the suits being enough for the magician to pick up the values. In the 1960s, Karl Fulves and, separately, P. Diaconis working with the chemist Ronald Wohl, derived dozens of tricks based on variations and extensions of Jordan‚Äôs idea."
  },
  {
    "objectID": "posts/dsanotes/sequences/index.html",
    "href": "posts/dsanotes/sequences/index.html",
    "title": "Representing Sequences",
    "section": "",
    "text": "Link to Slides\nSo far, we have worked with atomic types, which is to say variables that can hold a ‚Äúsingle kind of data‚Äù for us ‚Äî like integers, characters, strings, booleans, and so on. Often, however, we need to work with compound types, which is to say, a bunch of these things taken together. For example, you may have sensed that when we spoke of maintaining a set of cards earlier with 52 booleans, it may have been nicer if they could be strung together into a single, unified structure: for one, it saves you having to keep track of a large number of variables, and further, it might be easier ‚Äî as we will find out ‚Äî to manipulate the data in response to operations that we may want to support.\nWhen you speak of a bunch of objects, it is useful to agree on whether you interpret the collection as an ordered or unordered set. Consider the following examples:\n\nYour playlist of happy songs\nA stack of cards\nPeople living in a house\nTeams that played in the Asia Cup 2022\nChess pieces on a board mid-game\n\nWhile some people play their happy songs in shuffle mode, for some the playlist is carefully organized, and the order matters. A stack of cards and chess pieces on a board are clearly collections with a natural sense of order, and one that is very likely to be important. On the other hand, people who live in a particular house or the set of teams that participated in the Asia cup in 2022 can be thought of as sets with no underlying order: of course, if you had to impose one you could cook something up1 (e.g, alphabetical, favorites, and so on). We will focus on storing ordered lists for now and return to sets in due course.1¬†For example, the C++ implementation of set maintains a default order even though it is, by nomenclature, modeling unordered sets. On the other hand, the unordered_set data structure in the C++ STL throws all caution to the wind and buys faster operations on average.\nThere are a few different ways that you can store a list of things in a computer‚Äôs memory. Imagine that you are real estate agent and you want to book some houses in a complex for your current and future clients. Stretching your imagination a little bit further, say all houses are numbered from 1 to 1000 and are positioned on a straight line in the natural order (i.e, 2 after 1, 3 after 2, and so on). Some houses are occupied and others are not. If you reserve k houses, management will find some contiguous block of k unoccupied houses and give you the number of the first house in the block. For instance, if you ask for 50 houses, you would get a letter from the management saying 50 houses starting from #420 are yours. If you need 20 more houses later, you would get a letter from the management saying 70 houses starting from #777 are yours. That‚Äôs right: they are not obiligied to give you houses #470 to #489, indeed, these may not be avaiailable. They could just give you an additional chunk of 20 houses somewhere else, but sadly that‚Äôs not how they roll: them management, them rules. There are also no refunds: you can‚Äôt give back reserved houses.\nNow here comes our first dilemma: how many houses do we reserve? Say we have 20 clients: it is clear that we need to reserve at least 20 houses, but should we reserve a few more? Reservations are not free, so we don‚Äôt want to reserve a very large number of houses either: remember, there are no refunds. But on the other hand, if we reserve too few, and we end up with more clients than the number of houses we‚Äôve reserved, we will be in a sticky situation ‚Äî worst case some clients may have to move, which is not ideal. You will have to work on coming up with a reasonable estimate of how many clients you will eventually have, and hope for the best.\n\n\n\nExpanding your reservations can get tricky\n\n\nOver time you find that this business of estimating the number of clients you have is an unpleasant one: both under and overestimates lead to losses, which makes you wonder if there are apartments that have more flexible options. You look around, and why yes, you find a different apartment complex ‚Äî again a thousand houses on a line neatly numbered 1 to 1000 from left to right, but this time, management reserves one house at a time. You want a new house, you simply ask for one. But there‚Äôs a catch: the paperwork here requires you to submit the client‚Äôs information, and they directly get their house number. So this is actually quite efficient: the management does all the work and you can reserve exactly what you need. All is well until it‚Äôs time for Diwali and you realize you don‚Äôt know where your clients are housed, and you can‚Äôt send them postcards, sweets, and advertisements.\nYou could, of course, just call your clients and ask them for their house numbers, but then this requires you to maintain some kind of register, and let us just say that you are not good with that kind of thing. So here‚Äôs what you do instead: you only keep the first client‚Äôs address, because that‚Äôs just one thing that‚Äôs easy to remember. Then you ask your i-th client to remember the address of the (i+1)-th client: they are slightly bewildered but you tell them it‚Äôs for insurance. Now if you want to pay a visit to your \\ell-th client, you just start from your first one, and follow the trail. Peculiar, but works.\n\n\n\nWalking around to find your clients with new management.\n\n\nNote that with the previous maangement this was never a problem: you had a contiguous block of houses that you allocated sequentially, so your i-th client‚Äôs house address was always at hand if you were good with arithmetic or had a calculator: simply add (i-1) to the house number of the first client.\nAs analogies go this was both unrealistic and imprefect, but I hope it gives you a sense of the main trade-offs involved in the two ways we have to store sequential data ‚Äî very roughly speaking:\n\nin contiguous blocks, access is easy, flexibility is hard;\nwith elements all over the place, access is indirect but the structure is relatively flexible.\n\n\n\nQuoting Wikipedia:\n\nAn array is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. An array is stored such that the position of each element can be computed from its index tuple by a mathematical formula.\n\n\nFor example, an array of 10 32-bit (4-byte) integer variables, with indices 0 through 9, may be stored as 10 words at memory addresses 2000, 2004, 2008, ‚Ä¶, 2036, (in hexadecimal: 0x7D0, 0x7D4, 0x7D8, ‚Ä¶, 0x7F4) so that the element with index i has the address 2000 + (i √ó 4).[4]\n\n\n\n\nQuoting Wikipedia:\n\nA linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence. This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration.\n\n\nMore complex variants add additional links, allowing more efficient insertion or removal of nodes at arbitrary positions. A drawback of linked lists is that access time is linear (and difficult to pipeline). Faster access, such as random access, is not feasible. Arrays have better cache locality compared to linked lists.\n\n\n\n\nGiven a fully occupied array with n elements v/s a linked list with n elements, here are the costs of some operations that you might want to perform:\n\n\n\n\n\n\n\n\nOperations\nArrays\nSingly Linked List\n\n\n\n\nLooking up the i-th element\ninstant\n\\approx i\n\n\nAdding a new element at the start\n\\approx n\ninstant\n\n\nAdding a new element at the end\n\\approx n\n\\approx n\n\n\nRemoving the i-th element\n\\approx n-i\n\\approx i\n\n\n\n\n\n\nThe correct answer is: it depends. If you expect your lists to be heavily manipulated, then linked lists are likely to be the better choice. On the other hand, if yuo are working with a list of a predictable size (or you at least have a known and reasonable upper bound on the size), and direct access is important to you, then arrays are the way to go. If you are dissatisfied with both methods, then consider transforming your unhappiness into motivation for discovering more sophisticated options!"
  },
  {
    "objectID": "posts/dsanotes/graphs/index.html",
    "href": "posts/dsanotes/graphs/index.html",
    "title": "Representing Graphs",
    "section": "",
    "text": "At some point of time in your life, you have likely been challenged to draw a kite-like figure:\n\n\n\nA common drawing challenge.\n\n\nwithout ever lifting your pencil/pen/quill off the paper. You may have noticed that there are figures that are particularly elusive to this persistent style of drawing, while others are pleasingly possible to draw in this fashion.\n\n\n\n\n\n\n(Spoiler) Beth Thomas demonstrating what drawing challenges are doable\n\n\n\n\n\n\n\n\n\n\nThe city of K√∂nigsberg in Prussia (now Kaliningrad, Russia) was set on both sides of the Pregel River, and included two large islands‚ÄîKneiphof and Lomse‚Äîwhich were connected to each other, and to the two mainland portions of the city, by seven bridges.\n\n\n\n\n\n\nThe Problem\n\n\n\nDevise a walk through the city that would cross each of those bridges once and only once. Try this yourself on a few different maps at Mathigon!\n\n\n\n\n\nKonigsberg Classic: Map of K√∂nigsberg in Euler‚Äôs time showing the actual layout of the seven bridges, highlighting the river Pregel and the bridges. Image by Bogdan Giu≈ücƒÉ, in the public domain (CC BY-SA 3.0) and sourced from Wikipedia.\n\n\n\n\n\n\n\n\n(Spoiler) Numberphile commentary on the bridges of K√∂nigsberg\n\n\n\n\n\n\n\n\n\n\nThe question was addressed and answered by Euler (1736). He did not solve this by ‚Äúmessing around‚Äù with all possible ways of walking around the city and checking if any of the walks satisfied the desired criteria. His more systematic approach involved modeling the problem abstractly, and making some key observations that ultimately led to the solution ‚Äî not just for this problem, but for all problems with a similar framing!\n\n\n\n\n\n\nClassroom Activity with Eulerian Paths\n\n\n\nThe picture below shows a few popular actors, with edges connecting pairs of those who have worked together in a movie together1. The example is designed so that there are exactly two actors who participate in an odd number of pairings.\nWe can work through the ‚Äúbridges puzzle‚Äù on this graph. In the classroom, we all started with the vertex representing Juhi Chawla, ‚Äúwalked around‚Äù using every connection exactly once, and the fun effect is that everyone ends up at the vertex representing Rishi Kapoor (or solves the puzzle incorrectly). From here, you can probably begin to guess the role of the two special vertices in the puzzle.\n\n\n\nAn actor collaboration graph\n\n\nThis activity is an adaptation of the example from the Intro to Algorithms course at Udacity, where it appears in the first chapter with the title ‚ÄúA Social Network Magic Trick‚Äù.\n\n\nHere‚Äôs another similar-sounding and classic problem involving a chessboard, also posed to Euler:\n\n‚ÄúI found myself one day in a company where, on the occasion of a game of chess, someone proposed this question: To move with a knight through all the squares of a chess board, without ever moving two times to the same square, and beginning with a given square.‚Äù\n\nThe origins of this problem ‚Äî the so-called ‚ÄúKnight‚Äôs Tour‚Äù ‚Äî goes all the way back to the 9th century AD, where it is described in Rudra·π≠a‚Äôs Kavyalankara. Here‚Äôs an example of a knight‚Äôs tour, as seen on Wikipedia:\n\n\n\nAn animated example of a knight‚Äôs tour.\n\n\nAlthough deceptively similar to the problem of the bridges, this is a different problem with two important contrasts:\n\nwe were previously not allowed to reuse bridges, here we are not allowed to reuse squares, and\nwe were previously obliged to use every bridge, here we are not required to make every possible move that exists.\n\nGeneralizing from the 8x8 chessboard, you could ask yourself what (n \\times n) boards admit such tours.\n\n\n\n\n\n\n(Spoiler) Numberphile commentary on the knight‚Äôs tour"
  },
  {
    "objectID": "posts/dsanotes/graphs/index.html#abstractions-via-graphs",
    "href": "posts/dsanotes/graphs/index.html#abstractions-via-graphs",
    "title": "Representing Graphs",
    "section": "Abstractions via Graphs",
    "text": "Abstractions via Graphs\nIt‚Äôs useful to model such problems using graphs (aka networks). And we‚Äôre not talking sine curves here ‚Äî a graph in our context is a structure that represents relationships between entities.\nUsually these relationships are between two entities at a time. Indeed, this is typically already quite a bit to keep track of, hence graphs that do more are said to be hyper. That is to say, graphs that model relationships involving more than two entities in one go are generally called hypergraphs, and they will be a story for another day.\nFor now, we will variously refer to entities as vertices or nodes, and relationships as edges or connections. Come to think of it, graphs are everywhere:\n\n\n\nEntities\nTwo entitites are in a relationship if‚Ä¶\n\n\n\n\nPeople\nthey are in a relationship.\n\n\nCats\nthey have fought each other.\n\n\nActors\nthey have been in a movie together.\n\n\nAirports\nthere is a direct flight between them.\n\n\nLandmasses\nthere is a bridge connecting them.\n\n\nSongs\none of the tunes was copied from the other.\n\n\nSubsets of [42]\none is contained in another.\n\n\nIngredients\nthere is a recipe that uses them together.\n\n\nWebpages\none of them has a link leading to the other.\n\n\nTwitter Users\none of them follows the other2\n\n\nLocations on a Chessboard3\none of them is reachable from the other via a knight move.\n\n\n\nWe usually like to distinguish between graphs where the relationships are potentially one-sided (such as people in a relationship), and those where they are mutual (such as ingredients in a recipe). Edges like these are called directed and undirected, respectively.\nDepending on what the graph is modeling, we may not allow for entities to entertain relationships with themselves (e.g, flights don‚Äôt come back to airports they took off from). In other contexts, it makes sense to allow for this (e.g, a set always contains itself). An edge that connects a vertex to itself is called a self-loop4.\nSometimes, it is reasonable that there are multiple edges between a fixed pair of vertices (for example, consider that there are several recipies that use salt and potatoes). Multiple edges are useful to model a multitude of relationships, and are often called multiedges when used.\nA simple graph is one that does not have either self-loops or multiedges.\nFinally, it is worth mentioning that some relationships naturally connect more two entities. For example, in an actor collaboration graph, you would find edges between Amitabh Bachchan, Juhi Chawla, and Shah Rukh Khan. You would also find edges between Akshay Kumar, Dhanush, and Sonam Kapoor. In the first example, there happens to be one film that all three actors feature in together, while this is not the case in the latter, at least at the time of this writing. As such, the graph does not have enough structure to reveal this distinction: it looks exactly the same in both cases!\nFor an actor-collaboration graph, allowing for n-way relationships would make room for accurately capturing information about both actors and movies. Indeed, every movie could be represented by an ‚Äòedge‚Äô ‚Äî the subset of actors who belonged to the cast. Such graphs are called hypergraphs or set systems.\nWhile hypergraphs are a very useful generalization of graphs, they will be largely out of scope for our discussions in this course. To make up for that, here is a different workaround to capture all the information we have in the actor-collaboration graph example. Instead of having a vertex for every actor, we introduce a vertex for every actor and for every movie. Now, an actor a and a movie m are connected by an edge if a belongs to the cast of m. Observe that this approach can be used to ‚Äúconvert‚Äù any hypergraph into a graph.\nA little more terminology before we move on: I promise that we‚Äôre almost done introducing new words!\nFor an undirected graph, a vertex u is called a neighbor of a vertex v if (u,v) is an edge. For a directed graph, the presence of the edge (u,v) would make v an out-neighbor of u and u an in-neighbor of v.\nFor an undirected graph, the degree of a vertex v is the number of neighbors of v. For a directed graph, the in-degree and out-degree of v is the number of in-neighbors and out-neighbors of v, respectively."
  },
  {
    "objectID": "posts/dsanotes/graphs/index.html#representing-graphs",
    "href": "posts/dsanotes/graphs/index.html#representing-graphs",
    "title": "Representing Graphs",
    "section": "Representing Graphs",
    "text": "Representing Graphs\nIf you wanted to tell your program about a graph, there are a few different ways you could go about it. Let‚Äôs assume that we‚Äôre trying to represent a graph G on n nodes, labeled 1 through n, and m edges.\n\n\n\n\n\n\nHow would you do it?\n\n\n\nBefore reading further, it would be worth spending some time thinking about how you would represent a graph. Based on our discussions so far, you might counter this with the question: ‚ÄúWell, what do you need it for?‚Äù ‚Äî and that‚Äôs a fair reaction!\nListed below are some fairly common operations that come up when dealing with graphs.\n1. add edge u v\n2. remove edge u v\n3. add vertex v\n4. remove vertex v\n5. is u a neighbor of v?\n6. find degree v\n\n\nEdge Lists. The most natural way is to perhaps just braindump the full list of edges. This gives us all we need to know about G.\nSince this is just a plain list, you could implement it either as an array or as a linked list.\nAdjacency Matrix. The other way is to block off a n \\times n array A of integers. You could then have:\n \\begin{equation*}\n   A[i][j] =\n    \\begin{cases}\n      1 & \\text{if } (i,j) \\in E,\\\\\n      0 & \\text{otherwise.}\n    \\end{cases}\n\\end{equation*}\n\nAdjacency Lists. Finally, you could have an array A of size n, with A[i] pointing to a list of the neighbors of the vertex i if the graph is undirected, and out-neighbors if the graph is directed.\nAgain, since these are just lists, they could be, in principle, implemented either as arrays or linked lists. We will follow the traditional choice of implementing them as lists.\nIt should be no surprise at this point that there is no ‚Äúright‚Äù answer to the choice of representation. You might have noticed, for instance, that an adjacency matrix always reserves n^2 units of space to store G, while the amount of space consumed by the other two representations is proportional to m. Notice that the number of edges in a graph can be as large as \\approx n^2 for simple graphs, so there certainly are graphs for which the space consumption looks the same for all representations. However, for graphs where there aren‚Äôt as many edges, then the matrix representation is likely wasteful in terms of space, although you may have other good reasons for sticking to it.\nLet‚Äôs classify expenses incurred as follows.\n\nBrilliant. When the procedure only needs constant time.\nDecent. When the procedure always wraps up in, and sometimes needs, time proportional to the maximum degree of the graph.\n(n/m)-tolerable. When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph.\n(n/m)-painful. When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph squared.\n\nHere‚Äôs a run down of how the representations above fare with respect to some of the common operations mentioned in the opening exercise.\n\n\n\nOperations\nAdj. Matrix\nAdj. List\nEdge List\n\n\n\n\nAdding a vertex\nn-Painful\nn-Tolerable\nDecent\n\n\nDeleting a vertex\nn-Painful\nn-Tolerable\nm-Tolerable\n\n\nAdding an edge\nBrilliant\nBrilliant\nBrilliant\n\n\nDeleting an edge\nBrilliant\nDecent\nm-Tolerable\n\n\nFinding degree(v)\nn-Tolerable\nDecent\nm-Tolerable\n\n\nCheck if (u,v) is an edge\nBrilliant\nDecent\nm-Tolerable\n\n\n\nIt would be a good exercise to validate that these claims indeed make sense.\nNow that we‚Äôre comfortable with storing graphs, next up, we‚Äôll talk about exploring them."
  },
  {
    "objectID": "posts/dsanotes/eulertours/index.html",
    "href": "posts/dsanotes/eulertours/index.html",
    "title": "Walking Around via Euler Tours",
    "section": "",
    "text": "We revisit the following problem from our introduction to graphs:\nWe also found such traversals useful for computing de Bruijn sequences, so between success on city exploration challenges and impressing with card tricks, there is plenty of motivation to take an Euler tour in a graph.\nIn general, we are given a directed or undirected graph G = (V,E) and we want to know if there is a sequence of edges:\nW := e_0 = (u_0,v_0), \\ldots, e_{m-1} = (u_{m-1},v_{m-1})\nsuch that v_i = u_{i+1 \\mod m} for all i \\in \\{0,1,\\ldots,m-1\\}, and every edge in E features exactly once in this sequence."
  },
  {
    "objectID": "posts/dsanotes/eulertours/index.html#necessary-and-sufficient-conditions",
    "href": "posts/dsanotes/eulertours/index.html#necessary-and-sufficient-conditions",
    "title": "Walking Around via Euler Tours",
    "section": "Necessary and sufficient conditions",
    "text": "Necessary and sufficient conditions\nNote that if such a sequence does exist for a directed graph G, then the indegree of every vertex must equal its outdegree, i.e:\n\nindegree(v) = outdegree(v) for all v \\in V.\n\nLikewise, if such a sequence exists for an undirected graph G, then every vertex must have even degree:\n\ndegree(v) = 2k_v for all v \\in V and some integer k_v.\n\nYou can observe this based on simulating the sequence on the graph and imagining it from the perspective of your favorite vertex v in it. In particular, assume you are walking around in G as dictated by W. Fix your attention on v: every time you ‚Äúenter‚Äù v, via, say the edge e_i, then you must ‚Äúexit‚Äù v via the edge e_{i+1}. If G is directed, e_i is an incoming edge and e_{i+1} is an outgoing edge, and if G is undirected, these are simply two edges incident on v that can be naturally ‚Äúpaired off‚Äù. So any successful walk witnesses the claims above.\n\n\n\n\n\n\nThese conditions are necessary, but are they sufficient?\n\n\n\n\n\nIt turns out that you could have graphs where these conditions are true, but there are no Euler tours. This happens when the graph is ‚Äúdisconnected‚Äù, i.e, when there is a pair of vertices u and v such that there is no path from u to v. The following are good exercises to work through:\n\nCome up with an example of a graph where the degree conditions are met but there is no Euler tour.\nConvince yourself that if G is connected and satisfies the degree conditions indicated above, you can always find an Euler tour."
  },
  {
    "objectID": "posts/dsanotes/eulertours/index.html#a-naive-algorithm",
    "href": "posts/dsanotes/eulertours/index.html#a-naive-algorithm",
    "title": "Walking Around via Euler Tours",
    "section": "A naive algorithm",
    "text": "A naive algorithm\nNow we turn to the procedural question: knowing what it takes to find an Euler tour, how do we actually find one? First, we get the simple degree-based sanity check out of the way. For undirected graphs we have:\nfor v in V(G):\n    if deg[v] % 2 != 0:\n        return False\nand for directed graphs we have:\nfor v in V(G):\n    if indeg[v] != outdeg[v]:\n        return False\nAssuming we pass these sanity checks, we want to embark on an actual tour. Here‚Äôs a reasonable starting point, which essentially amounts to saying that you get to start anywhere, and keep going while you can:\nfind_tour(G,v):\n    // G is the graph\n    // and v is our favorite vertex\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u) which is not in S:\n        add e to S\n        set curr := u\n    return S\nThis is basically a ‚Äúkeep going until stuck‚Äù process. By the very nature of the process, the sequence S that we come up with is walkable and does not repeat edges, but it is unclear if this list is exhaustive. Indeed, you should be able to come up with examples of graphs G where G has an Euler tour but find_tour(G) does not output one."
  },
  {
    "objectID": "posts/dsanotes/eulertours/index.html#fixing-the-naive-approach",
    "href": "posts/dsanotes/eulertours/index.html#fixing-the-naive-approach",
    "title": "Walking Around via Euler Tours",
    "section": "Fixing the naive approach",
    "text": "Fixing the naive approach\nHow do we fix this? For one, we need to know if we are done or not: if an edge is missing from S, then that‚Äôs a bad sign, and we need to do something about it. How do we know if every edge is enlisted in the output? One way is to compute the length of S: if it falls short of m, we are not done yet.\nBut we also need to know what the missing edges are. We could in principle go through our edge list and ask ourselves if the edge made it to S or not, but that sounds mildly painstaking. Let‚Äôs save ourselves the pain with some additional bookkeeping ‚Äî let‚Äôs track the ‚Äúresidual degree‚Äù of the vertices: this is the number of edges incident on v that are not yet listed in S. Any vertex with non-zero residual degree gives us concrete hints about missing edges.\nSo for directed graphs we have:\nfind_tour(G,v):\n    init res_deg[v] = outdeg[v]\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u) which is not in S:\n        add e to S\n        res_deg[curr] = res_deg[curr]-1\n        set curr := u\n    return S\nand for undirected graphs we have:\nfind_tour(G,v):\n    init res_deg[v] = deg[v]\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u) which is not in S:\n        add e to S\n        res_deg[curr] = res_deg[curr]-1\n        res_deg[u] = res_deg[u]-1\n        set curr := u\n    return S\nSo now we know when our algorithm is a fail. What‚Äôs the fix? Well, let‚Äôs approach vertices who are not done yet as per our intel from their res_deg value. We use these vertices to trigger more happy-go-lucky tours:\nfind_tour_fr(G):\n    i := 0\n    marked := emptyset\n    res_deg[v] := outdeg[v]\n    S := list of lists\n    while there is some v with res_deg[v] > 0:\n        let S[i] := find_tour(G,v,marked)\n        add every edge in S_i to marked\n        i = i+1\nSince we need to track visited edges across multiple runs now, we actually inform the find_tour function about the edges already visited from past lives. This is tracked with the marked set.\nSo our updated find_tour function looks like this:\nfind_tour(G,v,marked):\n    set curr := v\n    set S := empty\n    while there is an outgoing edge e = (curr,u)\n    which is not in S or marked:\n        add e to S\n        res_deg[curr] = res_deg[curr]-1\n        set curr := u\n    return S\n(The change is analogous for the version dealing with undirected graphs.)\nWhat we have now is a bunch of fragments, each of which is essentially a walk that begins and ends at the same vertex. Because of our relentless and careful pursuit (c.f. the while condition and the marked set), every edge in G features in exactly one of these fragments. Now it‚Äôs just a matter of putting everything together.\nStart with the first fragment S_0. If this is the only fragment we have, that means that our first happy-go-lucky tour was in fact also a lucky one! So we have nothing left to do. Otherwise, there are at least two fragments. Let us look at the set of vertices involved in S_0. The crucial observation is that there must be at least one other fragment, say S_i, that also features some vertex that appears in S_0. Indeed, if this is not the case, then you can argue that S_0 is a sad isolated fragment, and we can actually report that G has no Euler tour.\nOtherwise, find the common vertex between S_0 and S_i, and extend one of them using the other: for example, if v is the common vertex, take a walk in S_0 until you encounter v, and then instead of following along on S_0, take a detour as specified by S_i. Remember if you start on S_i at v, then you will eventurally exhaust S_i by coming back to v: and at this point you can ‚Äúresume‚Äù your walk on S_0. Note that this process welds two fragments at the vertex v thereby reducing the total number of fragments by one. This should count as a sure sign of progress: repeating for as long as possible, we have to do this at most (f-1) many times, where f \\leq \\frac{m}{2} is the total number of fragments.\npatchup():\n    Let S[i] for i in 1, 2, ..., f denote the set of all fragments\n    while f > 1:\n        look for a fragment S[i] that intersects S[0]\n        if S[i] does not exist:\n            return false\n        else:\n            expand S[0] along S[i]\n            remove S[i] from the set of all fragments"
  },
  {
    "objectID": "posts/dsanotes/eulertours/index.html#expenses",
    "href": "posts/dsanotes/eulertours/index.html#expenses",
    "title": "Walking Around via Euler Tours",
    "section": "Expenses",
    "text": "Expenses\nAlthough arguably a naive algorithm, the cool thing about this procedure is that it is guaranteed to work, and the number of steps involved is not terribly bad either. Here‚Äôs a naive back-of-the-envelope analysis, assuming G is stored as an adjacency list:\n\nThe degree-based sanity checks are \\approx m since G is stored as an adjacency list.\nConsider find_tour_fr(G):\n\nThe outer while loop runs at most m times since each iteration decreases the residual degree of at least two vertices and the sum of residual degrees is 2m at the start (an analogous argument applies for directed graphs).\nThe inner while loop in find_tour(G,v,marked) is executed at most m times. To find an appropriate edge, we have to go through the negibors of curr and check if the associated edge is already in S or marked. This takes at most (nm) iterations in the worse case, if implemented directly.\nAssuming that S is a linked list and res_deg is an array, the innermost operations are all constant time.\nThe overall cost of a direct implementation is therefore nm^3.\n\nThe patchup procedure involves a outer while loop that runs at most f times if we have f fragments. The looking business to merge fragments will take no more than m units of time: worst case we have to scan all remaining fragments to find a suitable match, and the merger involves updating a few pointers ‚Äî noting again that the fragments are stored as lists. This is of course a conservative estimate, but it will do. The overall time here is therefore no worse than \\approx m^2 since f \\leq \\frac{m}{2}.\n\nThis gives us m + nm^3 + m^2 in total damages. However, notice that a more careful analysis helps us do better without doing anything substantially different. If you think about find_tour_fr(G) think about how often the instructions:\nadd e to S\nres_deg[curr] = res_deg[curr]-1\nset curr := u\nfrom find_tour(G,v,marked) are actually executed. Every time we execute this set of instructions, we effectively add one edge to the set of marked edges, and since this happens exactly once per edge, these instructions only execute m times overall. Recall that what it takes to enter this loop is the discovery of an unused edge:\nwhile there is an outgoing edge e = (curr,u)\nwhich is not in S or marked\nThis is the bit that took us a while, because we assumed we have to examine all possible edges that go out of curr and then also tally up against S and marked. One way to speed this up is to always commit to pulling out the first element in the adjacency list of the vertex u and then in fact deleting this element from the list. If you are paranoid about subjecting your input to this kind of annihilation, then you can just make a working copy upfront. This way, you can be sure that you can find what you want in constant time, a good case in point to show how the way you store your data can impact the performance of your algorithm.\nBased on the hints above, convince yourself that find_tour_fr(G) in fact has a total expense amounting to \\approx m, modulo constants. With this, our overall cost comes down to \\approx 2m + m^2."
  },
  {
    "objectID": "posts/dsanotes/eulertours/index.html#afterthoughts",
    "href": "posts/dsanotes/eulertours/index.html#afterthoughts",
    "title": "Walking Around via Euler Tours",
    "section": "Afterthoughts",
    "text": "Afterthoughts\nCan we do better? Indeed, it turns out that with a slightly more careful implementation, the business of merging fragments can also be done with an expense proportional to the number of edges. The careful version goes by Hierholzer‚Äôs algorithm, and you can read up about this on Wikipedia or watch the video below."
  },
  {
    "objectID": "posts/communication-complexity-equality/index.html",
    "href": "posts/communication-complexity-equality/index.html",
    "title": "On the Communication Complexity of Equality",
    "section": "",
    "text": "I should mention that while the Schwartz-Zippel-DeMillo-Lipton lemma is invoked in the notes below, one could make do with just the fact that over any field F, any degree n polynomial has at most n roots, as pointed out by @dsivakumar ‚Äî thanks!\n\n\nIn the fourth slide from the end, why [DeMillo‚ÄìLipton]‚ÄìSchwartz‚ÄìZippel Lemma? You only need that number of roots of a polynomial (over Z mod q) of degree n is no more than n.¬†You don't need D-L/S/Z, which gives a general version for multivariate polynomials, right?\n\n‚Äî D. Sivakumar (@dsivakumar) June 6, 2020"
  },
  {
    "objectID": "posts/dogs-bunny-puzzle/index.html",
    "href": "posts/dogs-bunny-puzzle/index.html",
    "title": "Dog Bunny Puzzle",
    "section": "",
    "text": "The Reduction\nLet‚Äôs just set up the game as a computational problem just to be sure that we agree on the abstraction. In fact, we‚Äôll be working with a simpler version that we will call BunnyCarrot.\n\n\n\n\n\n\nBunnyCarrot\n\n\n\nIn the BunnyCarrot problem, the input is a simple undirected graph G = (V,E), subsets B and C of V indicating the initial positions of bunnies and carrots, and a (possibly empty) instruction r_e for every e \\in E, which is a collection of conditions, at least one‚Ä† of which must be true for the edge e to be ‚Äúactive‚Äù.\nThe question is if there is a sequence of movements of bunnies along active edges such that at the end of the sequence, every bunny is located at one of the vertices from C.\n‚Ä† In the original version of the problem, we need all conditions associated with an edge to be satisfied, not at least one. The construction that we will describe can be easily adapted to this setting as well, but is simpler to describe for this variant :)\n\n\nWe are going to show that BunnyCarrot is NP-complete by reducing from 3SAT. So let \\phi := \\{C_1, \\ldots, C_m\\} be a collection of m 3SAT clauses over variables \\{x_1, \\ldots, x_n\\}. The reduced instance of BunnyCarrot corresponding to \\phi looks like this:\n\n\n\nA cartoon sketch of the reduced instance of BunnyCarrot from 3SAT.\n\n\nWhat we have here is the following in terms of the structure of graph:\n\na path X on m+2 vertices, with the left most vertex in B and the rightmost one in C;\na pair of vertices (u_i,v_i) for every i \\in [n], and an edge between them, where all the u_i‚Äôs are in B‚Äô ‚Äî the vertex u_i represents the literal x_i while the vertex v_i represents the literal \\overline{x_i};\na pair of vertices p and q in C, with p adjacent to all u_i‚Äôs and q adjacent to all v_i‚Äôs.\n\nNow here be the instructions associated with the edges:\n\nthe edge to the \\ell-th vertex on X is active only if there is a bunny on at least one of the literals present in the clause C_{\\ell-1};\nthe edges between u_i and v_i are active only when there is a bunny on the leftmost vertex of X; and\nfinally, the edges incident on p and q are active only when there is a bunny on the rightmost vertex of X.\n\n\n\nThe Forward Direction\nWe first claim that we can ‚Äúwin‚Äù this game if \\phi has a satisfying assignment. Indeed, let \\tau: \\{x_1,\\ldots,x_n\\} \\rightarrow \\{0,1\\} be a truth assignment that satisfies all the clauses of \\phi. Then:\n\nIf \\tau(x_i) = 0, move the bunny on u_i to v_i.\nMove the bunny on the leftmost vertex of the path X to the rightmost vertex: note that all edges are active because \\tau is a satisfying assignment.\nMove all bunnies on u_i‚Äôs to p and those on v_i‚Äôs to q.\n\n\n\nThe Backward Direction\nNow suppose there is a winning sequence of moves \\sigma. We will show that we can extract from this sequence a satisfying assignment for \\phi, which will firmly establish the equivalence of the generated instance of BunnyCarrot with the OG hard instance \\phi.\nNote that to begin with, all the blue edges are inactive. Now, in the sequence \\sigma, let us say that a step is key if it involves a bunny moving along the first edge of the path X and critical if it involves a bunny moving along the last edge of the path X.\nSuppose the \\ell-th step is the first critical step in \\sigma. Further, suppose that the t-th step is the last key step to occur before the \\ell-th step. Notice that there must be at least one key step before a critical step ‚Äî we must begin before we can end :)\nNow, for all steps after the t-th step and before the \\ell-th step, note that edges incident to u_i and v_i are inactive for all i \\in [n]. This implies that every step between the t-th and \\ell-th steps involves a bunny moving along X, and in particular, every edge in X is crossed at least once in this phase of the game.\nLet us note the positions of the bunnies who are on the u_i‚Äôs and v_i‚Äôs after the t-th step is executed. Observe that this naturally translates to an assignment on the variables as follows:\n\n\\begin{equation*}\n    \\tau(x_i) =\n    \\begin{cases}\n      1 & \\text{if } u_i \\in B,\\\\\n      0 & \\text{if } v_i \\in B.\n    \\end{cases}\n\\end{equation*}\n\nWe argue that \\tau must in fact be a satisfying assignment.\nAssume to the contrary: suppose some clause C_k is, in fact, not satisfied by \\tau.\nThen, we claim that the edge connecting the k-th and (k+1)-th vertices is not active.\nAs an example, suppose C_k = \\{x_1,x_2,\\overline{x_3}\\}. Since \\tau does not satisfy C_k, it must be the case that:\n\n\\tau(x_1) = 0 ‚Äî and hence there is a bunny on v_1;\n\\tau(x_2) = 0 ‚Äî and hence there is a bunny on v_2;\n\\tau(x_3) = 1 ‚Äî and hence there is a bunny on u_3.\n\nHowever, the condition for the edge to the (k+1)-th vertex on X to be active is simply that there is a bunny present on at least one of the literals present in the clause C_{k}, i.e, one of u_1, u_2 or v_3. However, because of the structure of the graph, and the fact that all edges incident on p and q are inactive at all times before the first critical step, observe that:\n\nIf there is a bunny on v_1, there is no bunny on u_1.\nIf there is a bunny on v_2, there is no bunny on u_2.\nIf there is a bunny on u_3, there is no bunny on v_3.\n\nBy our assumption that \\tau falsifies C_k, all the premises above are true! So there is an edge on the path X that is not active between the t-th and \\ell-th steps, which violates our understanding that every edge was crossed between these steps. This is a contradiction, and hence \\tau must indeed be a satisfying assignment.\nI‚Äôll just remark here that this construction can be modified so that every vertex in the graph has constant degree, and there is only one vertex in C. It can also be modified to change the ‚Äúor‚Äù condition on the edges to an ‚Äúand‚Äù, by simply separating the conditions out along multiedges.\n\n\nFood for thought\nHere are some more questions :)\n\n\n\n\n\n\n\nWhat‚Äôs the complexity of this game when the underlying graph has some simple structure (e.g, a tree)?\nDoes the problem get harder if we introduce attacking entities like wolves?\nCan we come up with an algorithm that runs in polynomial time on instances where there is a valid winning sequence of constant length?\nIs the problem hard even for a constant number of bunnies?\n\n\n\n\nPS. Here‚Äôs a sketch of a slighty different reduction from vertex cover. Thanks again to Daniel for sharing the reduction described here! Comments welcome here, or continue the conversation on Twitter!"
  },
  {
    "objectID": "posts/new-mac/index.html",
    "href": "posts/new-mac/index.html",
    "title": "New Mac",
    "section": "",
    "text": "via Setapp\n\n\n\n\n\n\nBartender\nKeeps the menubar clean. Very handy!\nBetter Touch Tool\nI really need to leverage this a lot more, but even simple actions like swipe down with three fingers to close a tab, or tip-tap right left to move between tabs is pretty awesome already. Also use four-finger double tap to make the mouse pointer larger when it‚Äôs lost between screens‚Ä¶ I‚Äôd guess this app can probably subsume a lot of the functionality offered by apps like Keyboard Maestro and Alfred.\niStat Menus\nGood-looking stats in the menubar üëçÔ∏è\nYoink\nHas to be one of the best shelf apps out there. I know that there are a bunch of others in this space right now (üëÄ, Filepane), however I have been using Yoink for so long that I haven‚Äôt considered switching. My common use-cases:\n\nAlfred actions to send-to-Yoink\nUsing Yoink to stash away screenshots before the floating image disappears\nA KM shortcut that can send any Finder item to Yoink\n\nCleanMyMac\nMostly to keep track of file sizes via the Space Lens.\nAlternative if using only this feature: Daisy Disk\nDefault Folder X\nUse this all the time to stash away stuff where it belongs to keep Downloads clutter-free. Also the Alfred DFX collection is handy for finding recent items even if not 100% reliable.\nTiming\nUse this to supplement manual time-tracking. Do not use it to its full potential at all, I think a little investment with setting up the right projects etc. can go a long way.\nDropzone\nI mostly use this as a longer-term stash than Yoink. I think there are some very nice possibilities here, but the only things I‚Äôve done with it so far include:\n\nuploading images online\nopening a finder path in a terminal (superseded by an Alfred shortcut)\ndropping files in select locations\nURL shortening\n\nPermute\nHandy for all kinds of (bulk) file conversions.\nText Sniper\nImpressive OCR ‚Äúfrom anywhere‚Äù.\nSwish\nIntuitive gestures for window management. Pretty confident all this can be done in Better Touch Tool (above), but the actions are inspiring, and I‚Äôm lazy, so yeah, this is explicitly installed.\nDownie\nUse this for downloading videos from Youtube for offline viewing/listening. Fairly robust.\nIconJar\nIcon collection, enough said. üéÅ\nSip\nHandy üé® color picker.\nWorld Clock Pro\nVisually appealing world-clock, nice for scheduling stuff across timezones, great screensaver option as well.\nDash\nDocumentation lookup, handy that it works inside VS Code (via an extension).\nMindNode\nLovely mindmaps.\nPDFPen\nAlthough I mostly use Preview, PDFPen is useful for quickly rearranging and removing pages. Not sure about the several other features claimed, I find that it sadly crashes more often than not, so not my default application.\nTextSoap\nOccasional use, but very useful when I do need it for some pesky hidden-unicode-character-removal exercise.\nMathKey\nNiche app - on the rare occasion that I have a complicated LaTeX formula to write, I can write it in the iOS version of this app and receive it on the Mac (I don‚Äôt think the desktop app is even necessary for this; the iOS purchase can be bypassed by using the Mac app via Sidecar, but this is where I discovered the app so it makes the list).\nMarked\nPowerful previews for Markdown documents. Lots of interesting export features.\nChronoSync Express\nThis helps with keeping certain folders in sync, and setting up some backup schedules. Nothing that can‚Äôt be done with a few scripts (?) and/or Time Machine, but I did end up setting (and forgetting) a few things in here.\n\n\n\n\n\n\n\n\n\n\nGeneral\n\n\n\n\n\n\nNotion\nI‚Äôm (admittedly* experimentally) using Notion as my primary PKM tool, and it‚Äôs also where I am keeping most of my public-facing content (including this blog). My usage of Notion is gradually expanding in scope to include time/task/finance tracking as well. Too slow.\n*and also admittedly yet-again, after a fairly committed detour through Obsidian, Craft, and VSCode extensions for several months‚Ä¶\nBibdesk\nFairly robust reference management that has most of what I need ‚Äî priority features include speed, reliability, flexibility in generating citekeys and decent auto-filing of papers added to the database (popular free and paid alternatives that I‚Äôve tried briefly: Zotero, Mendeley, Setne, Papers, Readcube, JabRef, Bookends).\nIncidentally, if you are into Obsidian and Zotero, you might enjoy this video.\nMacTeX\nLaTeX and related tools, including TeX-friendly IDEs and reference management tools.\nXcode Tools, pandoc, and homebrew\nNeed these to work with code.\nContexts\nThe app that I miss the first when on a machine that doesn‚Äôt have it, next to Alfred. Makes window switching much more search and keyboard-driven.\nAlfred\nApart from using it as a launcher (even for files), I almost use Alfred as a Finder replacement. Here are some of my favorite Alfred workflows:\n\nMenubar Search\nSimple Folder Search (only search for folders)\nCase Switch (combined with send-text-to-Alfred below, this can be quite nifty)\nSymbols Search (unicode goodness)\nSend to Yoink\nQuit Applications\nSend text to Alfred (double-tap the option key)\nColor\nCurrency Exchanges\n\nKeyboard Maestro\nReally elaborate shortcut/automation app. I‚Äôve only scratched the surface with my use cases, but one of the things I really dig about my setup is simulating keypress sequences.\nThe way I do this is to activate a macro group for one action with one keyboard shortcut (e.g, CMD + ;) and then have all macros within that have one-letter or one-letter + one-modifier triggers - basically very easy triggers. This way, I only have to remember a bunch of high-level shortcuts for things in various categories, and from there it‚Äôs just a letter (and the same letter can be overloaded in different contexts).\nAs a concrete example, I have a macro group called launchers, and a shortcut within that for launching chrome. So something like CMD+L followed by c would launch Chrome. Although I have to confess that I mostly launch stuff through Alfred still (at the cost of one or two extra keystrokes).\nKeypress-sequence-triggers are native to Better Touch Tool and since BTT supports AppleScript, you could also run KM macros from BTT. I haven‚Äôt quite tried this yet.\nMore advice on this here.\nTypinator\nFast snippet expansion - faster than TextExpander (one of the main competitors in this space) in my experience. Recent updates have some rad features, which of course I‚Äôm yet to explore and exploit!\n1Password\nReasonably user-friendly and robust password management. Syncs to iOS, but I haven‚Äôt managed to leverage it so much on iOS. 1Password is ideal for storing confidential information nicely (IDs, bank stuff, and the like) - if used only for passwords I suppose the Keychain does a good job too.\nFantastical and Calendar\nFantastical is a nice (but expensive!) calendar app, mostly use it because of the calendar sets feature that keeps my time blocking calendars separate from the official one that is public within the organization. Of late, I especially like the way you can join online meetings from the notifications.\nHaving said that, I realized that much of what I was doing with Fantastical was overkill and I‚Äôve switched to the default calendar app for now, and it‚Äôs one paid subscription less2 to have.\nOk so I am back on Fantastical, because I am kind of\nVS Code\nThis is where I am supposed to be spending most of my time, perhaps next only to Craft/Notion. A few things from my VSCode workflow:\n\nUse different themes for different file types (I mostly dabble in LaTeX, C++, Python, JavaScript, and Markdown)\nLittle utility extensions save a lot of time: e.g, sort lines, increment value at cursor, file management, etc.\nMulticursor-powered find and replace is amazing.\nWorkspaces are handy and I usually launch them from Alfred.\n\nHook\nLooks very promising for cross-linking stuff across apps that have a common context (say, a project). I really need to explore this more!\nStream Deck (best with accompanying hardware)\nParticularly useful for switching OBS scenes although I use it less than I thought I would!\nIn particular, I want to explore their VSCode and KM integrations.\nIf without the physical device, Streamdeck does have a nice iOS app that simulates the hardware, but the pricing is based on a subscription model.\nGoogle Chrome\nI can‚Äôt make up my mind between Chrome/FF/Brave/Safari. I mostly switch between Chrome and Safari, with a mild preference for Chrome because of it‚Äôs more comprehensive extensions space, but I often end up with Safari as default for speed and privacy.\nReadkit\nUse this for RSS, although I‚Äôve mostly migrated away to DEVONthink. Still looking for a nice stand-alone RSS reader though, Readkit doesn‚Äôt always render everything the way I expect, sadly.\nOBS\nFor recording and live-streaming videos. Also useful as a virtual camera for meeting apps.\nScreenflow and Camtasia\nFor recording videos, lots of features, still finding my way around them.\nSlack and Discord\nOnline communities. I sometimes wish there was a native app for discourse too (is there?)\nKeynote\nPresentations - main alternative: Beamer + LaTeX + pgf/TikZ; or one of the JS-based slide generator tools from Markdown files (I did use react.js for one entire term).\nDEVONthink\nUse this fairly minimally (especially relative to the possibilities). At the moment DT indexes a couple of key finder folders and pulls in information from a lot of RSS feeds and even Twitter accounts. I try to review the stuff that automatically piles up in DT regularly, but ‚Äî at the moment ‚Äî it‚Äôs mostly a dumping ground and‚Ä¶ messy.\nMicrosoft Teams, Skype, and Zoom\nUse this for classes and online meetings.\nOffice suite: Word/Powerpoint/Excel\nUse it only to open files I receive.\nFruitjuice\nUseful battery health monitoring, discovered the app from a MPU podcast episode IIRC.\nMathsnip\nSurprisingly good LaTeX-aware OCR.\n\n\n\n\n\n\n\n\n\n\nWebapps\n\n\n\n\n\n\nYNAB\nBudgeting and finance management.\nGmail\nUntil I setup Mailmate again, I‚Äôm checking email in my browser. üôà\nGSuite (Docs, Sheets, Slides, and Calendar)\nI use these when others use them.\nZapier, IFTTT, Integromat\nA few automations here and there, still on my bucket list to take full advantage here. Integromat has been great for tracking Exportober contributions, incidentally!\n\n\n\n\n\n\n\n\n\n\nOmissions\n\n\n\n\n\n(aka stuff I used to use but don‚Äôt use as much now.)\n\nKarabiner Elements. I was quite taken in by the possibilities offered by ‚ÄúGod Mode‚Äù, but I realised that I prefer sequential shortcuts - like the ones I managed to setup in KM - to ones powered by arbitrary combinations of simultaneous keypresses.\nMailmate. Will very likely be back in the workflow soon!\nThings. Retired when I switched to ‚ÄúNotion for Everything‚Äù. That said, Things is absolutely awesome!\nUlyssess. Replaced by Notion ‚Üí Craft ‚Üí Obsidian ‚Üí Notion.\nBear. Replaced by Notion ‚Üí Craft ‚Üí Obsidian ‚Üí Notion.\nSublime Text. Replaced by VSCode.\n2Do. Replaced by Things a long time ago, but a really nice app!\nShift. Combines many windows in one, basically. Not sure if it was sufficiently useful, living without it and not missing it much.\nIM+. Similar to Shift in scope, although this one is available on Setapp.\n\n\n\n\nWhat‚Äôs on your list? Do share in the comments below!\n\n\n\n\nFootnotes\n\n\nNB. This list does not include fonts and scripts ‚Äî that‚Äôs for a separate round up in due course.‚Ü©Ô∏é\nI have nothing against paid subscriptions for software in general, but Fantastical‚Äôs pricing for the feature set does seem to have an unclear cost-benefit tradeoff, at least for users like me. I haven‚Äôt missed much since moving on.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/moving-blocks-ctis/index.html",
    "href": "posts/moving-blocks-ctis/index.html",
    "title": "Moving Blocks at CTIS 2021",
    "section": "",
    "text": "Some background from the conference website:\n\nThe CTiS (Computational Thinking in Schools) conference is an annual event organised by the ACM (Association of Computing Machinery) and the CSpathshala community. It aims to bring together teachers, educators and researchers to discuss issues of curriculum, pedagogy, policy and implementation, related to bringing computational thinking to schools.\n\nCTiS2021 aims to provide a platform for teachers, educators and experts to share their best practices as well as challenges faced in implementing computational thinking in education. The discussions will focus on integrating CT activities (both plugged and unplugged) in various school subjects, on student learning outcomes and on disseminating findings of CT based experiments or classroom research conducted by teachers and educators across the country.\nOur 4-day conference features key note speakers, Hal Abelson, MIT, USA, Manish Jain, IIT Gandhinagar, Patricia Ord√≥√±ez, University of Puerto Rico R√≠o Piedras and Wolfgang Slany, TU Graz, Austria. The conference also features a workshop on CT and inclusion, conducted by Supriya Dey, Vision Empower and Manohar Swaminathan, Microsoft Research, Bengaluru and presentations of selected abstracts with sessions on implementation of computational thinking, fun activities and innovative examples used by teachers in classrooms!\nNeedless to say, I‚Äôm looking forward to this very exciting program! As a PC member, I also know that the contributed content is fantastic as well, and the aim of this little writeup is to offer a glimpse into this section of the conference.\nIn particular, I want to share with you a puzzle that was described by Rema Nair, who teaches Computer Science at the Mallya Aditi International School in Bangalore, grades 9-12.\nTo begin with, we have an equal number of blue and green boxes positioned as follows:\nüü¶ üü¶ üü¶ üü© üü© üü©\nSo the blue boxes are lined up first from left to right, followed by a space that‚Äôs exactly enough to fit one box, and then we have the green boxes lined up after the space. The goal is to arrive at the following position, which is essentially what you would have if the blue and green boxes were to switch positions:\nüü© üü© üü© üü¶ üü¶ üü¶\nThe moves of the boxes are subject to the following rules:\n\nThe boxes from the left (i.e, the blue ones) can only move towards the right, and the boxes from the right (i.e, the green ones) can only move towards the left.\nBoxes can move forward one space, or move two spaces by jumping over/moving past another box of a different colour (never over a box of the same colour).\nThe moves are to be made in one direction only.\n\nThe puzzle is solved when the two sets of boxes have switched positions.\nSo how would you get the boxes to switch positions? Are there multiple ways to do it successfully? If so, which strategy leads to the smallest number of moves? This should be a fun conversation-starter in class ‚Äî and beyond!\nThis is a great activity with actual boxes in a physical setting, but for now, here‚Äôs a quick version that you can try out right here, thanks to Polypad by Mathigon* - be careful to not overlap the boxes one on top of the other, they will end up merging! You can always refresh this page to reset üòÄ\n*Note that the numbers on the boxes are immaterial; notice that given the constraints on the directions, the relative ordering of the numbers is fixed anyway.\nEnjoy playing for now, and join us at CTiS to meet Rema (and other participants).\n\n\n\n\n\n\nFootnotes\n\n\nRegistration is free but mandatory. The deadline is 28th September. Please head over here to register!‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/cp/sam-i-am/index.html",
    "href": "posts/cp/sam-i-am/index.html",
    "title": "Sam I Am",
    "section": "",
    "text": "This is mostly about solving Sam I Am (UVa 11419); en route, we will end up discovering K≈ënig‚Äôs theorem, which is a delightful fact about the special relationship shared by vertex covers and maximum matchings in bipartite graphs."
  },
  {
    "objectID": "posts/cp/sam-i-am/index.html#the-problem",
    "href": "posts/cp/sam-i-am/index.html#the-problem",
    "title": "Sam I Am",
    "section": "The Problem",
    "text": "The Problem\nHere‚Äôs an abridged version of the problem statement.\n\nSam is facing a temple which can be described by a m \\times n grid and he has the locations of all enemies in the temple (each location can be thought of as the intersection of a row and a column in this grid).\n\nAll of a sudden, he realizes that he can kill the enemies without entering the temple using the great cannon ball which spits out a gigantic ball bigger than him killing anything it runs into and keeps on rolling until it finally explodes.\nBut the cannonball can only shoot horizontally or vertically and all the enemies along the path of that cannon ball will be killed.\nSam wants to know the minimum number of cannon balls and the positions from which he can shoot the cannonballs to eliminate all enemies from outside that temple. >"
  },
  {
    "objectID": "posts/cp/sam-i-am/index.html#some-initial-observations-with-an-example",
    "href": "posts/cp/sam-i-am/index.html#some-initial-observations-with-an-example",
    "title": "Sam I Am",
    "section": "Some initial observations with an example",
    "text": "Some initial observations with an example\nSo to begin with, we have a grid with some cells identified as locations where Sam‚Äôs enemies are positioned, and here‚Äôs an example:\n\n\n\nA first example of a configuration of Sam‚Äôs enemies location\n\n\nConveniently for us, the enemies don‚Äôt move around.\nWe want to hit all of these locations, and what we have at our disposal is giant cannon balls which can destroy all enemies that are positioned on a single row, or a single column. For example, if we were obsessed about only firing along rows, we would need four cannon balls to tackle ‚Äôem all, like so:\n\n\n\nA solution were we fire along rows alone\n\n\nIf Sam was superstitious about shooting along columns only, then he would again need four of these cannon balls to take care of everything:\n\n\n\nA solution were we fire along columns alone\n\n\nHowever, our friend Sam is smart, not superstitious! And if there is anything that he is obsessed about, it is ruthlessly optimal destruction! In other words, he wants to fix everything up, but while using the smallest number of cannon balls possible‚Ä¶ and if that means mixing up ranks and files, so be it ‚Äî notice that you can manage with just three once you combine the use of both axes:\n\n\n\nA solution leveraging a combination of rows and columns\n\n\nAnd for this example in particular, notice that three cannon balls are necessary, because we have at least three enemies positioned at locations that share neither a row nor a column, implying that no row-fire or column-fire can handle more than one of these locations at once:\n\n\n\nDemonstrating that three canonballs are in fact necessary\n\n\nSo for this example, we know that:\n\nthree cannon balls are necessary &\nthree cannon balls are sufficient.\n\nIn general, let‚Äôs say that two enemy positions are mutually independent if they are on different columns and on different rows. Let k be the size of a largest collection of mutually independent positions. Then it is clear that:\n\nk cannon balls are necessary to handle all enemy locations;\n\nbecause any \\ell fires that handle all enemy locations must in particular handle these k mutually independent ones, and each individual fire can get to (at best) one of them ‚Äî by definition of what it means for two positions to be mutually independent. So if we have a valid solution involving \\ell cannon balls, then \\ell \\geq k.\nWhat is a less obvious, but considerably fascinating, is the fact that:\n\nthere is always a strategy to hit all locations using just k cannon balls. ü§Ø\n\nA striking situation, no pun intended ‚Äî the obvious estimate of what is needed turns out to be enough as well! The easy lower bound has a matching upper bound ‚ù§Ô∏è"
  },
  {
    "objectID": "posts/cp/sam-i-am/index.html#an-auxiliary-graph",
    "href": "posts/cp/sam-i-am/index.html#an-auxiliary-graph",
    "title": "Sam I Am",
    "section": "An auxiliary graph",
    "text": "An auxiliary graph\nAlright, I think that‚Äôs enough with the advertising.\nHow does this work?\nLet‚Äôs construct the following graph G = (V,E) associated with the grid and the information about enemy positions:\n\nIntroduce a vertex for every row in the grid; say r_i for 1 \\leq i \\leq m. These are the row vertices.\nIntroduce a vertex for every column in the grid; say c_j for 1 \\leq j \\leq n. These are the column vertices.\n\n\n\n\nThe vertices of the auxiliary graph\n\n\n\nIntroduce the edge (r_i,c_j), 1 \\leq i \\leq n; 1 \\leq j \\leq m if and only if the location at the intersection of the i^{th} row and the j^{th} column corresponds to an enemy position.\n\n\n\n\nThe edges of the auxiliary graph\n\n\n\n\n\nA bipartite graph!\n\n\nObserve that:\n\nAny matching in G (a collection of mutually disjoint edges) corresponds to a collection of mutually independent enemy positions back in the grid.\nWhat we are looking for is a smallest-sized subset S of V(G) such that every edge e in G has at least one of its endpoints in S. Such a subset is called a vertex cover.\n\n\n\n\nA vertex cover\n\n\nSo our claim in the language of grids now translates to:\n\nüìù The size of a maximum matching in G is equal to the size of a minimum vertex cover in G.\n\nin the language of graphs. Keep in mind that as graphs go G, happens to be a bipartite graph; which is to say that its vertex set can be parittioned into two parts‚Ä† such that every edge has exactly one endpoint in each part.\n‚Ä† In this example, these parts correspond to subsets of row vertices and column vertices."
  },
  {
    "objectID": "posts/cp/sam-i-am/index.html#bring-in-the-flows",
    "href": "posts/cp/sam-i-am/index.html#bring-in-the-flows",
    "title": "Sam I Am",
    "section": "Bring in the flows",
    "text": "Bring in the flows\nIs this much ado for nothing? We seem to have done some translation work, but there‚Äôs no proof of this bold claim in sight just yet‚Ä¶ üò¨\nFair. So here‚Äôs a roadmap for what we plan to do next:\n\nUse the graph G as the basis of a flow network.\nRecall the maxflow-mincut duality.\nProfit. Show the duality that we are interested in by hooking it up the known one.\n\nSo first things first: we are going to setup a flow network around the graph G, and here‚Äôs a partial picture of what it looks like:\n\n\n\nThe flow graph\n\n\nHere‚Äôs the official description of how we build this up:\n\nStart with the graph G, and orient every edge between a row vertex and a column vertex so that every such edge originates from the row vertex and latches on to the column vertex.\nWe assign infinite capacities to all the edges in G. Go unlimited on the originals! We will even dub these edges original edges going forward.\nAdd a source vertex s and add unit-capacity edges (s,r) for every row vertex r. We will call these edges the row selectors.\nAdd a target vertex t and add unit-capacity edges (c,t) for every column vertex c. We will refer to these edges as column selectors.\n\nThat‚Äôs it, that‚Äôs the flow network (\\tilde{G},\\kappa) based on G, where I‚Äôm using \\kappa to denote the capacity function. Now let‚Äôs stare at any valid integral flow in this network ‚Äî what does it pull out from the middle? ü§î\n\n\n\nA matching hiding in plain sight\n\n\nLet‚Äôs make the following quick observations in the context of a valid integral flow f in (\\tilde{G},\\kappa):\n\nThe flow on any edge e from G (i.e, an original edge) is either zero or one. Indeed, if f(e) > 1, then we violate conservation constraints at both endpoints of e.\nFor any row or column vertex, at most one original edge incident to it is used by the flow f. In other words, f(e) = 0 for all but at most one original edge incident to any row or column vertex. Again, if not, combined with the fact that f is integral and that the row and column selectors have unit capacity, we will violate conservation constraints on the vertex under consideration.\n\nBased on these observations, we have that the set of original edges for which f(e) = 1 forms a matching in back in G, and in particular, if f was maximum flow, then this set would correspond to a maximum-sized matching. Now, let‚Äôs look at the corresponding mincut by building the residual graph:\n\n\n\nEdges in the residual graph that have a residual capacity of zero are not shown. Also, the original edges that were used by f have infinite residual capacity but their corresponding back-edges have unit capacity, but this distinction is not emphasised in the picture because it‚Äôs not particularly relevant to our discussion.\n\n\nEdges in the residual graph that have a residual capacity of zero are not shown. Also, the original edges that were used by f have infinite residual capacity but their corresponding back-edges have unit capacity, but this distinction is not emphasised in the picture because it‚Äôs not particularly relevant to our discussion.\nand considering what vertices are reachable from s:\n\n\n\nThe vertices reachable from s are marked green, while all remaining vertices are marked red.\n\n\nThe vertices reachable from s are marked green, while all remaining vertices are marked red.\nIn the residual graph, I would like to draw your attention to:\n\nrow vertices that are unreachable from s,\ncolumn vertices from where it is impossible to reach t.\n\nWe will refer to these vertices as the misfits ‚Äî they are highlighted for you in the picture below:\n\n\n\nThe misfits\n\n\nNow roll up your sleeves for some magic. Let‚Äôs pull up the cut ‚Äî which we know is in fact a mincut ‚Äî obtained by considering the set of vertices reachable from s the residual graph corresponding to the maxflow f. In pictures, note how we have attracted some column vertices to the s-side, and pushed away some row vertices to the t-side:\n\n\n\nSome reorganization\n\n\nNote that this is a minimum cut, that is to say, the total capacity of the edges crossing the cut is as small as possible ‚Äî which means that, in particular, the total capacity is at least (or should that be at most?) finite, and that implies, even more particularly, that none1 of the original edges cross this cut.1¬†Remember how their capacities were infinite? So they just cannot afford to cross a minimum-capacity cut.\nSo every original edge is confined to the s-camp or the t-camp; but note that every original edge is an edge between a row vertex and a column vertex; so if you put two and two together, you see that, in fact, every edge must be incident to a misfit vertex. This means that the misfits are what we were looking for all along ‚Äî they form a vertex cover of G!\nSo at least we have some solution. Is this the best we can hope for?\nWhy yes!\nNote that every misfit vertex contributes exactly one unit-capacity edge to the minimum cut: the misfits on the s-side are incident to column selectors, and these edges connect with t on the other side; while misfits on the t-side are incident to row selectors, and these edges connect with s, which is again on the opposite end. So every misfit vertex contributes exactly one edge to the minimum cut ‚Äî and there are no other edges that cross the cut, so we have the following sequence of equalities:\n\nsize of the proposed solution = #misfits\n#misfits = capacity of the minimum cut\ncapacity of the minimum cut = value of the maximum flow\nvalue of the maximum flow = size of a maximum matching back in G\nsize of a maximum matching back in G = lower bound on our solution\n\nTherefore, we have proposed a solution whose cost matches a lower bound on it, making it optimal! With a slight adjustment of language (dropping misfits in favor of vertex cover), the sequence of inequalities above also shows that the size of a minimum vertex cover in a bipartite graph equals the size of a maximum matching in the graph.\nThis was the relationship I‚Äôd promised to cover when we started, and it goes by K≈ënig‚Äôs theorem in case you‚Äôd like to find out more ‚Äî the argument we came up with here isn‚Äôt perhaps the traditional proof, and this is a fact that can be established in several different ways, all fun in their own way ‚ù§Ô∏è"
  },
  {
    "objectID": "posts/poems/seek/index.html",
    "href": "posts/poems/seek/index.html",
    "title": "Seek",
    "section": "",
    "text": "stories below newspaper headlines peace after bygone deadlines\na castle in the air a choice that is fair\nthe absence of regret on a death bed a reason, or otherwise to stay alive ‚Äî\nand quite likely it will be a quest unfulfilled.\nFind a smile instead, and you will find some strength to stay another day."
  },
  {
    "objectID": "posts/poems/sprinkles-of-the-sky/index.html",
    "href": "posts/poems/sprinkles-of-the-sky/index.html",
    "title": "Sprinkles of the Sky",
    "section": "",
    "text": "Soft rays tiptoe by the window as if shy to come inside\nSprinkles of the sky lie in drops of dew as if captive, somewhat pensive\nAnd I snuggle deeper into a distant dream as if I could see a better place to be\n\nI stole the title from a phrase in Hairat, a song that features in Anjaana Anjaani. Incidentally - I am very addicted to the entire album!"
  },
  {
    "objectID": "posts/poems/bloom/index.html",
    "href": "posts/poems/bloom/index.html",
    "title": "Bloom",
    "section": "",
    "text": "All trouble to no avail, one day the bee will come and take it all away.\n\nHonorable Mention in the The Binnacle Second Annual Ultra Short Competition."
  },
  {
    "objectID": "posts/poems/on-the-fence/index.html",
    "href": "posts/poems/on-the-fence/index.html",
    "title": "On the Fence",
    "section": "",
    "text": "At least you have a chance, To wait for the rains‚Äô dance, To live and fight, To make things right."
  },
  {
    "objectID": "posts/exportober/2022-tracker/index.html#the-tweets",
    "href": "posts/exportober/2022-tracker/index.html#the-tweets",
    "title": "2022 Exportober Tracker",
    "section": "The Tweets",
    "text": "The Tweets"
  },
  {
    "objectID": "posts/exportober/2022-tracker/index.html#what-was-this-about-again",
    "href": "posts/exportober/2022-tracker/index.html#what-was-this-about-again",
    "title": "2022 Exportober Tracker",
    "section": "What was this about again?",
    "text": "What was this about again?\nYou can find the original announcement here and more specifics clarifying the format (or the lack of it) here. Here‚Äôs the short version:\n\nPut up a piece of content everyday between 1st October and 30th October, with the possibility of skipping one day per week;\nPost a link to your content on Twitter with #exportober\nThat‚Äôs it, actually. ü§∑‚Äç‚ôÄÔ∏è\n\nPsst. It‚Äôs quite fine to sign up even if you‚Äôre reading this after the 1st of October. The automated tracking exercise here will stop after the 15th of November, so you can be a part of this by just contributing in this window. It certainly does‚Äôt have to be daily and it doesn‚Äôt have to be 30 things, although I found those to be useful default targets to work with for myself."
  },
  {
    "objectID": "posts/exportober/about/index.html",
    "href": "posts/exportober/about/index.html",
    "title": "About Exportober",
    "section": "",
    "text": "In a massively impulsive move nudged by some Twitter feedback, I recently launched the Exportober challenge.\nThe TL;DR version:\n\nPut up a piece of content* everyday between 27th September and 30th October, with the possibility of skipping one day per week;\nPost a link to your content on Twitter with #exportober\nThat‚Äôs it, actually. ü§∑‚Äç‚ôÄÔ∏è\n\n\n\n\n\nAnyone else procrastinating on starting a blog, CS or otherwise? Would you be interested in being held mutually accountable for a few weeks to overcome the initial inertia? Do let me know! I‚Äôll try to setup something systematic-looking if there‚Äôs interest üôÇ\n\n‚Äî Neeldhara (@neeldhara) September 19, 2021"
  },
  {
    "objectID": "posts/exportober/about/index.html#whats-allowed-in-exportober",
    "href": "posts/exportober/about/index.html#whats-allowed-in-exportober",
    "title": "About Exportober",
    "section": "What‚Äôs allowed in #exportober?",
    "text": "What‚Äôs allowed in #exportober?\nI was deliberately vague about the terms-and-conditions that goes with the piece of content piece above. The rules I mentioned were minimal: since there are no restrictions of age, keep the content SFW and generally legal. Other than that, anything goes, for example:\n\nCan I doodle? Yes.\nCan I meme? Yes.\nCan I make a comic? Yes.\nCan I quip? Yes.\nCan I tweet a thread? Yes.\nCan I tweet a single tweet? Yes.\nCan I song and/or hum and/or dance? Yes.\nCan I react? I am unfamiliar with this genre, but yeah, why not?\nCan I just quote? Uhh, ok-fine, sure ‚Äî maybe be sure to include a reaction?\nCan I commit? Yes, please! Oh, you mean ‚Äî can it be a GitHub commit? Right, yeah, sure.\n\n\n\n\n\nOne a day is a lot! (Unless tweets count). I used to blog regularly but not even one a week at its peak, I think.\n\n‚Äî Rahul Siddharthan (@rsidd120) September 22, 2021\n\n\n\n\n\nin case anyone is looking for inspiration, in true student fashion, i am already planning on cheating by turning all the math puns i have in mind to comics ['ring arthur and his knights of the round table' but where ring arthur is a noncommutative ring without unity]\n\n‚Äî tiiiiredddd (@vuisnotabot) September 22, 2021\n\n\n\nAs you can see, there are no restrictions on format or length or quality. It can be whatever you want, and however long or short you want it to be. The point is to get into the habit of putting a bit of yourself into something tangible that you‚Äôd want to share.\nSo while you could technically schedule thirty pieces of Harry Potter trivia in advance ‚Äî that would kind of defeat the purpose."
  },
  {
    "objectID": "posts/exportober/about/index.html#is-this-for-me-whybother-with-exportober",
    "href": "posts/exportober/about/index.html#is-this-for-me-whybother-with-exportober",
    "title": "About Exportober",
    "section": "Is this for me? #whybother with #exportober",
    "text": "Is this for me? #whybother with #exportober\nIn general, I imagine only you would know if this is for you ‚Äî this may not be a priority or a point of interest for you right now, but if you‚Äôre reading this, possibly your interest is at least mildly piqued?\nWhat this is about is setting aside some time for yourself and to participate alongside friends who‚Äôre in it for fun and profit:\n\n\nWe often avoid taking action because we think \"I need to learn more,\" but the best way to learn is often by taking action.\n\n‚Äî James Clear (@JamesClear) September 23, 2020\n\n\n\nThe fun bit is in the making and sharing.\nThe profit bit is the hope that we trick ourselves into making this a bit of a regular habit for life.\n\nLonger term, you may or may not want to be sharing or publishing on a daily basis. But hopefully, longer term, you are engaged with the process on a regular basis.\nPersonally, there‚Äôs almost nothing that I do consistently on a daily basis, not counting the things one needs to do continue being alive. I‚Äôd like to see if I can change that a bit1, and apparently doing such things bit by bit ‚Äî and with some public commitment ‚Äî is a good idea, hence the micro-nature of the challenge.\n\n\nSo overall I‚Äôve gotten to a point where I‚Äôm just afraid to even think about putting something together because I think it‚Äôs an unrealistic commitment of time. I‚Äôm also really bad at chunking - everything I do of this sort manifests at the wrong end of an all-nighter üôà\n\n‚Äî Neeldhara (@neeldhara) September 19, 2021"
  },
  {
    "objectID": "posts/exportober/about/index.html#i-want-to-be-in-but-i-stoop-no-lower-than-meaningful-masterpieces",
    "href": "posts/exportober/about/index.html#i-want-to-be-in-but-i-stoop-no-lower-than-meaningful-masterpieces",
    "title": "About Exportober",
    "section": "I want to be in, but I stoop no lower than meaningful masterpieces‚Ä¶",
    "text": "I want to be in, but I stoop no lower than meaningful masterpieces‚Ä¶\nHmm. One way that you could still make this work for you is to build out your masterpiece bit by bit. If it‚Äôs a tutorial, you could plan it out in advance and work through one coherent section a day. If it‚Äôs a sketch, you could share your partial progress as you go along, and even put it together in a timelapse at the end? That would be great to see!\nThere are some types of long-form content that aren‚Äôt naturally amenable to this type of chunking; say you want to put together a video exposition, make an origami sculpture, or crochet a Klein bottle. In this situation, you could either use the challenge to document your process and progress; or you could just claim to engage in #exportoberlite with a reduced frequency of production ‚Äî say once a week, or one masterpiece at the end ‚Äî you‚Äôll just have to still tweet it out so I can catalog it ‚ù§Ô∏è\n\n\nI really don‚Äôt like the illusion that there is one process for making and that it involves writing every day. Thinking is work to. So is reading. So is doing things that seem unrelated to writing. Our brains are always thinking about what we‚Äôre making, whether we‚Äôre typing or not\n\n‚Äî ChristianAntonGerard (@CAGerardPoet) January 25, 2020\n\n\nAlso, while on the subject of masterpieces, there‚Äôs the parable of the pots. On the other hand, everyone does have their own process, and the idea isn‚Äôt to force a format: this process is temporary, flexible, and optional üôå"
  },
  {
    "objectID": "posts/exportober/about/index.html#this-sounds-like-fun-but-i-have-no-idea-what-to-make.",
    "href": "posts/exportober/about/index.html#this-sounds-like-fun-but-i-have-no-idea-what-to-make.",
    "title": "About Exportober",
    "section": "This sounds like fun, but I have no idea what to make.",
    "text": "This sounds like fun, but I have no idea what to make.\nOooh. Maybe just ping on Twitter if you are in this situation. I do imagine that there are folks who have more ideas than they can handle, so if you have the bandwidth, it‚Äôll even out nicely! For some starter inspiration, just in case it is useful, here are some of the post types that I‚Äôm planning for the duration of this challenge, in roughly increasing order of desperation:\n\nTrying some of the Chai and Why? experiments and documenting any accidents learnings.\nPuzzles and programming contest roundups.\nLecture notes for classes/talks I‚Äôm teaching and/or attending.\nHighlights from whatever podcasts I‚Äôm tuned into.\nClean up draft essays from previous lives.\nRandom doodles. And VSCode keyboard shortcuts.\nHot takes on inconsequential debates.2\n\nI also have a few black holes nurtured over time ‚Äî I‚Äôm looking at you, all my Read-It-NeverLater apps, the starred section in my RSS app, my YouTube watchlist, and relatives. Maybe about time to go down some of these rabbit holes with the excuse of commentary to follow.\nSo yes, that‚Äôll be all for now! Let‚Äôs see how this goes ü§û Meanwhile, please hop on and spread the word for all of us? Thank you! üéâ\n\nPS. You might be curious about what participating will look like. I‚Äôm trying to setup a separate page for each participant in the challenge that will pull in all your tagged tweets. I‚Äôll share a preview soon!"
  },
  {
    "objectID": "posts/exportober/2021-tracker/index.html#the-tweets",
    "href": "posts/exportober/2021-tracker/index.html#the-tweets",
    "title": "2021 Exportober Tracker",
    "section": "The Tweets",
    "text": "The Tweets"
  },
  {
    "objectID": "posts/exportober/2021-tracker/index.html#what-was-this-about-again",
    "href": "posts/exportober/2021-tracker/index.html#what-was-this-about-again",
    "title": "2021 Exportober Tracker",
    "section": "What was this about again?",
    "text": "What was this about again?\nYou can find the original announcement here and more specifics clarifying the format (or the lack of it) here. Here‚Äôs the short version:\n\nPut up a piece of content everyday between 27th September and 30th October, with the possibility of skipping one day per week;\nPost a link to your content on Twitter with #exportober\nThat‚Äôs it, actually. ü§∑‚Äç‚ôÄÔ∏è\n\nüìù If you‚Äôd like to participate you can sign up below; and if you‚Äôd like to help, please encourage everyone participating by checking out the tweets coming in above!\nPsst. It‚Äôs quite fine to sign up even if you‚Äôre reading this after the 27th of September. The automated tracking exercise here will stop after the 30th of October, so you can be a part of this by just contributing in this window. It certainly does‚Äôt have to be daily and it doesn‚Äôt have to be 30 things, although I found those to be useful default targets to work with for myself."
  },
  {
    "objectID": "posts/exportober/2021-tracker/index.html#sign-up",
    "href": "posts/exportober/2021-tracker/index.html#sign-up",
    "title": "2021 Exportober Tracker",
    "section": "Sign up!",
    "text": "Sign up!\nWhile you can participate simply by using #exportober in your tweets, it‚Äôll be great if you could explicitly enter your Twitter username in the form below, so we can check in on each other! ü§ù\nWhile I‚Äôm not going to write a Twitter bot that will send you daily reminders over DM, I do hope to create a separate page for each registered participant at the end of the challenge that shows off just their entries in one place, so it‚Äôs helpful to know who you are üòÄ"
  },
  {
    "objectID": "posts/exportober/2021/index.html",
    "href": "posts/exportober/2021/index.html",
    "title": "An Invitation to Exportober 2021",
    "section": "",
    "text": "As you can see ‚Äî at least at the time of this writing ‚Äî this is a blog under construction with some mild ambition, going by the long list of empty categories on the homepage.\nI‚Äôve heard a lot about the effectiveness of something something public something something accountability, so I‚Äôm going to give this a shot: if there‚Äôs anyone else who wants a bit of a jumpstart and encouragement for getting into the habit of putting stuff out there, this is for you!\nPresenting the EXPress yOuR Thoughts, i.e, export, challenge.\nHere be some rules, or not, make this your own!\n\nPut something out there ‚Äî could be an essay, a video, a sketchnote, some code, a piece of music, a photograph ‚Äî I think the only criteria is that this should be something you put together that you feel compelled to share, and something that can be accessed via a public URL. I suppose quotes and curated round-ups are good too, but ideally you want this to be something that has a bit of you in it.\nShare it on Twitter with #exportober (umm, the export challenge in October üò¨ ‚Ä¶ it had to be something that wasn‚Äôt already taken so I can scrape it off and put it up in one place, and everyone participating can keep an eye out on others participating ‚Äî the general hope is that everyone finds themselves encouraged by everyone else üéâ).\nI‚Äôm going to find a way of listing everything that comes up starting 27th September. This gives you five weeks until the end of October. Try and get something up everyday - this puts the challenge in the Export Challenge üòÄ That said, allowing ourselves one cheat day per week means that we all hopefully end up with 30 things by the 30th of October. Yays ü§û\nSince I‚Äôll hopefully find a way of tracking all the content tagged this way and automatically pushing it to a page where we can find it all in one place, please don‚Äôt put up anything illegal or damaging. Other than this, practically anything goes, but please do respect the basic idea, which is is to build up some positive vibes and keep this a fun exercise!\n\nSo I hope you spend the coming week getting setup ‚Äî figure out what you want to do and how you‚Äôll do it, and maybe even cheating a little and preparing some buffer content for the rainy days? We‚Äôve already had some great suggestions for tools you can use to get started:\n\n\n\n\nGitHub pages is great for this. I don't use Markdown, but it still works as a quick, lightweight publishing system, automatic ssh setup, etc. Since I store the content on GitHub anyway, everything is nicely unified.\n\n‚Äî ShriramKrishnamurthi (@ShriramKMurthi) September 19, 2021\n\n\n\n\n\n\nMay not commit for mutual accountability :) But a suggestion.Instead of blogging platforms, how about markdown/Jupyter notebooks in a github repo and/or short code/docs as github gists?Can use versioning to improve - no need to get the content \"right\" at the first \"publish\".\n\n‚Äî A. Sundararajan (@sundararajan_a) September 19, 2021\n\n\n\n\nThrow in your Twitter username in the form below to add your name to the list of people who are thinking about will be participating! The list will evolve automatically below, and I‚Äôll probably clean it out of spurious entries manually every so often. Thanks to everyone who participated! The form is no longer relevant, but you can check out the posts by looking for #exportober on Twitter :)"
  },
  {
    "objectID": "posts/notion-powered-websites/index.html",
    "href": "posts/notion-powered-websites/index.html",
    "title": "Notion-powered websites",
    "section": "",
    "text": "It‚Äôs almost like there‚Äôs something missing between static HTML and full JavaScript software.\n\n‚Äî Wes Souza üè≥Ô∏è‚Äçüåà‚¨£ (@__WesSouza) September 1, 2021\n\n\n\n\n\n\n\nYeah, it feels like we are now at a point where it‚Äôs easier to make complex websites but somehow oddly harder to make the simple ones!\n\n‚Äî Neeldhara (@neeldhara) September 1, 2021\n\n\n\n\n\nüí° Most options here ultimately amount to SSGs in the background, but with varying levels of exposure to what‚Äôs happening at the low-level.\n\nThere are a few different options out there if you are interested in this as well, and here‚Äôs a handwritten TLDR-summary1 if you find the rest of this little discussion too long:1¬†TIL that this style of summarization is also called a Pugh chart, thanks to Justin Lai.\n\n\n\nNotion Website Options Compared\n\n\n\nNow for the more detailed run-down:\n\nJust Use Notion\nThe official Notion documentation shows us how to build nice websites with Notion:\n\nThis is a great option for putting together something quick and temporary or for testing something out. It can be free (if you are on the Notion free plan) and/or will cost you nothing on top of what you might be paying for already if you are paying Notion user.\n\n\n\"What's the link to your site?\"\"Oh it's acmedesign dot notion dot site slash dd5a6abe47444a53b7170afd67942d77\"üôÖüèæ‚Äç‚ôÇÔ∏èüôÖüèºüôÖüèª‚Äç‚ôÄÔ∏èNow for folks with paid plans, you can set a public home page like https://t.co/tf1bBQcNJy! pic.twitter.com/LFWYQtgloq\n\n‚Äî Notion (@NotionHQ) September 21, 2021\n\n\n\nüí° If you have a more serious use-case, however, and are concerned about things like performance, SEO, custom domains, and such, and want to exercise more control over the look and feel of your site, you probably want to move beyond what you can get with xyz.notion.site. Still, a great option ‚Äî involving no extra costs and right out of the box ‚Äî and I‚Äôd imagine this covers a number of use-cases! üëç\n\n\n\nFruition and Cloudflare Workers\nA popular way to get your domain to point to your Notion setup and customize the look and feel of the final setup just a little bit is via Fruition:\n\nAs mentioned on the website already, one downside is the setup time ‚Äî but I don‚Äôt think this is a very serious drawback at all, it‚Äôs a one-time exercise and not very difficult at all given the very clear instructions given on the website. However, I think there is a more significant concern with this option, which was highlighted by @bensomething in this Tweet thread:\n\n\nPerhaps a good example of why you should avoid custom domain solutions for Notion that use those damn Cloudflare worker scripts. But hey, super excited for my new startup (fartup?) to be featured on the Founded by Monzonauts website! @monzo @hugocornejo https://t.co/0FH916uvd2\n\n‚Äî Ben Smith (@bensomething) January 26, 2021\n\n\nYou could have a (potentially your) Fruition site intercepted with random content, as is the case here. As Ben points out, it‚Äôs much safer to convert your Notion content into a static site:\n\n\nAnything that converts your Notion pages to static versions is fine! It definitely seems like Super's leading the pack, but I'd say a substantial number of people are still using something like Fruition.\n\n‚Äî Ben Smith (@bensomething) January 26, 2021\n\n\n\nüí° To summarize what we have with Fruition: it‚Äôs probably okay for a small test setup, and it‚Äôs a cool experiment ‚Äî largely free (you might hit up Cloudflare‚Äôs limits eventually and be prompted to upgrade) and not much work to setup ‚Äî but I‚Äôd be wary of using it in production for any non-trivial project.\n\n‚Ä¶and so we‚Äôre going to explore a few ways of doing that now.\n\n\nnextjs-notion-starter-kit and react-notion-x\nThe nextjs-notion-starterkit is a NextJS template built by @transitive_bs, which is in active use here:\n\nYou can check out the repository here. If you are feeling even braver, you might even want to explore what powers this under the hood, which is the react-notion-x repository here:\n\n\nüí° Using nextjs-notion-starterkit is definitely a whole lot safer than Fruition, but it‚Äôs also clearly a whole lot more intensive in terms of setup! This option is great in terms of being free and highly customizable, but is best-suited to those who are already familiar with Next.js and who generally know what they are doing. So if the readme pages on those repositories did not make much sense, it‚Äôs probably best to either get some help on the initial setup or move on to more user-friendly, truly no-code options. That‚Äôs what we have up next!\n\nreact-notion-x ‚Äî from a safe distance as far as I am concerned ‚Äî appears to be very well-documented and actively maintained. The documentation speaks of hosting on Vercel, and my guess is that hosting on Netlify should also be possible. Both of these options have generous free tiers, so this could potentially be a no-cost option, although it‚Äôs far from being a true no-code option, at least for the initial setup!\nInterestingly, react-notion-x appears to be supported by Super, and from a quick glance at the source code, it seems like both Super and Potion (which are the last two options that we‚Äôll be getting to) generate static sites using the Next.js framework‚Ä¶ chances are that what is in these repositories is suggestive of at least a part of what‚Äôs going on behind-the-scenes with Super and Potion.\nMy understanding from exchanges with support at both Super and Potion is that there are differences in the implementation details ‚Äî there are definitely visible differences that indicate this too, and apparently Super is more closely-knit into the Notion API, but I am not sure what to make of that just yet‚Ä¶ it possibly makes their implementation a little less vulnerable to being broken by updates at Notion‚Äôs end, but I don‚Äôt know enough to say this for sure.\n\n\nSuper\nSuper (on ProductHunt), built by @Traf and @TrillCyborg (Jason Werner) appears to be one of the leading options in terms of a no-code way of porting a Notion page to a website. This will set you back $12/site/month; but you get a substantial feature set in return:\n\nI should point out that some Super templates are premium and will cost separately, but there are some really nice free ones that you can run with right away. One that I really liked happens to be free and is in use on the website I have for my courses. I had a completely painless setup experience and very responsive support on the minor things that I did get stuck on (h/t: @camincoll).\nSites made with Super are performant, SEO-friendly, and fairly customizable. There are only two minor snags I ran into with Super: one is that updates on Notion take some time to reflect on the website (typically a minute or so ‚Äî this is no big deal in general, but it‚Äôs just not real-time, and can feel slow while in testing and development). The other is that their terms of service seem a bit unusually restrictive ‚Äî for instance, see the discussion initiated by @kulikalov here:\n\n\nThat's a shaky foundation to work with @super_ üòê pic.twitter.com/yYQYuGZk3u\n\n‚Äî Anton Kulikalov üá∫üá¶ (@kulikalov) August 27, 2021\n\n\n\nüí° At $12/site/month Super is the most expensive option on this list, but if the combination of performance and convenience is what you are looking for, you might find that it is totally worth it.\n\nFrom Super‚Äôs responses in this conversation, I am optimistic that the ToS will change for the better. From my direct experience, my instinct is that there isn‚Äôt really anything to worry about here, but if you are someone who cares about the fine print, this is an aspect you might want to be aware of.\n\n\nPotion\nFinally, we have Potion (on ProductHunt), made by @noahwbragg (Noah Bragg), which is yet another way of getting a static site out of your Notion content in a fairly straightforward way:\n\n\nüí° While oversimplified, it is tempting to summarize Potion‚Äôs offering as ‚ÄúSuper, but cheaper‚Äù. See the next section for a more detailed discussion of differences and similarities between the two. Overall, Potion has a very similar feature set and is slightly more affordable in comparison ‚Äî definitely worth checking out the same way that Super is.\n\nThe pricing is a bit different from Super ‚Äî it can cost you as little as $6.25/site/month on their 8-sites plan, which will set you back $50/month, and the other two possibilities are $10/month for one site or $25/month for three.\nIn terms of what it does, it feels rather similar to Super, but as I mentioned earlier, I think there are differences in the actual implementation. In particular, one difference that is conspicuous is the way Potion renders changes ‚Äî much like what happens with Notion‚Äôs own public pages, the rendering of changes with Potion happens practically in real-time. This is very helpful, especially when you are working on quick edits, or are testing things out.\nMany other features are at par with Super: the sites created by Potion appear to be equally performant and SEO-friendly; and sites on Potion are customizable in almost the same ways.\nThis page (and the whole blog) is rendered with Potion. Like Super, setup was largely frictionless and I had prompt help whenever I needed it. Potion also has a bunch of templates that work out of the box ‚Äî a couple of which are premium ‚Äî but the vast majority of them are available for free and already there are some fairly nice options.\n\n\nPotion v/s Super\nGiven the similarities between Potion and Super, I felt it was worth having a separate discussion comparing the two, and I felt like I could do a brief take on this given that I‚Äôve spent a fair amount of time trying out both and being conflicted about which one to go with! As you can probably tell if you read this far, I could not positively conclude one way or the other, so my setups are split between the two at the moment, and it‚Äôll probably stay this way for a while now üòÄ\nBack to the comparison ‚Äî there are a few differences on the minor features, here are a couple of examples off the top of my head:\n\nSuper allows password protection on individual pages, on Potion it‚Äôs all-or-none (at least at the time of this writing).\nPotion automatically generates preview images based on titles ‚Äî this is what shows up when you share a link on, say, Twitter or Discord or WhatsApp. It does this automatically for all pages, even ones within databases.\nI could not get jquery to work in Potion (from trying very briefly), but it worked out fine on Super.\nSuper has a community forum and an arguably restrictive ToS. Potion has neither at the time of this writing.\nPotion‚Äôs dashboard has a live preview editor which lets you make simple changes to the CSS and preview them real-time ‚Äî this may not be something you use often if you have made sophisticated customizations, but for quick edits to the default templates, it‚Äôs very handy:\n\n\nSuper has a great dashboard too, there‚Äôs a page-by-page breakup on the sidebar and a live preview of the site to the right, which shows up even when the individual pages are password-protected (by design):\n\n\nIn terms of custom code, a small difference is that Super allows you to insert your own content inside both the <head> and <body> tags while Potion is restricted to just the <head> tag. That said, additional possibilities for custom code injection are on Potion‚Äôs roadmap.\nThere are differences of implementation under the hood, but I am not aware of the exact details here. Super uses the Notion API and a Content Delivery Network (CDN) - this explains why changes take 1-2 mins to flow through from Notion in Super automatically, but what it does get you is reliable performance at scale. Potion uses Vercel for hosting and generates static sites that feel fast and robust, and also uses a CDN.\n\nHere are some of the things that I think work out rather similarly on both platforms:\n\nAccessible and very friendly support ü§©\nConvenient to setup and use.\nSEO, pretty URLs, custom domains, pretty-URLs, and mostly performant websites.\nCustomized output thanks to the ability to insert your own scripts and CSS.\nPromising roadmaps on both with exciting features on the way üéâ\nBoth options seem generally reliable - I have been monitoring my websites using Fathom and I‚Äôve had a few downtimes reported here and there from both platforms. There was nothing that lasted more than a few minutes at a time. Because both Super and Potion use a CDN, it turns out that even if these services go down, hopefully the sites will still be served as usual.\nYou will find that both have great feedback on ProductHunt (and possibly other platforms too, but PH is the one I‚Äôm familiar with).\n\n\n\nShould you use Notion for your website at all?\nWell. In general, if future-proofness is crazy important to you, and you want complete control over how your website renders down to the last pixel ‚Äî then you might want to consider looking beyond Notion.\n\n\n\n\n\n\nNote\n\n\n\nIndeed, these are early days, in some sense even for Notion, and much more so for all the options listed here. A few ways of turning Notion content into websites have come-and-gone, and that, I think, is in the nature of this kind of a setup.\nAt the moment, all options here other than the native Notion setup will have some obligation to keeping up with changes from the Notion side. I think most options are doing great on this front ‚Äî as a recent example that comes to mind, globally synced blocks were supported shortly on all platforms after release (you do have to make sure that the pages on which such blocks originate have public access permissions).\nI am definitely keeping my fingers crossed for the long-term viability of these options ü§û Until then, I‚Äôm looking forward to enjoying the convenience of being able to work on my website(s) without getting out of Notion at all, at least hopefully not very much üòé\nIncidentally, Notion‚Äôs markdown export is pretty good too, so you could just keep markdown versions of your work as you go along, so in case you decide to port things over into a more direct SSG setup in the future, it would be relatively painless to do.\n\n\nAssuming you are all-in on using Notion for delivering your website, then here‚Äôs a summary of your options:\n\nIf you are looking for a free setup:\n\nIf need to use custom domains, and need sites that look and behave like regular websites, then you might want to check out react-notion-x or nextjs-notion-starterkit if you are an expert, but otherwise, the Notion route may not be the best for you.\nIf you are already a Notion user and you just need a URL with content that can go around for a super-specific purpose (i.e, website-y features not so crucial) ‚Äî you can likely just use Notion‚Äôs default facility with a public URL.\n\nIf you have a budget that is compatible with Super and/or Potion, I would definitely recommend either of them - they are both great solutions in this context! There are some nuances in terms of how they are different (e.g, pricing; Super‚Äôs apparently deeper integration with the Notion API v/s Potion‚Äôs real-time implementation, etc.), and if that level of detail is important to you, you might need to try out both ‚Äî which is fortunately easy to do ‚Äî before deciding.\n\n\n\nOther ways of getting a website out of Notion?\nThere are a few options that I didn‚Äôt cover here, including, for example, Notion2Blog, Notion Dog, Notelet, Nocodepages (now defunct), and a couple of others that I did evaluate ‚Äî at least briefly ‚Äî but I unfortunately can‚Äôt remember any more. If you know of other examples, please let me know and I‚Äôll be happy to append them to this list here!\n\n\nüí° Please share your comments on Twitter @neeldhara. Also, special thanks to @camincoll and @noahwbragg for their inputs and help with Super and Potion, respectively! üëãüèΩ"
  },
  {
    "objectID": "dsanotes.html",
    "href": "dsanotes.html",
    "title": "Notes on Data Structures and Algorithms",
    "section": "",
    "text": "Work in progress\n\n\n\nüëãüèΩ I am in the process of porting things over from an older setup. This site may therefore be rather rough around the edges.\n\n\n\n¬†\n\n\n\n\n\n\n\n\n\n\n\n\nData Structures and Structured Data\n\n\n\n\n\n\n\n\n\nAug 1, 2022\n\n\n11 min\n\n\n\n\n\n\n\n\nRepresenting Sequences\n\n\n\n\n\n\n\n\n\nAug 2, 2022\n\n\n8 min\n\n\n\n\n\n\n\n\nRepresenting Graphs\n\n\n\n\n\n\n\n\n\nAug 10, 2022\n\n\n12 min\n\n\n\n\n\n\n\n\nWalking Around via Euler Tours\n\n\n\n\n\n\n\n\n\nSep 9, 2022\n\n\n11 min\n\n\n\n\n\n\n\n\nOn Cards and Graphs\n\n\n\n\n\n\n\n\n\nSep 11, 2022\n\n\n11 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "archive.html",
    "href": "archive.html",
    "title": "Archive",
    "section": "",
    "text": "Oct 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 19, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 5, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAug 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAug 2, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAug 1, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 1, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 24, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 21, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 19, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 18, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 12, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 25, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 23, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 14, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 11, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMar 11, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSep 11, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJun 12, 2018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApr 23, 2012\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJan 5, 2011\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2010\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApr 3, 2007\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 3, 2005\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Pseudorandom Musings",
    "section": "",
    "text": "Heads up: I write with both prerequisites unfulfiled. Proceed with caution.\n\n\n\n\n\n\n\nCollections\n\n\n\nCompetitive Programming ‚∏± Data Structures and Algorithms ‚∏± Puzzles from TGIF meetups ‚∏± Poems\n\n\n\n\n\n\n\n\n\nWork in progress\n\n\n\nüëãüèΩ I am in the process of porting things over from an older setup. This site may therefore be rather rough around the edges.\n\n\n\n¬†\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nHat Puzzles\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nOct 7, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nAB Separation\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nOct 7, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nFolding Stamps\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nOct 7, 2022\n\n\n0 min\n\n\n\n\n\n\n\n\nMaking Grids\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nOct 7, 2022\n\n\n0 min\n\n\n\n\n\n\n\n\nIwahiro‚Äôs Square in Bag Puzzle\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nOct 7, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\n2022 Exportober Tracker\n\n\n\n\n\n\n\nexportober\n\n\nfunda\n\n\n \n\n\n\n\nOct 7, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\nSKJ\n\n\n\n\n\n\n\niitgn\n\n\n \n\n\n\n\nSep 23, 2022\n\n\n3 min\n\n\n\n\n\n\n\n\nExternal Communications\n\n\n\n\n\n\n\niitgn\n\n\n \n\n\n\n\nSep 23, 2022\n\n\n12 min\n\n\n\n\n\n\n\n\nDog Bunny Puzzle\n\n\n\n\n\n\n\npuzzles\n\n\nexposition\n\n\n \n\n\n\n\nSep 19, 2022\n\n\n7 min\n\n\n\n\n\n\n\n\nOn Cards and Graphs\n\n\n\n\n\n\n\ndsanotes\n\n\nlecturenotes\n\n\n \n\n\n\n\nSep 11, 2022\n\n\n11 min\n\n\n\n\n\n\n\n\nWalking Around via Euler Tours\n\n\n\n\n\n\n\ndsanotes\n\n\nlecturenotes\n\n\n \n\n\n\n\nSep 9, 2022\n\n\n11 min\n\n\n\n\n\n\n\n\nOn Teaching\n\n\n\n\n\n\n\nfunda\n\n\n \n\n\n\n\nSep 5, 2022\n\n\n7 min\n\n\n\n\n\n\n\n\nRepresenting Graphs\n\n\n\n\n\n\n\ndsanotes\n\n\nlecturenotes\n\n\n \n\n\n\n\nAug 10, 2022\n\n\n12 min\n\n\n\n\n\n\n\n\nRepresenting Sequences\n\n\n\n\n\n\n\ndsanotes\n\n\nlecturenotes\n\n\n \n\n\n\n\nAug 2, 2022\n\n\n8 min\n\n\n\n\n\n\n\n\nData Structures and Structured Data\n\n\n\n\n\n\n\ndsanotes\n\n\nlecturenotes\n\n\n \n\n\n\n\nAug 1, 2022\n\n\n11 min\n\n\n\n\n\n\n\n\nSolo Chess\n\n\n\n\n\n\n\nexposition\n\n\ntwitterthread\n\n\n \n\n\n\n\nMar 24, 2022\n\n\n4 min\n\n\n\n\n\n\n\n\nEight Self-Sabotaging Behaviors\n\n\n\n\n\n\n\nfunda\n\n\ntwitterthread\n\n\n \n\n\n\n\nMar 15, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nKidney Exchanges\n\n\n\n\n\n\n\nexposition\n\n\n \n\n\n\n\nFeb 25, 2022\n\n\n8 min\n\n\n\n\n\n\n\n\nWomen in Mathematics\n\n\n\n\n\n\n\nbooks\n\n\nlist\n\n\n \n\n\n\n\nFeb 21, 2022\n\n\n2 min\n\n\n\n\n\n\n\n\nOn the Communication Complexity of Equality\n\n\n\n\n\n\n\nsketchnotes\n\n\nlecturenotes\n\n\n \n\n\n\n\nOct 4, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nTwo approaches to the 15 puzzle\n\n\n\n\n\n\n\npuzzles\n\n\nexposition\n\n\n \n\n\n\n\nOct 3, 2021\n\n\n10 min\n\n\n\n\n\n\n\n\nSam I Am\n\n\n\n\n\n\n\ncp\n\n\nlecturenotes\n\n\n \n\n\n\n\nOct 1, 2021\n\n\n9 min\n\n\n\n\n\n\n\n\nNew Mac\n\n\n\n\n\n\n\napps\n\n\nlist\n\n\n \n\n\n\n\nSep 30, 2021\n\n\n10 min\n\n\n\n\n\n\n\n\n2021 Exportober Tracker\n\n\n\n\n\n\n\nexportober\n\n\nfunda\n\n\n \n\n\n\n\nSep 25, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nAbout Exportober\n\n\n\n\n\n\n\nexportober\n\n\nfunda\n\n\n \n\n\n\n\nSep 24, 2021\n\n\n6 min\n\n\n\n\n\n\n\n\nMoving Blocks at CTIS 2021\n\n\n\n\n\n\n\npuzzles\n\n\nexposition\n\n\n \n\n\n\n\nSep 21, 2021\n\n\n3 min\n\n\n\n\n\n\n\n\nAn Invitation to Exportober 2021\n\n\n\n\n\n\n\nexportober\n\n\nfunda\n\n\n \n\n\n\n\nSep 19, 2021\n\n\n3 min\n\n\n\n\n\n\n\n\nEnvelope Budgeting with Notion\n\n\n\n\n\n\n\nnotion\n\n\nworkflows\n\n\ntutorial\n\n\n \n\n\n\n\nSep 18, 2021\n\n\n19 min\n\n\n\n\n\n\n\n\nActually Building a Website with Notion\n\n\n\n\n\n\n\nnotion\n\n\nworkflows\n\n\nwebsites\n\n\n \n\n\n\n\nSep 12, 2021\n\n\n9 min\n\n\n\n\n\n\n\n\nNotion-powered websites\n\n\n\n\n\n\n\nnotion\n\n\nworkflows\n\n\nwebsites\n\n\n \n\n\n\n\nSep 11, 2021\n\n\n14 min\n\n\n\n\n\n\n\n\nTurn the LED on\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 25, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\n4 Person Gift Exchange\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 25, 2021\n\n\n2 min\n\n\n\n\n\n\n\n\nConway‚Äôs Checkers\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 23, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nCoin Tossing\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 23, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nEstimating Pi\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 15, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nComing to Agreement\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 15, 2021\n\n\n2 min\n\n\n\n\n\n\n\n\nDeath‚Äôs Dice\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 15, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nFind The Puppy\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 14, 2021\n\n\n3 min\n\n\n\n\n\n\n\n\nThe Blue-Eyed Islanders\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 11, 2021\n\n\n0 min\n\n\n\n\n\n\n\n\nLighting Up a Grid\n\n\n\n\n\n\n\npuzzles\n\n\ntgif\n\n\n \n\n\n\n\nMar 11, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nMassren for fast file renaming\n\n\n\n\n\n\n\nworkflows\n\n\n \n\n\n\n\nSep 11, 2020\n\n\n0 min\n\n\n\n\n\n\n\n\nBuilding a first Django App\n\n\n\n\n\n\n\ntutorial\n\n\nwebsites\n\n\n \n\n\n\n\nJun 12, 2018\n\n\n12 min\n\n\n\n\n\n\n\n\nOn the Fence\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nApr 23, 2012\n\n\n0 min\n\n\n\n\n\n\n\n\nSprinkles of the Sky\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nJan 5, 2011\n\n\n0 min\n\n\n\n\n\n\n\n\nHow Expensive Can Homework Help Be?\n\n\n\n\n\n\n\nexposition\n\n\nparameterized-algorithms\n\n\n \n\n\n\n\nMay 1, 2010\n\n\n5 min\n\n\n\n\n\n\n\n\nSeek\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nApr 3, 2007\n\n\n0 min\n\n\n\n\n\n\n\n\nBloom\n\n\n\n\n\n\n\npoem\n\n\n \n\n\n\n\nFeb 3, 2005\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "cp.html",
    "href": "cp.html",
    "title": "Notes on Competitive Programming",
    "section": "",
    "text": "Work in progress\n\n\n\nüëãüèΩ I am in the process of porting things over from an older setup. This site may therefore be rather rough around the edges.\n\n\n\n¬†\n\n\n\n\n\n\n\n\n\n\n\n\nSam I Am\n\n\n\n\n\n\n\n\n\nOct 1, 2021\n\n\n9 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "exportober.html",
    "href": "exportober.html",
    "title": "Exportober",
    "section": "",
    "text": "Work in progress\n\n\n\nüëãüèΩ I am in the process of porting things over from an older setup. This site may therefore be rather rough around the edges.\n\n\n\n¬†\n\n\n\n\n\n\n\n\n\n\n\n\n2022 Exportober Tracker\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\n1 min\n\n\n\n\n\n\n\n\n2021 Exportober Tracker\n\n\n\n\n\n\n\n\n\nSep 25, 2021\n\n\n1 min\n\n\n\n\n\n\n\n\nAbout Exportober\n\n\n\n\n\n\n\n\n\nSep 24, 2021\n\n\n6 min\n\n\n\n\n\n\n\n\nAn Invitation to Exportober 2021\n\n\n\n\n\n\n\n\n\nSep 19, 2021\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  }
]