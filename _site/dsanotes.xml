<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Pseudorandom Musings</title>
<link>https://neeldhara.blog/dsanotes.html</link>
<atom:link href="https://neeldhara.blog/dsanotes.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.1.189</generator>
<lastBuildDate>Sat, 10 Sep 2022 18:30:00 GMT</lastBuildDate>
<item>
  <title>On Cards and Graphs</title>
  <link>https://neeldhara.blog/posts/dsanotes/debruijn/index.html</link>
  <description><![CDATA[ 




<section id="of-cards-and-graphs-de-bruijn-seuqences" class="level1 page-columns page-full">
<h1>Of Cards and Graphs: de Bruijn seuqences</h1>
<p><a href="https://slides.com/neeldhara/dsa1-w04#/1/2">Link to slides</a></p>
<p><a href="https://twitter.com/neeldhara/status/1569407947100266499">Link to a Tweet thread summarizing these notes</a></p>
<p>Before we talk about exploring graphs, we will take a small detour to throw in some motivation. In our discussion here we will establish that knowing how to go around a graph can meaningfully help us pull off a spectacular card trick. I trust that this should leave us sufficiently interested in finding out how we can actually find those Euler tours, which is our next stop.</p>
<section id="the-trick" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-trick">The Trick</h2>
<ul>
<li><p>A deck with 32 cards is given to someone in the audience.</p></li>
<li><p>Any number of <em>cut shuffles</em><sup>1</sup> are done.</p></li>
<li><p>Once the audience is satisfied that the deck is suitably shuffled, it is passed to someone, say P, from where the following happens:</p>
<pre class="plaintext"><code>P takes the top card and passes the deck to the next person (Q).
Q takes the top card and passes the deck to the next person (R).
R takes the top card and passes the deck to the next person (S).
S takes the top card and passes the deck to the next person (T).</code></pre></li>
<li><p>All five people look at their cards without revealing them to anyone else.</p></li>
<li><p>Those who got red cards are requested to stand up.</p></li>
<li><p>All cards are identified.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;A cut shuffle involves taking some number of cards from the top of the deck, placing them on the table, and then placing the rest of the deck on top of them. So if the stack has cards 1,2,3,4,5 from bottom to top, then it will look like 4,5,1,2,3 after a cut shuffle with two cards shaved off the top.</p></li></div></section>
<section id="behind-the-scenes" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="behind-the-scenes">Behind the scenes</h2>
<p>Interpreting reds as 1’s and blacks as 0’s, any sequence of five cards is a signal: a bitstring of length 5. This is — at least in principle — enough to ID one of the cards in a 32-card deck, for sure. But to ID the next five cards too? Wow!</p>
<p>So to begin with, let’s just focus on ID-ing card. The deck, of course, is setup: the cards appear in a specific order, one whose relevant properties are unperturbed by cut shuffles. Note that we have no control over how many times the deck is cut, so the top card could be effectively anywhere in from the original sequence. So what we need is a sequence of 32 bits:</p>
<p><img src="https://latex.codecogs.com/png.latex?b_0,%20b_1,%20%5Cldots,%20b_i,%20%5Cldots,%20b_%7B31%7D"></p>
<div class="page-columns page-full"><p>with the following property. For any <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5C%7B0,%5Cldots,31%5C%7D">, if <img src="https://latex.codecogs.com/png.latex?B_i"> denotes<sup>2</sup> the substring:</p><div class="no-row-height column-margin column-container"><li id="fn2"><p><sup>2</sup>&nbsp;subscripts are mod 32</p></li></div></div>
<p><img src="https://latex.codecogs.com/png.latex?b_%7Bi%7D,%20b_%7Bi+1%7D,%20b_%7Bi+2%7D,%20b_%7Bi+3%7D,%20b_%7Bi+4%7D,"></p>
<p>then we would very much like that <img src="https://latex.codecogs.com/png.latex?b_i%20%5Cneq%20b_j"> whenever <img src="https://latex.codecogs.com/png.latex?i%20%5Cneq%20j">. This ensures that no matter how many times the deck is cut, when the members of the audience with the red cards stand up, we have a clean and unambiguous signal, which we can pre-relate by our powers of rote memory to the card at position <img src="https://latex.codecogs.com/png.latex?i"> in said sequence. Because subscripts are read mod 32, note that this is really all we need. For example, here’s a seuquence that does happen to have the property we are after:</p>
<blockquote class="blockquote">
<p>00000100101100111110001101110101</p>
</blockquote>
<p>The diagram below shows why cut shuffles still result in sequences where the signal from any location continues to be unique, and in some sense, <em>invariant</em> across shuffles: suppose a position <img src="https://latex.codecogs.com/png.latex?x"> corresponds to a certain signal <img src="https://latex.codecogs.com/png.latex?S_x"> before a cut shuffle, then after a cut shuffle, if position <img src="https://latex.codecogs.com/png.latex?x"> shifts to <img src="https://latex.codecogs.com/png.latex?y">, then <img src="https://latex.codecogs.com/png.latex?S_y%20=%20S_x">. Note that this would <em>not</em> be true if someone, say, enthusiastically riffle shuffled the pack — so do make sure to prevent this at all cost.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch5-cutshuffleex.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Examples of cut shuffles and why they don’t affect the addressing technique. The first column shows the original sequence, the second shows the proposed cut, and the last shows the final sequence after the cut shuffle is excecuted.</figcaption><p></p>
</figure>
</div>
<p>This property makes the sequence a robust device for card discovery: we simply associate a specific card with every 5-length bit string, and position the card corresponding to <img src="https://latex.codecogs.com/png.latex?b_i"> at location <img src="https://latex.codecogs.com/png.latex?i">. By knowing the signature corresponding to the top five cards after any number of cut shuffles, you know where this signal appeared in the original sequence, and by turdging further along in the sequence, you also know the signals for the next five cards.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
You perhaps see now how you can perform the entire trick:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>memorize the sequence <code>00000100101100111110001101110101</code></li>
<li>associate† a card with each bit-string of length 5</li>
<li>memorize said association</li>
<li>place cards as dictated by the sequence and given by the association</li>
<li>profit and/or impress</li>
</ul>
<p>† Note that the association has to respect the semantics of the bitstring: so the <strong>1-positions get red cards and the 0-positions get black</strong> (or the other way round if you please, so long as you are consistent in your conventions throughout).</p>
</div>
</div>
<p>Notice that once you can read off one card, having committed the seuqence and the association to memory, you can also read off any of the cards after that. This does seem like a lot of memorizing, but it’s worth it for the impact.</p>
</section>
<section id="mnemonic-improvements-for-an-actual-performance" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="mnemonic-improvements-for-an-actual-performance">Mnemonic improvements for an actual performance</h2>
<p>If you want to make your life easier, you could use an association that is easy to remember:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch5-dictionary.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A useful dictionary between 5-bit strings and cards from a standard deck of cards</figcaption><p></p>
</figure>
</div>
<p>So getting to the first card is quite straightforward already:</p>
<ul>
<li>If the first person is seated, they have a black card, and otherwise they have a red card. But this is immediate anyway from the convention, so not particularly impressive to point out.
<ul>
<li>When the card is black: if the second person is seated, it is a ♣, otherwise a ♠.</li>
<li>When the card is red: if the second person is seated, it is a ⬥, otherwise a ♥.</li>
</ul></li>
<li>Finally, the value of the card is just translating the last three bits to their value in decimal (remembering to map all zeroes to eight).</li>
</ul>
<p>If you want to really impress with the next four, you could just memorize the whole sequence, but to avoid visible murmuring, you can also exploit a handy feature of this particular sequence that helps you navigate it with only a little bit of mental math.</p>
<div class="page-columns page-full"><p>It turns out that if you know <img src="https://latex.codecogs.com/png.latex?b_i"> (which you do based on who stands up), you can obtain the next bit (i.e, the sixth bit relative to the start of <img src="https://latex.codecogs.com/png.latex?b_i">) in the sequence by simply adding the first and third bits from <img src="https://latex.codecogs.com/png.latex?b_i">. In other words, the sequence has the following nice pattern: standing anywhere, you can obtain the next bit by taking the sum (mod 2) of the bits that are three and five bits behind wherever you are standing. Go on, verify this for yourself!<sup>3</sup></p><div class="no-row-height column-margin column-container"><li id="fn3"><p><sup>3</sup>&nbsp;If you do, you’ll find this is not quite true at the fourth and fifth positions. The claimactually works if you drop any one of the leading <code>0</code>’s, e.g.&nbsp;the first one. This gives you a sequence of 31 cards to work with which have this nice pattern. If you want to be a purist, though, you can commit this exception to memory.</p></li></div></div>
</section>
<section id="de-bruijn-sequences" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="de-bruijn-sequences">de Bruijn Sequences</h2>
<p>So how does this lovely self-working card-trick fit, even if as a detour, into our discussion about graphs?</p>
<p>Let’s step back for a bit. We pulled out the driver of this whole setup, the sequence:</p>
<blockquote class="blockquote">
<p>00000100101100111110001101110101</p>
</blockquote>
<div class="page-columns page-full"><p>much like a real magician pulls out a real rabbit from a real hat. You very likely raised an eyebrow and wondered about where this sequence came from. It’s a useful exercise to experiment with coming up with one, even if by means of ad-hoc scribbling. As a warmup, it’s worth trying to find one of length eight, where every 3-bit string occurs exactly once<sup>4</sup>.</p><div class="no-row-height column-margin column-container"><li id="fn4"><p><sup>4</sup>&nbsp;Apparently the Sanskrit sutra <em>yamätärajabhänasalagam</em> (and variants thereof), which describes all possible triplets of short and long syllables, is considered evidence that such sequences were known in India from a while ago. Sanskrit meters are based on the system of short (laghu) and long (guru) syllables, and you might count this as a hint for the exercise here. If you are curious about the history of the sutra, look no further than <a href="https://web.archive.org/web/20141029120230/http://202.41.82.144/rawdataupload/upload/insa/INSA_2/200059d2_123.pdf">this article</a>.</p></li></div></div>
<p>It turns out that such sequences are in fact <a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence">rather well-studied</a>, and one way of generating them involves taking a walk in an appropriate graph! In particular, let us go back to our original task of generating a 32-bit sequence like the one shown above, except that we are on our own this time. Consider a graph where we have:</p>
<ul>
<li>a vertex for every bit string of length <em>four</em>, and let us say that the bit string associated with a vertex <img src="https://latex.codecogs.com/png.latex?u"> is denoted by <img src="https://latex.codecogs.com/png.latex?b_u">; and</li>
<li>an edge from <img src="https://latex.codecogs.com/png.latex?u"> to <img src="https://latex.codecogs.com/png.latex?v"> if the corresponding bit strings are all but the same: i.e, the 3-length suffix of <img src="https://latex.codecogs.com/png.latex?u"> is the same as the <img src="https://latex.codecogs.com/png.latex?3">-length prefix of <img src="https://latex.codecogs.com/png.latex?v">.</li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
If you want to take a look at the graph, it’s right here…
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>…although a bit of a monstrosity!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch5-debruijngraph.png" class="img-fluid figure-img" style="width:75.0%"></p>
<p></p><figcaption class="figure-caption">The de Bruijn graph of order 4</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>The following properties are worth thinking about:</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
the total number of vertices is _____
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>One for every bit string of length four, so sixteen.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
every vertex has indegree and outdegree _____
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Fix a vertex <img src="https://latex.codecogs.com/png.latex?v"> and let <img src="https://latex.codecogs.com/png.latex?s_v"> denote the last three bits of <img src="https://latex.codecogs.com/png.latex?v">. The only outgoing edges are to vertices that represent the bit strings <img src="https://latex.codecogs.com/png.latex?s_v"><code>0</code> and <img src="https://latex.codecogs.com/png.latex?s_v"><code>1</code>.</p>
<p>Fix a vertex <img src="https://latex.codecogs.com/png.latex?v"> and let <img src="https://latex.codecogs.com/png.latex?p_v"> denote the first three bits of <img src="https://latex.codecogs.com/png.latex?v">. The only incoming edges are from vertices that represent the bit strings <code>0</code><img src="https://latex.codecogs.com/png.latex?p_v"> and <code>1</code><img src="https://latex.codecogs.com/png.latex?p_v">.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
the total number of edges is _____
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There are sixteen vertices and each of them has outdegree two, so the total number of edges is <img src="https://latex.codecogs.com/png.latex?32">. Does that ring a bell yet?</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
there are exactly _____ self-loops
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Consider a vertex <img src="https://latex.codecogs.com/png.latex?v">. Let the bit string associated with <img src="https://latex.codecogs.com/png.latex?v"> be denoted by <code>WXYZ</code>. For <img src="https://latex.codecogs.com/png.latex?v"> to be adjacent to itself, we will need <code>XYZ = WXY</code>, which implies that <code>W = X</code>, <code>X = Y</code>, <code>Y = Z</code>.</p>
<p>So if <code>W = 1</code>, then we have that <code>WXYZ = 1111</code> and if <code>W = 0</code> then we have <code>WXYZ = 0000</code>.</p>
<p>These are the only two possible scenarios, so our graph has exactly two self-loops.</p>
</div>
</div>
</div>
<div class="page-columns page-full"><p>If you were to take an Euler tour in this graph, i.e, walk around visiting every edge exactly once, then it very naturally spells out a sequence as follows. Start with an empty string. Now as you move around, going from the vertex <img src="https://latex.codecogs.com/png.latex?u"> to <img src="https://latex.codecogs.com/png.latex?v"> along the edge <img src="https://latex.codecogs.com/png.latex?(u,v)"> amounts to essentially “seeing one new bit”: recall that the suffix of <img src="https://latex.codecogs.com/png.latex?u"> almost fully eats up the prefix of <img src="https://latex.codecogs.com/png.latex?v">, leaving one new bit to observe, which <em>is what we tag on to our sequence</em>. Once you have traveled along every edge exactly once, you’ve collected exactly 32 bits, so we have written out a sequence of length 32 by the time we are done<sup>5</sup>.</p><div class="no-row-height column-margin column-container"><li id="fn5"><p><sup>5</sup>&nbsp;If edges were 1km roads, we would have been just 10km shy of a full marathon.</p></li></div></div>
<div class="page-columns page-full"><p>Now: our somewhat outrageous claim is that this infact is a valid de Bruijn sequence! Given that we have written out exactly 32 bits, it is enough to show that any bit sequence of length 5 shows up as a substring in this sequence starting from some position. The main intuition here is the following: suppose you want to “see” the bitstring <code>PQRST</code> in your sequence. Well, at some point in our walk on the graph, we moved from the vertex representing <code>PQRS</code> to the one representing <code>QRST</code><sup>6</sup>. This made us add <code>T</code> to whatever sequence we had so far. Let’s rewind our walk a bit and see what happened in the last few steps too:</p><div class="no-row-height column-margin column-container"><li id="fn6"><p><sup>6</sup>&nbsp;Indeed, this must have happened at some point, since we visit every edge exactly once.</p></li></div></div>
<p><code>LMNO</code> → <code>MNOP</code> → <code>NOPQ</code> → <code>OPQR</code> → <code>PQRS</code> → <code>QRST</code></p>
<p>Retracing our steps, here are the bits that would have been triggered by this walk: <code>PQRST</code>, and thus we are almost done. You might say: perhaps the edge from the vertex representing <code>PQRS</code> to the one representing <code>QRST</code> was taken very early on, at the start of the tour, so we don’t have these many steps to retrace: but here’s the thing — we are on a <em>tour</em>, so you can continue walking back past your starting point and the sequence would still have this overall form: it’s just that a few of those bits would be written at the end, rather than at the start, and that just means that we can find our substring wrapped around the end, which is a perfectly valid place to discover it.</p>
<p>Notice that there was nothing special about this whole process and the numbers four and five: you can generate so-called “de Bruijn sequences of order <img src="https://latex.codecogs.com/png.latex?k">”, which are bitstrings of length <img src="https://latex.codecogs.com/png.latex?2%5Ek"> with the property that every <img src="https://latex.codecogs.com/png.latex?k">-bit string appears exactly once in the sequence as a substring (including wraparoudns), using exactly the same idea.</p>
<p>So you should be convinced by now — perhaps after reflecting for a moment or two — that de Bruijn sequences of any order in fact exist, which is not obvious at all from the definition. It turns out that there are actually quite a few of them: <img src="https://latex.codecogs.com/png.latex?2%5E%7B2%5E%7Bk-1%7D-k%7D">, to be precise, a formula we know thanks to de Bruijn, after whom the sequences are named.</p>
<p>You might wonder if there are other ways of coming up with these sequences, or possibly even enumerating them. These discussions are unfortunately out of scope, but there are several excellent resources for the curious. Much of these notes are based on the third chapter of the book <a href="https://www.amazon.in/Magical-Mathematics-Mathematical-Animate-Tricks/dp/0691169772">Magical Mathematics: The Mathematical Ideas That Animate Great Magic Tricks</a> which is a treasure of a book. Paraphrasing from this chapter, here is a little about the people behind this trick:</p>
<blockquote class="blockquote">
<p>The origins of this trick go back to Charles T. Jordan in 1919, and the original version required a color pattern of length 6 to identify all the cards. Later William Larson and T. Page Wright came up with another variant involving 52 cards, and 3 people revealing the suits being enough for the magician to pick up the values. In the 1960s, Karl Fulves and, separately, P. Diaconis working with the chemist Ronald Wohl, derived dozens of tricks based on variations and extensions of Jordan’s idea.</p>
</blockquote>


</section>
</section>


 ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/debruijn/index.html</guid>
  <pubDate>Sat, 10 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/figures/ch5-cutshuffleex.png" medium="image" type="image/png" height="185" width="144"/>
</item>
<item>
  <title>Walking Around via Euler Tours</title>
  <link>https://neeldhara.blog/posts/dsanotes/eulertours/index.html</link>
  <description><![CDATA[ 




<p>We revisit the following problem from our introduction to graphs:</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The Problem
</div>
</div>
<div class="callout-body-container callout-body">
<p>The city of Königsberg in Prussia (now Kaliningrad, Russia) was set on both sides of the Pregel River, and included two large islands—Kneiphof and Lomse—which were connected to each other, and to the two mainland portions of the city, by seven bridges.</p>
<p>Devise a walk through the city that would cross each of those bridges once and only once. Try this yourself on a few different maps at <a href="https://mathigon.org/course/graph-theory/bridges">Mathigon</a>!</p>
</div>
</div>
<p>We also found such traversals useful for computing de Bruijn sequences, so between success on city exploration challenges and impressing with card tricks, there is plenty of motivation to take an Euler tour in a graph.</p>
<p>In general, we are given a directed or undirected graph <img src="https://latex.codecogs.com/png.latex?G%20=%20(V,E)"> and we want to know if there is a sequence of edges:</p>
<p><img src="https://latex.codecogs.com/png.latex?W%20:=%20e_0%20=%20(u_0,v_0),%20%5Cldots,%20e_%7Bm-1%7D%20=%20(u_%7Bm-1%7D,v_%7Bm-1%7D)"></p>
<p>such that <img src="https://latex.codecogs.com/png.latex?v_i%20=%20u_%7Bi+1%20%5Cmod%20m%7D"> for all <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5C%7B0,1,%5Cldots,m-1%5C%7D">, and every edge in <img src="https://latex.codecogs.com/png.latex?E"> features <em>exactly once</em> in this sequence.</p>
<section id="necessary-and-sufficient-conditions" class="level2">
<h2 class="anchored" data-anchor-id="necessary-and-sufficient-conditions">Necessary and sufficient conditions</h2>
<p>Note that if such a sequence does exist for a directed graph <img src="https://latex.codecogs.com/png.latex?G">, then the indegree of every vertex must equal its outdegree, i.e:</p>
<blockquote class="blockquote">
<p>indegree<img src="https://latex.codecogs.com/png.latex?(v)"> = outdegree<img src="https://latex.codecogs.com/png.latex?(v)"> for all <img src="https://latex.codecogs.com/png.latex?v%20%5Cin%20V">.</p>
</blockquote>
<p>Likewise, if such a sequence exists for an undirected graph <img src="https://latex.codecogs.com/png.latex?G">, then every vertex must have even degree:</p>
<blockquote class="blockquote">
<p>degree<img src="https://latex.codecogs.com/png.latex?(v)%20=%202k_v"> for all <img src="https://latex.codecogs.com/png.latex?v%20%5Cin%20V"> and some integer <img src="https://latex.codecogs.com/png.latex?k_v">.</p>
</blockquote>
<p>You can observe this based on simulating the sequence on the graph and imagining it from the perspective of your favorite vertex <img src="https://latex.codecogs.com/png.latex?v"> in it. In particular, assume you are walking around in <img src="https://latex.codecogs.com/png.latex?G"> as dictated by <img src="https://latex.codecogs.com/png.latex?W">. Fix your attention on <img src="https://latex.codecogs.com/png.latex?v">: every time you “enter” <img src="https://latex.codecogs.com/png.latex?v">, via, say the edge <img src="https://latex.codecogs.com/png.latex?e_i">, then you must “exit” <img src="https://latex.codecogs.com/png.latex?v"> via the edge <img src="https://latex.codecogs.com/png.latex?e_%7Bi+1%7D">. If <img src="https://latex.codecogs.com/png.latex?G"> is directed, <img src="https://latex.codecogs.com/png.latex?e_i"> is an incoming edge and <img src="https://latex.codecogs.com/png.latex?e_%7Bi+1%7D"> is an outgoing edge, and if <img src="https://latex.codecogs.com/png.latex?G"> is undirected, these are simply two edges incident on <img src="https://latex.codecogs.com/png.latex?v"> that can be naturally “paired off”. So any successful walk witnesses the claims above.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
These conditions are necessary, but are they sufficient?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>It turns out that you could have graphs where these conditions are true, but there are no Euler tours. This happens when the graph is “disconnected”, i.e, when there is a pair of vertices <img src="https://latex.codecogs.com/png.latex?u"> and <img src="https://latex.codecogs.com/png.latex?v"> such that there is no path from <img src="https://latex.codecogs.com/png.latex?u"> to <img src="https://latex.codecogs.com/png.latex?v">. The following are good exercises to work through:</p>
<ul>
<li><p>Come up with an example of a graph where the degree conditions are met but there is no Euler tour.</p></li>
<li><p>Convince yourself that if <img src="https://latex.codecogs.com/png.latex?G"> is connected and satisfies the degree conditions indicated above, you can always find an Euler tour.</p></li>
</ul>
</div>
</div>
</div>
</section>
<section id="a-naive-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="a-naive-algorithm">A naive algorithm</h2>
<p>Now we turn to the procedural question: knowing what it takes to find an Euler tour, how do we actually find one? First, we get the simple degree-based sanity check out of the way. For undirected graphs we have:</p>
<pre class="plaintext"><code>for v in V(G):
    if deg[v] % 2 != 0:
        return False</code></pre>
<p>and for directed graphs we have:</p>
<pre class="plaintext"><code>for v in V(G):
    if indeg[v] != outdeg[v]:
        return False</code></pre>
<p>Assuming we pass these sanity checks, we want to embark on an actual tour. Here’s a reasonable starting point, which essentially amounts to saying that you get to start anywhere, and keep going while you can:</p>
<pre class="plaintext"><code>find_tour(G,v):
    // G is the graph
    // and v is our favorite vertex
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u) which is not in S:
        add e to S
        set curr := u
    return S</code></pre>
<p>This is basically a “keep going until stuck” process. By the very nature of the process, the sequence <img src="https://latex.codecogs.com/png.latex?S"> that we come up with is <em>walkable</em> and does not repeat edges, but it is unclear if this list is exhaustive. Indeed, you should be able to come up with examples of graphs <img src="https://latex.codecogs.com/png.latex?G"> where <img src="https://latex.codecogs.com/png.latex?G"> has an Euler tour but <code>find_tour(G)</code> does not output one.</p>
</section>
<section id="fixing-the-naive-approach" class="level2">
<h2 class="anchored" data-anchor-id="fixing-the-naive-approach">Fixing the naive approach</h2>
<p>How do we fix this? For one, we need to know if we are done or not: if an edge is missing from <img src="https://latex.codecogs.com/png.latex?S">, then that’s a bad sign, and we need to do something about it. How do we know if every edge is enlisted in the output? One way is to compute the length of <img src="https://latex.codecogs.com/png.latex?S">: if it falls short of <img src="https://latex.codecogs.com/png.latex?m">, we are not done yet.</p>
<p>But we also need to know what the missing edges are. We could in principle go through our edge list and ask ourselves if the edge made it to <img src="https://latex.codecogs.com/png.latex?S"> or not, but that sounds mildly painstaking. Let’s save ourselves the pain with some additional bookkeeping — let’s track the “residual degree” of the vertices: this is the number of edges incident on <img src="https://latex.codecogs.com/png.latex?v"> that are not yet listed in <img src="https://latex.codecogs.com/png.latex?S">. Any vertex with non-zero residual degree gives us concrete hints about missing edges.</p>
<p>So for directed graphs we have:</p>
<pre class="plaintext"><code>find_tour(G,v):
    init res_deg[v] = outdeg[v]
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u) which is not in S:
        add e to S
        res_deg[curr] = res_deg[curr]-1
        set curr := u
    return S</code></pre>
<p>and for undirected graphs we have:</p>
<pre class="plaintext"><code>find_tour(G,v):
    init res_deg[v] = deg[v]
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u) which is not in S:
        add e to S
        res_deg[curr] = res_deg[curr]-1
        res_deg[u] = res_deg[u]-1
        set curr := u
    return S</code></pre>
<p>So now we know when our algorithm is a fail. What’s the fix? Well, let’s approach vertices who are not done yet as per our intel from their <code>res_deg</code> value. We use these vertices to trigger more happy-go-lucky tours:</p>
<pre class="plaintext"><code>find_tour_fr(G):
    i := 0
    marked := emptyset
    res_deg[v] := outdeg[v]
    S := list of lists
    while there is some v with res_deg[v] &gt; 0:
        let S[i] := find_tour(G,v,marked)
        add every edge in S_i to marked
        i = i+1</code></pre>
<p>Since we need to track visited edges across multiple runs now, we actually inform the <code>find_tour</code> function about the edges already visited from past lives. This is tracked with the <code>marked</code> set.</p>
<p>So our updated <code>find_tour</code> function looks like this:</p>
<pre class="plaintext"><code>find_tour(G,v,marked):
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u)
    which is not in S or marked:
        add e to S
        res_deg[curr] = res_deg[curr]-1
        set curr := u
    return S</code></pre>
<p>(The change is analogous for the version dealing with undirected graphs.)</p>
<p>What we have now is a bunch of fragments, each of which is essentially a walk that begins and ends at the same vertex. Because of our relentless and careful pursuit (c.f. the while condition and the marked set), every edge in <img src="https://latex.codecogs.com/png.latex?G"> features in <em>exactly</em> one of these fragments. Now it’s just a matter of putting everything together.</p>
<p>Start with the first fragment <img src="https://latex.codecogs.com/png.latex?S_0">. If this is the only fragment we have, that means that our first happy-go-lucky tour was in fact also a lucky one! So we have nothing left to do. Otherwise, there are at least two fragments. Let us look at the set of vertices involved in <img src="https://latex.codecogs.com/png.latex?S_0">. The crucial observation is that there must be at least one other fragment, say <img src="https://latex.codecogs.com/png.latex?S_i">, that also features some vertex that appears in <img src="https://latex.codecogs.com/png.latex?S_0">. Indeed, if this is not the case, then you can argue that <img src="https://latex.codecogs.com/png.latex?S_0"> is a sad isolated fragment, and we can actually report that <img src="https://latex.codecogs.com/png.latex?G"> has no Euler tour.</p>
<p>Otherwise, find the common vertex between <img src="https://latex.codecogs.com/png.latex?S_0"> and <img src="https://latex.codecogs.com/png.latex?S_i">, and extend one of them using the other: for example, if <img src="https://latex.codecogs.com/png.latex?v"> is the common vertex, take a walk in <img src="https://latex.codecogs.com/png.latex?S_0"> until you encounter <img src="https://latex.codecogs.com/png.latex?v">, and then instead of following along on <img src="https://latex.codecogs.com/png.latex?S_0">, take a detour as specified by <img src="https://latex.codecogs.com/png.latex?S_i">. Remember if you start on <img src="https://latex.codecogs.com/png.latex?S_i"> at <img src="https://latex.codecogs.com/png.latex?v">, then you will eventurally exhaust <img src="https://latex.codecogs.com/png.latex?S_i"> by coming back to <img src="https://latex.codecogs.com/png.latex?v">: and at this point you can “resume” your walk on <img src="https://latex.codecogs.com/png.latex?S_0">. Note that this process welds two fragments at the vertex <img src="https://latex.codecogs.com/png.latex?v"> thereby reducing the total number of fragments by one. This should count as a sure sign of progress: repeating for as long as possible, we have to do this at most <img src="https://latex.codecogs.com/png.latex?(f-1)"> many times, where <img src="https://latex.codecogs.com/png.latex?f%20%5Cleq%20%5Cfrac%7Bm%7D%7B2%7D"> is the total number of fragments.</p>
<pre><code>patchup():
    Let S[i] for i in 1, 2, ..., f denote the set of all fragments
    while f &gt; 1:
        look for a fragment S[i] that intersects S[0]
        if S[i] does not exist:
            return false
        else:
            expand S[0] along S[i]
            remove S[i] from the set of all fragments</code></pre>
</section>
<section id="expenses" class="level2">
<h2 class="anchored" data-anchor-id="expenses">Expenses</h2>
<p>Although arguably a naive algorithm, the cool thing about this procedure is that it is guaranteed to work, and the number of steps involved is not terribly bad either. Here’s a naive back-of-the-envelope analysis, assuming <img src="https://latex.codecogs.com/png.latex?G"> is stored as an adjacency list:</p>
<ol type="1">
<li>The degree-based sanity checks are <img src="https://latex.codecogs.com/png.latex?%5Capprox%20m"> since <img src="https://latex.codecogs.com/png.latex?G"> is stored as an adjacency list.</li>
<li>Consider <code>find_tour_fr(G)</code>:
<ul>
<li>The outer <code>while</code> loop runs at most <img src="https://latex.codecogs.com/png.latex?m"> times since each iteration decreases the residual degree of at least two vertices and the sum of residual degrees is <img src="https://latex.codecogs.com/png.latex?2m"> at the start (an analogous argument applies for directed graphs).</li>
<li>The inner <code>while</code> loop in <code>find_tour(G,v,marked)</code> is executed at most <img src="https://latex.codecogs.com/png.latex?m"> times. To find an appropriate edge, we have to go through the negibors of <code>curr</code> and check if the associated edge is already in <code>S</code> or <code>marked</code>. This takes at most <img src="https://latex.codecogs.com/png.latex?(nm)"> iterations in the worse case, if implemented directly.</li>
<li>Assuming that <code>S</code> is a linked list and <code>res_deg</code> is an array, the innermost operations are all constant time.</li>
<li>The overall cost of a direct implementation is therefore <img src="https://latex.codecogs.com/png.latex?nm%5E3">.</li>
</ul></li>
<li>The <code>patchup</code> procedure involves a outer <code>while</code> loop that runs at most <img src="https://latex.codecogs.com/png.latex?f"> times if we have <img src="https://latex.codecogs.com/png.latex?f"> fragments. The looking business to merge fragments will take no more than <img src="https://latex.codecogs.com/png.latex?m"> units of time: worst case we have to scan all remaining fragments to find a suitable match, and the merger involves updating a few pointers — noting again that the fragments are stored as lists. This is of course a conservative estimate, but it will do. The overall time here is therefore no worse than <img src="https://latex.codecogs.com/png.latex?%5Capprox%20m%5E2"> since <img src="https://latex.codecogs.com/png.latex?f%20%5Cleq%20%5Cfrac%7Bm%7D%7B2%7D">.</li>
</ol>
<p>This gives us <img src="https://latex.codecogs.com/png.latex?m%20+%20nm%5E3%20+%20m%5E2"> in total damages. However, notice that a more careful analysis helps us do better without doing anything substantially different. If you think about <code>find_tour_fr(G)</code> think about how often the instructions:</p>
<pre><code>add e to S
res_deg[curr] = res_deg[curr]-1
set curr := u</code></pre>
<p>from <code>find_tour(G,v,marked)</code> are actually executed. Every time we execute this set of instructions, we effectively add one edge to the set of marked edges, and since this happens exactly once per edge, these instructions only execute <img src="https://latex.codecogs.com/png.latex?m"> times overall. Recall that what it takes to enter this loop is the discovery of an unused edge:</p>
<pre><code>while there is an outgoing edge e = (curr,u)
which is not in S or marked</code></pre>
<p>This is the bit that took us a while, because we assumed we have to examine all possible edges that go out of <code>curr</code> and then also tally up against <code>S</code> and <code>marked</code>. One way to speed this up is to always commit to pulling out the first element in the adjacency list of the vertex <code>u</code> and then in fact deleting this element from the list. If you are paranoid about subjecting your input to this kind of annihilation, then you can just make a working copy upfront. This way, you can be sure that you can find what you want in constant time, a good case in point to show how the way you store your data can impact the performance of your algorithm.</p>
<p>Based on the hints above, convince yourself that <code>find_tour_fr(G)</code> in fact has a total expense amounting to <img src="https://latex.codecogs.com/png.latex?%5Capprox%20m">, modulo constants. With this, our overall cost comes down to <img src="https://latex.codecogs.com/png.latex?%5Capprox%202m%20+%20m%5E2">.</p>
</section>
<section id="afterthoughts" class="level2">
<h2 class="anchored" data-anchor-id="afterthoughts">Afterthoughts</h2>
<p>Can we do better? Indeed, it turns out that with a slightly more careful implementation, the business of merging fragments can also be done with an expense proportional to the number of edges. The careful version goes by Hierholzer’s algorithm, and you can read up about this <a href="https://en.wikipedia.org/wiki/Eulerian_path#Hierholzer's_algorithm">on Wikipedia</a> or watch the video below.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/8MpoO2zA2l4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>


</section>

 ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/eulertours/index.html</guid>
  <pubDate>Thu, 08 Sep 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Representing Graphs</title>
  <link>https://neeldhara.blog/posts/dsanotes/graphs/index.html</link>
  <description><![CDATA[ 




<section id="drawing-and-walking-challenges" class="level2">
<h2 class="anchored" data-anchor-id="drawing-and-walking-challenges">Drawing and Walking Challenges</h2>
<p>At some point of time in your life, you have likely been challenged to draw a kite-like figure:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/draw-K4.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A common drawing challenge.</figcaption><p></p>
</figure>
</div>
<p>without ever lifting your pencil/pen/quill off the paper. You may have noticed that there are figures that are particularly elusive to this persistent style of drawing, while others are pleasingly possible to draw in this fashion.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
(Spoiler) Beth Thomas demonstrating what drawing challenges are doable
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<iframe width="560" height="315" src="https://www.youtube.com/embed/E0BQrk49tbk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</div>
</div>
<p>The city of Königsberg in Prussia (now Kaliningrad, Russia) was set on both sides of the Pregel River, and included two large islands—Kneiphof and Lomse—which were connected to each other, and to the two mainland portions of the city, by seven bridges.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The Problem
</div>
</div>
<div class="callout-body-container callout-body">
<p>Devise a walk through the city that would cross each of those bridges once and only once. Try this yourself on a few different maps at <a href="https://mathigon.org/course/graph-theory/bridges">Mathigon</a>!</p>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch3-knbridges.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Konigsberg Classic: Map of Königsberg in Euler’s time showing the actual layout of the seven bridges, highlighting the river Pregel and the bridges. Image by Bogdan Giuşcă, in the public domain (CC BY-SA 3.0) and sourced from Wikipedia.</figcaption><p></p>
</figure>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
(Spoiler) Numberphile commentary on the bridges of Königsberg
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<iframe width="560" height="315" src="https://www.youtube.com/embed/W18FDEA1jRQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</div>
</div>
<p>The question was addressed and answered by Euler (1736). He did not solve this by “messing around” with all possible ways of walking around the city and checking if any of the walks satisfied the desired criteria. His more systematic approach involved modeling the problem abstractly, and making some key observations that ultimately led to the solution — not just for this problem, but for all problems with a similar framing!</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Classroom Activity with Eulerian Paths
</div>
</div>
<div class="callout-body-container callout-body">
<p>The picture below shows a few popular actors, with edges connecting pairs of those who have worked together in a movie together<sup>1</sup>. The example is designed so that there are exactly two actors who participate in an odd number of pairings.</p>
<p>We can work through the “bridges puzzle” on this graph. In the classroom, we all started with the vertex representing Juhi Chawla, “walked around” using every connection exactly once, and the fun effect is that everyone ends up at the vertex representing Rishi Kapoor (or solves the puzzle incorrectly). From here, you can probably begin to guess the role of the two special vertices in the puzzle.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch3-eulerpath.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">An actor collaboration graph</figcaption><p></p>
</figure>
</div>
<p>This activity is an adaptation of the example from the <a href="https://www.udacity.com/course/intro-to-algorithms--cs215">Intro to Algorithms</a> course at Udacity, where it appears in the first chapter with the title “A Social Network Magic Trick”.</p>
</div>
</div>
<p>Here’s another similar-sounding and classic problem involving a chessboard, <a href="https://en.chessbase.com/post/euler-and-the-knights-tour">also posed to Euler</a>:</p>
<blockquote class="blockquote">
<p>“I found myself one day in a company where, on the occasion of a game of chess, someone proposed this question: <em>To move with a knight through all the squares of a chess board, without ever moving two times to the same square, and beginning with a given square.</em>”</p>
</blockquote>
<p>The origins of this problem — the so-called “Knight’s Tour” — goes all the way back to the 9th century AD, where it is described in <a href="https://www.ias.ac.in/article/fulltext/reso/025/08/1095-1116">Rudraṭa’s Kavyalankara</a>. Here’s an example of a knight’s tour, as seen on Wikipedia:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch3-kt-anim.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">An animated example of a knight’s tour.</figcaption><p></p>
</figure>
</div>
<p>Although deceptively similar to the problem of the bridges, this is a different problem with two important contrasts:</p>
<ol type="1">
<li>we were previously not allowed to reuse <em>bridges</em>, here we are not allowed to reuse <em>squares</em>, and</li>
<li>we were previously obliged to use <em>every</em> bridge, here we are <em>not</em> required to make every possible move that exists.</li>
</ol>
<p>Generalizing from the 8x8 chessboard, you could ask yourself what <img src="https://latex.codecogs.com/png.latex?(n%20%5Ctimes%20n)"> boards admit such tours.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
(Spoiler) Numberphile commentary on the knight’s tour
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<iframe width="560" height="315" src="https://www.youtube.com/watch?v=ab_dY3dZFHM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</div>
</div>
</section>
<section id="abstractions-via-graphs" class="level2">
<h2 class="anchored" data-anchor-id="abstractions-via-graphs">Abstractions via Graphs</h2>
<p>It’s useful to model such problems using <em>graphs</em> (aka <em>networks</em>). And we’re not talking sine curves here — a graph in our context is a structure that represents relationships between entities.</p>
<p>Usually these relationships are between two entities at a time. Indeed, this is typically already quite a bit to keep track of, hence graphs that do more are said to be hyper. That is to say, graphs that model relationships involving more than two entities in one go are generally called <em>hypergraphs</em>, and they will be a story for another day.</p>
<p>For now, we will variously refer to entities as <em>vertices</em> or <em>nodes</em>, and relationships as <em>edges</em> or <em>connections</em>. Come to think of it, graphs are everywhere:</p>
<table class="table">
<thead>
<tr class="header">
<th>Entities</th>
<th>Two entitites are in a relationship if…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>People</td>
<td>they are in a relationship.</td>
</tr>
<tr class="even">
<td>Cats</td>
<td>they have fought each other.</td>
</tr>
<tr class="odd">
<td>Actors</td>
<td>they have been in a movie together.</td>
</tr>
<tr class="even">
<td>Airports</td>
<td>there is a direct flight between them.</td>
</tr>
<tr class="odd">
<td>Landmasses</td>
<td>there is a bridge connecting them.</td>
</tr>
<tr class="even">
<td>Songs</td>
<td>one of the tunes was copied from the other.</td>
</tr>
<tr class="odd">
<td>Subsets of <img src="https://latex.codecogs.com/png.latex?%5B42%5D"></td>
<td>one is contained in another.</td>
</tr>
<tr class="even">
<td>Ingredients</td>
<td>there is a recipe that uses them together.</td>
</tr>
<tr class="odd">
<td>Webpages</td>
<td>one of them has a link leading to the other.</td>
</tr>
<tr class="even">
<td>Twitter Users</td>
<td>one of them follows the other<sup>2</sup></td>
</tr>
<tr class="odd">
<td>Locations on a Chessboard<sup>3</sup></td>
<td>one of them is reachable from the other via a knight move.</td>
</tr>
</tbody>
</table>
<p>We usually like to distinguish between graphs where the relationships are potentially one-sided (such as people in a relationship), and those where they are mutual (such as ingredients in a recipe). Edges like these are called <em>directed</em> and <em>undirected</em>, respectively.</p>
<p>Depending on what the graph is modeling, we may not allow for entities to entertain relationships with themselves (e.g, flights don’t come back to airports they took off from). In other contexts, it makes sense to allow for this (e.g, a set always contains itself). An edge that connects a vertex to itself is called a <em>self-loop</em><sup>4</sup>.</p>
<p>Sometimes, it is reasonable that there are multiple edges between a fixed pair of vertices (for example, consider that there are several recipies that use salt and potatoes). Multiple edges are useful to model a multitude of relationships, and are often called <em>multiedges</em> when used.</p>
<p>A <em>simple</em> graph is one that does not have either self-loops or multiedges.</p>
<p>Finally, it is worth mentioning that some relationships naturally connect more two entities. For example, in an actor collaboration graph, you would find edges between Amitabh Bachchan, Juhi Chawla, and Shah Rukh Khan. You would also find edges between Akshay Kumar, Dhanush, and Sonam Kapoor. In the first example, there happens to be one film that all three actors feature in together, while this is not the case in the latter, at least at the time of this writing. As such, the graph does not have enough structure to reveal this distinction: it looks exactly the same in both cases!</p>
<p>For an actor-collaboration graph, allowing for <img src="https://latex.codecogs.com/png.latex?n">-way relationships would make room for accurately capturing information about both actors and movies. Indeed, every movie could be represented by an ‘edge’ — the subset of actors who belonged to the cast. Such graphs are called <em>hypergraphs</em> or <em>set systems</em>.</p>
<p>While hypergraphs are a very useful generalization of graphs, they will be largely out of scope for our discussions in this course. To make up for that, here is a different workaround to capture all the information we have in the actor-collaboration graph example. Instead of having a vertex for every actor, we introduce a vertex for every actor <em>and</em> for every movie. Now, an actor <img src="https://latex.codecogs.com/png.latex?a"> and a movie <img src="https://latex.codecogs.com/png.latex?m"> are connected by an edge if <img src="https://latex.codecogs.com/png.latex?a"> belongs to the cast of <img src="https://latex.codecogs.com/png.latex?m">. Observe that this approach can be used to “convert” any hypergraph into a graph.</p>
<p>A little more terminology before we move on: I promise that we’re almost done introducing new words!</p>
<p>For an undirected graph, a vertex <img src="https://latex.codecogs.com/png.latex?u"> is called a <em>neighbor</em> of a vertex <img src="https://latex.codecogs.com/png.latex?v"> if <img src="https://latex.codecogs.com/png.latex?(u,v)"> is an edge. For a directed graph, the presence of the edge <img src="https://latex.codecogs.com/png.latex?(u,v)"> would make <img src="https://latex.codecogs.com/png.latex?v"> an <em>out-neighbor</em> of <img src="https://latex.codecogs.com/png.latex?u"> and <img src="https://latex.codecogs.com/png.latex?u"> an <em>in-neighbor</em> of <img src="https://latex.codecogs.com/png.latex?v">.</p>
<p>For an undirected graph, the <em>degree</em> of a vertex <img src="https://latex.codecogs.com/png.latex?v"> is the number of neighbors of <img src="https://latex.codecogs.com/png.latex?v">. For a directed graph, the in-degree and out-degree of <img src="https://latex.codecogs.com/png.latex?v"> is the number of in-neighbors and out-neighbors of <img src="https://latex.codecogs.com/png.latex?v">, respectively.</p>
</section>
<section id="representing-graphs" class="level2">
<h2 class="anchored" data-anchor-id="representing-graphs">Representing Graphs</h2>
<p>If you wanted to tell your program about a graph, there are a few different ways you could go about it. Let’s assume that we’re trying to represent a graph <img src="https://latex.codecogs.com/png.latex?G"> on <img src="https://latex.codecogs.com/png.latex?n"> nodes, labeled <img src="https://latex.codecogs.com/png.latex?1"> through <img src="https://latex.codecogs.com/png.latex?n">, and <img src="https://latex.codecogs.com/png.latex?m"> edges.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How would you do it?
</div>
</div>
<div class="callout-body-container callout-body">
<p>Before reading further, it would be worth spending some time thinking about how you would represent a graph. Based on our discussions so far, you might counter this with the question: “Well, what do <em>you</em> need it for?” — and that’s a fair reaction!</p>
<p>Listed below are some fairly common operations that come up when dealing with graphs.</p>
<pre class="[plaintext]"><code>1. add edge u v
2. remove edge u v
3. add vertex v
4. remove vertex v
5. is u a neighbor of v?
6. find degree v</code></pre>
</div>
</div>
<p><strong>Edge Lists.</strong> The most natural way is to perhaps just braindump the full list of edges. This gives us all we need to know about <img src="https://latex.codecogs.com/png.latex?G">.</p>
<p>Since this is just a plain list, you could implement it either as an array or as a linked list.</p>
<p><strong>Adjacency Matrix.</strong> The other way is to block off a <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> array <img src="https://latex.codecogs.com/png.latex?A"> of integers. You could then have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Bequation*%7D%0A%20%20%20A%5Bi%5D%5Bj%5D%20=%0A%20%20%20%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%201%20&amp;%20%5Ctext%7Bif%20%7D%20(i,j)%20%5Cin%20E,%5C%5C%0A%20%20%20%20%20%200%20&amp;%20%5Ctext%7Botherwise.%7D%0A%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation*%7D%0A"></p>
<p><strong>Adjacency Lists.</strong> Finally, you could have an array <img src="https://latex.codecogs.com/png.latex?A"> of size <img src="https://latex.codecogs.com/png.latex?n">, with <img src="https://latex.codecogs.com/png.latex?A%5Bi%5D"> pointing to a list of the neighbors of the vertex <img src="https://latex.codecogs.com/png.latex?i"> if the graph is undirected, and out-neighbors if the graph is directed.</p>
<p>Again, since these are just lists, they could be, in principle, implemented either as arrays or linked lists. We will follow the traditional choice of implementing them as lists.</p>
<p>It should be no surprise at this point that there is no “right” answer to the choice of representation. You might have noticed, for instance, that an adjacency matrix always reserves <img src="https://latex.codecogs.com/png.latex?n%5E2"> units of space to store <img src="https://latex.codecogs.com/png.latex?G">, while the amount of space consumed by the other two representations is proportional to <img src="https://latex.codecogs.com/png.latex?m">. Notice that the number of edges in a graph can be as large as <img src="https://latex.codecogs.com/png.latex?%5Capprox%20n%5E2"> for simple graphs, so there certainly are graphs for which the space consumption looks the same for all representations. However, for graphs where there aren’t as many edges, then the matrix representation is likely wasteful in terms of space, although you may have other good reasons for sticking to it.</p>
<p>Let’s classify expenses incurred as follows.</p>
<ol type="1">
<li><strong>Brilliant.</strong> When the procedure only needs constant time.</li>
<li><strong>Decent.</strong> When the procedure always wraps up in, and sometimes needs, time proportional to the maximum degree of the graph.</li>
<li><strong>(n/m)-tolerable.</strong> When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph.</li>
<li><strong>(n/m)-painful.</strong> When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph squared.</li>
</ol>
<p>Here’s a run down of how the representations above fare with respect to some of the common operations mentioned in the opening exercise.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Operations</th>
<th style="text-align: center;">Adj. Matrix</th>
<th style="text-align: center;">Adj. List</th>
<th style="text-align: center;">Edge List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Adding a vertex</td>
<td style="text-align: center;">n-Painful</td>
<td style="text-align: center;">n-Tolerable</td>
<td style="text-align: center;">Decent</td>
</tr>
<tr class="even">
<td style="text-align: center;">Deleting a vertex</td>
<td style="text-align: center;">n-Painful</td>
<td style="text-align: center;">n-Tolerable</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Adding an edge</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Brilliant</td>
</tr>
<tr class="even">
<td style="text-align: center;">Deleting an edge</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Decent</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Finding degree(v)</td>
<td style="text-align: center;">n-Tolerable</td>
<td style="text-align: center;">Decent</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
<tr class="even">
<td style="text-align: center;">Check if (u,v) is an edge</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Decent</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
</tbody>
</table>
<p>It would be a good exercise to validate that these claims indeed make sense.</p>
<p>Now that we’re comfortable with storing graphs, next up, we’ll talk about exploring them.</p>
<p><br></p>
<hr>
<p><br></p>
<div id="hyvor-talk-view">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’ve been told that this representation is not complete, and indeed, I have only verified that the connections are justified… some of the missing edges are likely to be inaccurate.↩︎</p></li>
<li id="fn2"><p>Find out more about <a href="https://dl.acm.org/doi/10.1145/2488388.2488433">Twitter’s WTF (who-to-follow) service</a>.↩︎</p></li>
<li id="fn3"><p>See how the puzzle about exchanging the positions of black and white knights can be <a href="https://www.nytimes.com/2022/07/05/science/june-huh-heisuke-hironaka-math-chromatic-geometry.html">recast as a graph problem</a>.↩︎</p></li>
<li id="fn4"><p>There are even graphs that <a href="https://en.wikipedia.org/wiki/Bouquet_graph"><em>only</em> have self-loops</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/graphs/index.html</guid>
  <pubDate>Tue, 09 Aug 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/figures/draw-K4.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Representing Sequences</title>
  <link>https://neeldhara.blog/posts/dsanotes/sequences/index.html</link>
  <description><![CDATA[ 




<section id="of-playlists-and-tweet-threads-representing-sequential-information" class="level1 page-columns page-full">
<h1>Of Playlists and Tweet Threads: <br>Representing Sequential Information</h1>
<p><a href="https://slides.com/neeldhara/dsa1-w01#/2/1">Link to Slides</a></p>
<p>So far, we have worked with <em>atomic</em> types, which is to say variables that can hold a “single kind of data” for us — like integers, characters, strings, booleans, and so on. Often, however, we need to work with compound types, which is to say, a bunch of these things taken together. For example, you may have sensed that when we spoke of maintaining <a href="intro.qmd">a set of cards</a> earlier with 52 booleans, it may have been nicer if they could be strung together into a single, unified structure: for one, it saves you having to keep track of a large number of variables, and further, it might be easier — as we will find out — to manipulate the data in response to operations that we may want to support.</p>
<p>When you speak of a bunch of objects, it is useful to agree on whether you interpret the collection as an <em>ordered</em> or <em>unordered</em> set. Consider the following examples:</p>
<ol type="1">
<li>Your playlist of happy songs</li>
<li>A stack of cards</li>
<li>People living in a house</li>
<li>Teams that played in the Asia Cup 2022</li>
<li>Chess pieces on a board mid-game</li>
</ol>
<div class="page-columns page-full"><p>While some people play their happy songs in shuffle mode, for some the playlist is carefully organized, and the order matters. A stack of cards and chess pieces on a board are clearly collections with a natural sense of order, and one that is very likely to be important. On the other hand, people who live in a particular house or the set of teams that participated in the Asia cup in 2022 can be thought of as sets with no underlying order: of course, if you had to impose one you could cook something up<sup>1</sup> (e.g, alphabetical, favorites, and so on). We will focus on storing ordered lists for now and return to sets in due course.</p><div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;For example, the C++ implementation of <code>set</code> maintains a default order even though it is, by nomenclature, modeling unordered sets. On the other hand, the <code>unordered_set</code> data structure in the C++ STL throws all caution to the wind and buys faster operations on average.</p></li></div></div>
<p>There are a few different ways that you can store a list of things in a computer’s memory. Imagine that you are real estate agent and you want to book some houses in a complex for your current and future clients. Stretching your imagination a little bit further, say all houses are numbered from 1 to 1000 and are positioned on a straight line in the natural order (i.e, 2 after 1, 3 after 2, and so on). Some houses are occupied and others are not. If you reserve <img src="https://latex.codecogs.com/png.latex?k"> houses, management will find some contiguous block of <img src="https://latex.codecogs.com/png.latex?k"> unoccupied houses and give you the number of the first house in the block. For instance, if you ask for 50 houses, you would get a letter from the management saying 50 houses starting from #420 are yours. If you need 20 more houses later, you would get a letter from the management saying 70 houses starting from #777 are yours. That’s right: they are not obiligied to give you houses #470 to #489, indeed, these may not be avaiailable. They <em>could</em> just give you an additional chunk of 20 houses somewhere else, but sadly that’s not how they roll: them management, them rules. There are also no refunds: you can’t give back reserved houses.</p>
<p>Now here comes our first dilemma: how many houses do we reserve? Say we have 20 clients: it is clear that we need to reserve <em>at least</em> 20 houses, but should we reserve a few more? Reservations are not free, so we don’t want to reserve a very large number of houses either: remember, there are no refunds. But on the other hand, if we reserve too few, and we end up with more clients than the number of houses we’ve reserved, we will be in a sticky situation — worst case some clients may have to move, which is not ideal. You will have to work on coming up with a reasonable estimate of how many clients you will eventually have, and hope for the best.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch2-houses-01.png" class="img-fluid figure-img" style="width:70.0%"></p>
<p></p><figcaption class="figure-caption">Expanding your reservations can get tricky</figcaption><p></p>
</figure>
</div>
<p>Over time you find that this business of estimating the number of clients you have is an unpleasant one: both under and overestimates lead to losses, which makes you wonder if there are apartments that have more flexible options. You look around, and why yes, you find a different apartment complex — again a thousand houses on a line neatly numbered 1 to 1000 from left to right, but this time, management reserves one house at a time. You want a new house, you simply ask for one. But there’s a catch: the paperwork here requires you to submit the client’s information, and they directly get their house number. So this is actually quite efficient: the management does all the work and you can reserve exactly what you need. All is well until it’s time for Diwali and you realize you don’t know where your clients are housed, and you can’t send them postcards, sweets, and advertisements.</p>
<p>You could, of course, just call your clients and ask them for their house numbers, but then this requires you to maintain some kind of register, and let us just say that you are not good with that kind of thing. So here’s what you do instead: you only keep the first client’s address, because that’s just one thing that’s easy to remember. Then you ask your <img src="https://latex.codecogs.com/png.latex?i">-th client to remember the address of the <img src="https://latex.codecogs.com/png.latex?(i+1)">-th client: they are slightly bewildered but you tell them it’s for insurance. Now if you want to pay a visit to your <img src="https://latex.codecogs.com/png.latex?%5Cell">-th client, you just start from your first one, and follow the trail. Peculiar, but works.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch2-houses-02.gif" class="img-fluid figure-img" style="width:70.0%"></p>
<p></p><figcaption class="figure-caption">Walking around to find your clients with new management.</figcaption><p></p>
</figure>
</div>
<p>Note that with the previous maangement this was never a problem: you had a contiguous block of houses that you allocated sequentially, so your <img src="https://latex.codecogs.com/png.latex?i">-th client’s house address was always at hand if you were good with arithmetic or had a calculator: simply add <img src="https://latex.codecogs.com/png.latex?(i-1)"> to the house number of the first client.</p>
<p>As analogies go this was both unrealistic and imprefect, but I hope it gives you a sense of the main trade-offs involved in the two ways we have to store sequential data — very roughly speaking:</p>
<ul>
<li>in contiguous blocks, access is easy, flexibility is hard;</li>
<li>with elements all over the place, access is indirect but the structure is relatively flexible.</li>
</ul>
<section id="arrays" class="level2">
<h2 class="anchored" data-anchor-id="arrays">Arrays</h2>
<p>Quoting <a href="https://en.wikipedia.org/wiki/Array_data_structure">Wikipedia</a>:</p>
<blockquote class="blockquote">
<p>An array is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. An array is stored such that the position of each element can be computed from its index tuple by a mathematical formula.</p>
</blockquote>
<blockquote class="blockquote">
<p>For example, an array of 10 32-bit (4-byte) integer variables, with indices 0 through 9, may be stored as 10 words at memory addresses 2000, 2004, 2008, …, 2036, (in hexadecimal: 0x7D0, 0x7D4, 0x7D8, …, 0x7F4) so that the element with index i has the address 2000 + (i × 4).[4]</p>
</blockquote>
</section>
<section id="linked-lists" class="level2">
<h2 class="anchored" data-anchor-id="linked-lists">Linked Lists</h2>
<p>Quoting <a href="https://en.wikipedia.org/wiki/Linked_list">Wikipedia</a>:</p>
<blockquote class="blockquote">
<p>A linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence. This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration.</p>
</blockquote>
<blockquote class="blockquote">
<p>More complex variants add additional links, allowing more efficient insertion or removal of nodes at arbitrary positions. A drawback of linked lists is that access time is linear (and difficult to pipeline). Faster access, such as random access, is not feasible. Arrays have better cache locality compared to linked lists.</p>
</blockquote>
</section>
<section id="comparison" class="level2">
<h2 class="anchored" data-anchor-id="comparison">Comparison</h2>
<p>Given a fully occupied array with n elements v/s a linked list with n elements, here are the costs of some operations that you might want to perform:</p>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 21%">
<col style="width: 28%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Operations</th>
<th style="text-align: center;">Arrays</th>
<th style="text-align: center;">Singly Linked List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Looking up the i-th element</td>
<td style="text-align: center;">instant</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> i</td>
</tr>
<tr class="even">
<td style="text-align: center;">Adding a new element at the start</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n</td>
<td style="text-align: center;">instant</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Adding a new element at the end</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n</td>
</tr>
<tr class="even">
<td style="text-align: center;">Removing the i-th element</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n-i</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> i</td>
</tr>
</tbody>
</table>
</section>
<section id="what-should-you-use" class="level2">
<h2 class="anchored" data-anchor-id="what-should-you-use">What should you use?</h2>
<p>The correct answer is: it depends. If you expect your lists to be heavily manipulated, then linked lists are likely to be the better choice. On the other hand, if yuo are working with a list of a predictable size (or you at least have a known and reasonable upper bound on the size), and direct access is important to you, then arrays are the way to go. If you are dissatisfied with both methods, then consider transforming your unhappiness into motivation for discovering more sophisticated options!</p>

<!--
    - index.qmd
    - intro.qmd
    - sequences.qmd
    - cardtricks.qmd
    - graphs.qmd
    - traversals.qmd
    - stablematchings.qmd
 -->


</section>
</section>


 ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/sequences/index.html</guid>
  <pubDate>Mon, 01 Aug 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/figures/ch2-houses-01.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Data Structures and Structured Data</title>
  <link>https://neeldhara.blog/posts/dsanotes/introduction/index.html</link>
  <description><![CDATA[ 




<p><a href="https://slides.com/neeldhara/dsa1-w01">Link to Slides</a></p>
<section id="wdym-data-structures" class="level2">
<h2 class="anchored" data-anchor-id="wdym-data-structures">WDYM, data structures?</h2>
<p>We will keep it casual and skip formal definitions for now. 👀</p>
<p>Data structures give us principled ways to <em>stow away</em> information. It’s important to do this nicely based on what you want to <em>do</em> with the information.</p>
<p>For example, the notes you might be taking in this class is information. If you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!</p>
<p>However, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don’t have to be neat, and it’s enough for them to be useful.</p>
<p>On the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Throughout this course, we will try to make sense of trade-offs.
</div>
</div>
<div class="callout-body-container callout-body">
<p>We’ll equip ourselves with ideas that will ultimately help you decide questions like: how do you organise the clothes in your cupboard?</p>
<table class="table">
<colgroup>
<col style="width: 19%">
<col style="width: 37%">
<col style="width: 43%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>Throw ’em in, nobody’s looking</th>
<th>Keep it where you can find it later</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Time to process</td>
<td>Negligible</td>
<td>Forever</td>
</tr>
<tr class="even">
<td>Time to retrieve</td>
<td>Forever</td>
<td>Negligible</td>
</tr>
</tbody>
</table>
<p>Table 1. No free lunches.</p>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
This <em>is</em> in fact a useful framing!
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-table01.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Table 1 Revisited. No Free Lunches</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="representing-polynomials" class="level2">
<h2 class="anchored" data-anchor-id="representing-polynomials">Representing Polynomials</h2>
<p>Let’s say that you are spending a fine evening watching the #LockdownMath playlist from 3blue1brown. The first episode happens to be all about solving quadratics:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-lockdownmath.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A screenshot from #LockdownMath showing Grant Sanderson solving quadratics.</figcaption><p></p>
</figure>
</div>
<p>Now, it’s quite natural to want to “write a program”, so to speak, that can take a quadratic equation such as <img src="https://latex.codecogs.com/png.latex?x%5E2%20-%207x%20+%2012"> as input and output its two roots.</p>
<p>Given that programs running on your phone are able to make suggestions, even if dubious, for what series to binge-watch next on Netflix, finding roots of quadratics should be a fairly benign exercise.</p>
<p>You might recall that most programs let you declare variables that can hold on to specific <em>types</em> of information, for instance: numbers, strings, and so forth. Our input doesn’t “look” like a number, so it would be a fair take to simply store it as a string:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb1-1">px <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"x^2 - 7x + 12"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Now…
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-meme01.jpeg" title="Meme: So preoccupied with if you could, you didn't stop to ask if you should." class="img-fluid"></p>
</div>
</div>
</div>
<p>While this is a perfectly faithful representation, you can imagine that it would be slightly painful to work with. You would have to write some code that can “pull out” the parts of the string that represent the <em>numbers</em> you care about (in this example, <img src="https://latex.codecogs.com/png.latex?b%20=%20-7"> and <img src="https://latex.codecogs.com/png.latex?c%20=%2012">), so that you can move on to your calculation, which is an <em>expression</em> involving numbers.</p>
<p>Given that a quadratic with the leading coefficient normalized to one is uniquely determined by two numbers, it seems a lot simpler to directly represent the polynomial as two integers instead:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb2-1">px_b <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb2-2">px_c <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">12</span></span></code></pre></div>
<p>You might appreciate that this saves us quite some circus and we can quite directly get to the computation we’re interested in. What if you cared about higher order polynomials? You may want to solve them (even if you <a href="https://www.youtube.com/watch?t=2543&amp;v=O5eH3x3sTNA&amp;feature=youtu.be">run out of expressions for solutions pretty quickly</a>, you might be interested in <a href="https://math.stackexchange.com/a/1386830">other ways of getting to the roots</a>), or manipulate them in other ways (for example, by adding or <a href="https://www.youtube.com/watch?v=h7apO7q16V0">multiplying</a> them).</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>How would you represent higher-order polynomials? What about multivariate polynomials? Is there a way that you might be able to capture an algebraic expression for a polynomial without either using strings or just the coefficients?</p>
</div>
</div>
</section>
<section id="representing-a-game---i" class="level2">
<h2 class="anchored" data-anchor-id="representing-a-game---i">Representing a Game - I</h2>
<p>The <a href="https://www.youtube.com/watch?v=846A4rgO_os">game of 100</a> goes like this: I pick a number between 1 and 10, and then you pick one within the next ten numbers, and on and on. The first person to reach 100 wins.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Recall from class and/or figure out that…
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
SPOILER ALERT
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>...whoever starts has a way of winning the game:

    0. To begin with, I say 1.
    1. No matter what number you pick, I can say 12.
    2. No matter what number you pick, I can say 23.
    3. No matter what number you pick, I can say 34.
    4. No matter what number you pick, I can say 45.
    5. No matter what number you pick, I can say 56.
    6. No matter what number you pick, I can say 67.
    7. No matter what number you pick, I can say 78.
    8. No matter what number you pick, I can say 89.
    9. No matter what number you pick, I can say 100.</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<p>What if you want to write a program that mimics the winning strategy?</p>
<p>Note that this game can go on for at most a 100 steps, and in fact exactly 20 steps (or ten rounds) when you employ said winning strategy. So one way to go about this is to declare 20 variables to track the 20 numbers exchanged between the players. But a moment’s reflection may reveal that you <em>don’t</em> need to store anything at all.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Can you write a program that makes the first move, prompts the user for their moves on their turn, uses the winning strategy discussed above, and uses no variables for explicit storage?</p>
</div>
</div>
</section>
<section id="representing-a-game---ii" class="level2">
<h2 class="anchored" data-anchor-id="representing-a-game---ii">Representing a Game - II</h2>
<p>If <del>you missed the first class</del> you haven’t played the <a href="https://ncase.me/trust/">Game of Trust</a>, you are welcome to take a break and experience it now. Let’s recollect the setup:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-game-trust.png" title="Alt text: The Game of Trust. You have one choice. In front of you is a machine: if you put a coin in the machine, the other player gets three coins and vice versa. You both can either choose to COOPERATE (put in coin), or CHEAT (don't put in coin). The image shows a cartoon machine with players on either side." class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Illustration from an implementation by <a href="https://ncase.me/trust/">Nicky Case</a>.</figcaption><p></p>
</figure>
</div>
<p>Suppose you want to implement your own version of this game, where the program responds to inputs from the user and plays according to a specific, pre-meditated strategy. Remember you have seen some strategies already:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-players-trust.png" title="Five player strategies also outlined below." class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">A second illustration from the same implementation by <a href="https://ncase.me/trust/">Nicky Case</a>.</figcaption><p></p>
</figure>
</div>
<p>We reproduce these strategies below:</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Player Strategies
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>COPYCAT: Hello! I start with Cooperate, and afterwards, I just copy whatever you did in the last round. Meow.</li>
<li>ALWAYS CHEAT: The strong shall eat the weak.</li>
<li>ALWAYS COOPERATE: Let’s be best friends &lt;3</li>
<li>GRUDGER: Listen, pardner. I’ll start cooperatin’, and keep cooperatin’, but if y’all ever cheat me, I’LL CHEAT YOU BACK TIL THE END OF TARNATION.</li>
<li>DETECTIVE: First: I analyze you. start: Cooperate, Cheat, Cooperate, Cooperate. If you cheat back, I’ll act like Copycat. If you never cheat back, I’ll act like Always Cheat, to exploit you. Elementary, my dear Watson.</li>
</ol>
</div>
</div>
<p>Let’s say that your program is designed to play 5 rounds and that your program is playing the copycat strategy. To begin with, you might want to declare a couple of variables to keep track of the scores of the players, and ten variables to track the moves of both players in each round. With this, your code may start out looking like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb4-1">my_points <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-2">user_points <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">user_move_1 <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">input</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Input 1 for Cooperate and 0 for Cheat."</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;">//Sanity check input:</span></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_1 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span> and user_move_1 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb4-8">    express disappointment and abort</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// My first move is to cooperate:</span></span>
<span id="cb5-2">my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-3">user_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_1<span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb5-6">    my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb5-7">    user_points <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<p>Now your next move is determined by the value of <code>user_move_1</code>, so you might proceed as follows.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb6-1">user_move_2 <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">input</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Input 1 for Cooperate and 0 for Cheat."</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">//Sanity check input:</span></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_2 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span> and user_move_2 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb6-5">    express disappointment and abort</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// My next move is based on the user's first:</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_1<span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb7-3">    my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-4">    user_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_2<span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb7-7">    my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb7-8">    user_points <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<p>…and so on and on, you get the drift.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Do you really need ten variables to track the game? If you were instead implementing the always cheat or always cooperate strategy, how many variables would you need? What about the strategies of the grudger and the detective?</p>
</div>
</div>
<p>Now, suppose we come up with our own player, whom we call the <strong>majority mover</strong>. This player looks at your entire game history, and cooperates if you have cooperated more than you have cheated, and cheats if you have cheated more than you have cooperated, and acts randomly otherwise.</p>
<p>It seems like implementing the majority mover strategy would really require keeping track of everything. Or would it? You might observe at this point that it’s enough to keep track of two counts: the number of rounds and the <em>number</em> of moves where the user has cheated: note that it does not matter when the cheats happened in the history of the game.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
You could also…
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>…track the number of cooperate moves along with the number of rounds; or the number of cheat moves and the number of cooperate moves.</p>
<p>At this point it’s a matter of taste :)</p>
</div>
</div>
</div>
<p>How about a <strong>completely random</strong> player? This one chooses a number <strong>K</strong> between 1 and N uniformly at random (let’s not worry about <em>how</em> this is done for now, because that would be a story for another day), where N is the number of rounds played so far; and mimics the other player’s <strong>K</strong>th move. To implement this strategy, you really would need to keep track of the user’s entire game history with the five variables, and also assume that you have a way of picking a number at random.</p>
<p>Finally, consider that instead of fixing your program to play five rounds — 🥱 — you want to politely ask the user how m<em>any </em>rounds they want to play.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
After all…
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-meme02.jpeg" title="Meme: we are professionals." class="img-fluid"></p>
</div>
</div>
</div>
<p>Well, for the first few players, this is just a matter of upgrading your for loop (which you should have switched to already when you realised that you don’t need all. those. variables.) to use N: and you are done.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>How will you implement this version if you are working with our latest player? If you happen to have a very enthusiastic user who asks for half a million rounds, would you be able to declare that many variables all at once, while your program is running? Notably, you don’t know what the user is going to say ahead of time!</p>
</div>
</div>
</section>
<section id="representing-a-subset-of-a-deck-of-cards" class="level2">
<h2 class="anchored" data-anchor-id="representing-a-subset-of-a-deck-of-cards">Representing a subset of a deck of cards</h2>
<p>If you are implementing a card<sup>1</sup> game, you might need a mechanism for keeping track of “hands”, or various subsets of cards. Let’s say a <em>hand</em> is a subset of cards. For many games, you would need the ability to be able to quickly:</p>
<ul>
<li>tell if a particular card belongs to a hand or not,</li>
<li>add a card to a hand,</li>
<li>remove a card from a hand, and</li>
<li>replace a card in a hand with another one.</li>
</ul>
<p>One way to meet these requirements is to declare a collection of 52 boolean (i.e, true/false or 0/1) variables to represent the hand: the cards in the hand are set to true while cards that don’t belong are set to false.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>What do you like about this method? What don’t you like about it?</p>
</div>
</div>
<p>Here’a another way, though: you could agree on a notation for the cards in the deck: e.g, a standard one is to use a number, A/J/Q/K to denote the value, and S/C/D/H to denote the suit, so every card can be represented as a pair of characters. For example the Ace of Diamonds would be AD, the five of spades would be 5S and the King of Hearts would be KH. With this in place, you could represent a hand also by simply <em>concatenating</em> these string representations of the cards in the hand.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>What do you like about this method? What don’t you like about it?</p>
</div>
</div>
<p>Now for this toy example, if you were to implement both methods and clock the time taken to implement the four operations above, you may not notice a major difference. However, for actual applications, you may be in a situation where your <em>subsets</em> (here, the “hands”) may be coming from a large <em>universe</em> (here, the “deck”). On the other hand, you may have a very large number of operations to take care of efficiently.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Are there other ways that you might want to store this kind of information, given the things you want to do are as enlisted above?</p>
</div>
</div>
<p>Your choice of method will again be driven by the requirements: the one thing to keep in mind is that you cannot have it all, but we can usually get pretty damn close!</p>
<p><br></p>
<hr>
<p><br></p>
<div id="hyvor-talk-view">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Assume you are working with the <a href="https://en.wikipedia.org/wiki/Standard_52-card_deck">standard 52-card deck</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/introduction/index.html</guid>
  <pubDate>Sun, 31 Jul 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-table01.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
