<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Pseudorandom Musings</title>
<link>https://neeldhara.blog/index.html</link>
<atom:link href="https://neeldhara.blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.1.189</generator>
<lastBuildDate>Thu, 06 Oct 2022 18:30:00 GMT</lastBuildDate>
<item>
  <title>AB Separation</title>
  <link>https://neeldhara.blog/posts/tgif/ab-separation/index.html</link>
  <description><![CDATA[ 




<div class="callout-tip callout callout-style-simple no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Shared by <a href="https://twitter.com/10kdiver"><span class="citation" data-cites="10kdiver">@10kdiver</span></a>.</p>
</div>
</div>
</div>
<p>A probability puzzle involving tournaments and elimination matches:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Here‚Äôs a neat probability puzzle ‚Äî somewhat counter-intuitive: <a href="https://t.co/QA6jxaIYFT">pic.twitter.com/QA6jxaIYFT</a>
</p>
‚Äî 10-K Diver (<span class="citation" data-cites="10kdiver">@10kdiver</span>) <a href="https://twitter.com/10kdiver/status/1573280126061740032?ref_src=twsrc%5Etfw">September 23, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="page-columns page-full"><p>To begin with, a clarification: to say that Alex is the best player is to say that Alex will always win a match that he plays; and to say that Bob is the second best player is to say that Bob will win any match that he plays other than one against Alex. The puzzle asks for the probability that Bob emerges the runner up in the tournament. </p><div class="no-row-height column-margin column-container"><span class="aside">This is indicated in the tweet but the crop seems to hide it.</span></div></div>
<p>Suppose we denote the players <img src="https://latex.codecogs.com/png.latex?%5C%7Ba_1,a_2,a_3,a_4,b_1,b_2,b_3,b_4%5C%7D">, and say the players are initially matched up like so:</p>
<p><img src="https://latex.codecogs.com/png.latex?(a_1,a_2);%20(a_3,a_4);%20(b_1,b_2);%20(b_3,b_4),"></p>
<p>and in particular we have:</p>
<ul>
<li>one of the quarter finals will be between <img src="https://latex.codecogs.com/png.latex?a_p"> and <img src="https://latex.codecogs.com/png.latex?a_q"> for <img src="https://latex.codecogs.com/png.latex?p%20%5Cin%20%5C%7B1,2%5C%7D"> and <img src="https://latex.codecogs.com/png.latex?q%20%5Cin%20%5C%7B3,4%5C%7D">,</li>
<li>the quarter finals will be between <img src="https://latex.codecogs.com/png.latex?b_r"> and <img src="https://latex.codecogs.com/png.latex?b_s"> for <img src="https://latex.codecogs.com/png.latex?r%20%5Cin%20%5C%7B1,2%5C%7D"> and <img src="https://latex.codecogs.com/png.latex?s%20%5Cin%20%5C%7B3,4%5C%7D">, and</li>
<li>the semi finals will be between an <img src="https://latex.codecogs.com/png.latex?a">-player and a <img src="https://latex.codecogs.com/png.latex?b">-player.</li>
</ul>
<p>A moment‚Äôs reflection reveals that for Bob to be a runner up, he should not meet Alex in the quarter-finals or earlier. This happens if and only if:</p>
<ul>
<li>either Alex is one of the <img src="https://latex.codecogs.com/png.latex?a">-players and Bob is one of the <img src="https://latex.codecogs.com/png.latex?b">-players, or</li>
<li>Bob is one of the <img src="https://latex.codecogs.com/png.latex?a">-players and Alex is one of the <img src="https://latex.codecogs.com/png.latex?b">-players.</li>
</ul>
<p>From here it is a counting argument. I was distracted by some idea of symmetry and originally <a href="https://twitter.com/neeldhara/status/1573691611002769408?s=20&amp;t=-A9VW9YgGCp2qDAyY_Yw6Q">jumped to the conclusion</a> that the answer is one-half. Spoiler alert: I quickly learned that it‚Äôs not!</p>



 ]]></description>
  <category>puzzles</category>
  <category>tgif</category>
  <guid>https://neeldhara.blog/posts/tgif/ab-separation/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>2022 Exportober Tracker</title>
  <link>https://neeldhara.blog/posts/exportober/2022-tracker/index.html</link>
  <description><![CDATA[ 




<section id="the-leaderboard" class="level2">
<h2 class="anchored" data-anchor-id="the-leaderboard">The Leaderboard</h2>

<iframe class="airtable-embed" src="https://airtable.com/embed/shrjgp87jlNqDMCy4?backgroundColor=yellow&amp;viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;">
</iframe>
</section>
<section id="the-tweets" class="level2">
<h2 class="anchored" data-anchor-id="the-tweets">The Tweets</h2>

<iframe class="airtable-embed" src="https://airtable.com/embed/shrwXyP8mGB3KH86i?backgroundColor=yellow&amp;viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;">
</iframe>
</section>
<section id="what-was-this-about-again" class="level2">
<h2 class="anchored" data-anchor-id="what-was-this-about-again">What was this about again?</h2>
<p>You can find the original announcement <a href="../2022/">here</a> and more specifics clarifying the format (or the lack of it) <a href="../about/">here</a>. Here‚Äôs the short version:</p>
<ul>
<li>Put up a piece of content everyday between 1st October and 30th October, with the possibility of skipping one day per week;</li>
<li>Post a link to your content on Twitter with #exportober</li>
<li>That‚Äôs it, actually. ü§∑‚Äç‚ôÄÔ∏è</li>
</ul>
<p>Psst. It‚Äôs quite fine to sign up even if you‚Äôre reading this after the 1st of October. The automated tracking exercise here will stop after the 15th of November, so you can be a part of this by just contributing in this window. It certainly does‚Äôt <em>have</em> to be daily and it doesn‚Äôt <em>have</em> to be 30 things, although I found those to be useful default targets to work with for myself.</p>
<!-- ## Sign up! -->
<!-- While I'm not going to write a Twitter bot that will send you daily reminders over DM, I do hope to create a separate page for each registered participant at the end of the challenge that shows off just their entries in one place, so it's helpful to know who you are üòÄ -->


</section>

 ]]></description>
  <category>exportober</category>
  <category>funda</category>
  <guid>https://neeldhara.blog/posts/exportober/2022-tracker/index.html</guid>
  <pubDate>Thu, 06 Oct 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>SKJ</title>
  <link>https://neeldhara.blog/posts/skj/index.html</link>
  <description><![CDATA[ 




<p>This is the text of a short speech I gave at the farewell event for <a href="https://sudhirjain.info/">Prof.&nbsp;Sudhir Jain</a> as he left IITGN for BHU.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/skj/skj.jpg" class="img-fluid figure-img" style="width:87.0%"></p>
<p></p><figcaption class="figure-caption">Prof.&nbsp;Jain at the farewell event held on the 3rd January, 2022.</figcaption><p></p>
</figure>
</div>
<p>You can find out more about Prof.&nbsp;Jain‚Äôs own take on the cultural foundations of IIT Gandhinagar <a href="https://iitgn.ac.in/about/cultural_foundations">here</a>, where he is in conversation with <a href="https://www.linkedin.com/in/achal-mehra-13037931/">Achal Mehra</a>.</p>
<hr>
<blockquote class="blockquote">
<p>Canadian astronaut Chris Hadfield has said that leadership is not about glorious crowning acts. It‚Äôs about keeping your team focused on a goal and motivated to do their best to achieve it, especially when the stakes are high and the consequences really matter. It is about laying the groundwork for others‚Äô success, and then standing back and letting them shine. If that sounds familiar, I think it‚Äôs because we have lived this experience at IIT Gandhinagar, thanks to Prof.&nbsp;Jain.</p>
<p>Our guiding principles have been often unconventional ‚Äî whether it‚Äôs about having students first, or choosing to trade short-term gains for the long-term vision. They have sometimes led to decisions that would seem quite inexplicable to anyone who did not have the context. Some of you might remember how early we started the undergraduate program in Computer Science, for example. Ok, so for the record, we started it quite late, at least according to conventional wisdom.</p>
<p>Crucially, these core values have always been articulated in collaboration, with inputs from all stakeholders, which is what enables our shared conviction in them once they have been established.</p>
<p>Prof.&nbsp;Jain‚Äôs vision for IIT Gandhinagar is as precise as it‚Äôs bold ‚Äì he knew exactly what needed to be done for this place to emerge as a model institution. He had recently shared with us his roadmap for IITGN from a dozen years ago. This roadmap committed not to vague ideas but concrete goals, complete with numbers for metrics that are fraught with uncertainty. It‚Äôs absolutely stunning how everything panned out almost exactly according to plan!</p>
<p>Our narrative has many collaborators, including our students, faculty, and staff. And while some of us are relatively inexperienced, Prof.&nbsp;Jain‚Äôs trust in everyone has been hugely empowering. It manifests in many concrete ways ‚Äì starting from wanting for students to be recognized as adults, to turning young colleagues into decision-makers‚Ä¶ and this is why all of us have a deep sense of ownership for IITGN.</p>
<p>An environment that gives all of us the freedom to experiment and the leeway to fail is extremely enabling. This has led to a wide spectrum of wins, many that are quantifiable and others that are less tangible. If you want to get a sense of how good the times have been, just look around ‚Äì the sheer beauty and the attention to detail that the campus embodies is an excellent symbolism for the inclusive, thoughtful, and innovative leadership that we have experienced. When it comes to how far we have come, I could go on‚Ä¶ pretty much forever, so I‚Äôll defer you to the website for more details.</p>
<p>It is impossible to imagine IITGN without you. This is your brainchild through and through. Despite knowing that you‚Äôll not be distancing in spirit, we will miss having you nurture the institution in the hands-on manner that you have always done. Your passion for the IITGN mission ‚Äì of being a breakout university while operating within the limitations and strengths of the IIT system ‚Äì is contagious. I am sure you plan to double down on this even though you may have a few distractions going forward.</p>
<p>I recently watched Maanaadu, a movie based on the idea of a time loop. In such stories, the plot involves the protagonist experiencing the same day over and over again, and their goal, typically, is to find an exit. If there is one day that we could put into a time loop, it would be today, and there would be no need to get out of it.</p>
<p>In the meantime ‚Äì on behalf of all of us, thank you.</p>
<p>Thank you for your commitment, trust, and friendship; for listening patiently, for leading tirelessly, and for fighting the good fight through tough times, and for the good times through tough fights ‚Äì ok, I‚Äôm going to be out of time, here, clearly ‚Äì so let me just say, thank you for everything.</p>
</blockquote>



 ]]></description>
  <category>iitgn</category>
  <guid>https://neeldhara.blog/posts/skj/index.html</guid>
  <pubDate>Thu, 22 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/skj/skj.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>External Communications</title>
  <link>https://neeldhara.blog/posts/comms/index.html</link>
  <description><![CDATA[ 




<p>I finish seven years at IIT Gandhinagar today.</p>
<p>This year, I also concluded my stint with the Department of External Communications, which feels about as long. Indeed, little did I know that a casual remark that I had made during my interview<sup>1</sup>, about wanting to be a writer for as long as I can remember, was carefully noted ‚Äî and magically my service responsibilities would end up being related to my childhood dream. A few days after I joined, I met <a href="https://www.linkedin.com/in/achal-mehra-13037931/">Achal Mehra</a>, who introduced me to <a href="https://iitgn.ac.in/about/newsletter"><em>Connections</em></a>: a four-page newsletter that went places every quarter. In my mind, that conversation kickstarted my collaboration with what everyone fondly calls ‚Äúcomms‚Äù. Seven years later, I‚Äôm here to report that the journey has been fun and fulfilling in equal measure.</p>
<p>Through this post, I‚Äôd like to introduce you to the comms team: if you have been to IITGN for an event, read about us in the press, have recieved a newsletter from us, visited our website, or followed our social media: these are the folks who work behind the scenes on these fronts. Being a part of this gang has been a huge inspiration: everyone is talented but always willing to learn; their hard work is driven by a sense of ownership; and there‚Äôs plenty of wit to help beat the heat :)</p>
<p>Here‚Äôs collection of some randomly chosen memories: my hat-tip to a stellar team.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/comms/1.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The External Communications Team. From left to right: Hatim, Dilip, Tej, Apeksha, Dhara, Divyangi, Yours Truly, Chandni, Vandana, Shivangi, Gaurav, and Devarsh.</figcaption><p></p>
</figure>
</div>
<section id="hatim" class="level2">
<h2 class="anchored" data-anchor-id="hatim">Hatim</h2>
<p><a href="https://www.linkedin.com/in/hatimsham/">Hatim</a> joined us in the summer of 2018 and worked with us for four years. This summer, he moved on to join the design unit at <a href="https://www.isdm.org.in/team">ISDM</a> as a Graphic Designer and Video Editor.</p>
<p>Hatim has had a creative flair from the get go. He‚Äôs been a part of several exciting projects, including being the person <a href="https://www.facebook.com/hatimsham/posts/pfbid02hWtj37tfFBSZiWmbe5yXTALMbDpG41YkGWtWZa4kxr25dysYdHnEjxZQMH6y5HcTl">behind the visuals</a> for Alok Kanungo‚Äôs book, <em>Glass Crafts in Northern India</em>. Also, <a href="https://twitter.com/iitgn/status/1285917964059869184">here‚Äôs a cool trailer</a> he put together very quickly for the ACM-W India Grad Cohort that I was involved in organizing in 2020.</p>
</section>
<section id="dilip" class="level2">
<h2 class="anchored" data-anchor-id="dilip">Dilip</h2>
<p><a href="https://www.linkedin.com/in/dilip-kashyap-49aaaaa0/">Dilip</a> joined us in the summer of 2018. He had a distinct passion for developing mobile and web applications, and indeed, he‚Äôs been a huge asset to the web vertical of the team. He‚Äôs been relentless in learning new things and has been <a href="https://dilipkashyap15.medium.com/">writing on Medium</a> too.</p>
<p>When we were organizing the ACM-India Annual event and the team was freaking out over having upwards of 1000 registrations, Dilip wrote a mobile app for us ‚Äî literally overnight ‚Äî which allowed us to send all participants a QR code that they simply had to show to get through physical registration. It saved us a ton of time. You can find out more about Dilip <a href="https://dilipkashyap07.github.io/">here</a>.</p>
</section>
<section id="tej" class="level2">
<h2 class="anchored" data-anchor-id="tej">Tej</h2>
<p><a href="https://www.linkedin.com/in/tej-bahadur-gurung-8b94232a/">Tej</a> joined us in the winter of 2016 as a web developer and has been my officemate. Tej is among the first points of contact for all new faculty at IITGN: their institutional profile pages are set up even before they actually set foot on campus. Tej‚Äôs name is synonymous with ‚Äúwebsite‚Äù. If anyone needs one done, whether it‚Äôs for their lab, or an event, he‚Äôs always been an email away. True to an appropriate mispronouciation of his name<sup>2</sup>, Tej has remarkable turnaround times, and seems to get things done as fast as you can spell them out.</p>
<p>One of my most memorable projects with Tej (along with Dilip, Divyangi, and the rest of the team) is the revamp of the main IITGN website. We went from this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/comms/old.png" class="img-fluid figure-img" style="width:70.0%"></p>
<p></p><figcaption class="figure-caption">The old IITGN website, <a href="https://legacy.iitgn.ac.in">here</a>.</figcaption><p></p>
</figure>
</div>
<p>to this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/comms/new.gif" class="img-fluid figure-img" style="width:70.0%"></p>
<p></p><figcaption class="figure-caption">The current IITGN website, <a href="https://www.iitgn.ac.in">here</a>.</figcaption><p></p>
</figure>
</div>
<p>in about a year. Despite several very well-intended warnings about how crazy this was, the team picked up the project with cautious courage, and pulled it off. I think I can say with some confidence that the IITGN website is easy on the eyes, and things are not hard to find.</p>
</section>
<section id="apeksha" class="level2">
<h2 class="anchored" data-anchor-id="apeksha">Apeksha</h2>
<p><a href="https://www.linkedin.com/in/srivastava-apeksha/">Apeksha</a> joined us in the summer of 2019, just on the heels of completing her MTech in Biological Engineering at IITGN, and stayed with the team for a year. At the time of joining, she was an avid consumer of popular science material, and aspired to make the research at IITGN more broady accessible with her writing. She was a freelance writer already, and was looking for an opportunity to spend some time writing full-time. Her stint with us resulted in a number of articles, and her growth during the time has been remarkable. You can find her writing on <a href="https://medium.com/@apeksha.0503">her Medium blog</a>.</p>
<p>The ACM-W India Grad Cohort event we did in 2020 was a virtual one, and in the tradition of Grad Cohorts, was not recorded. I am grateful that Apeksha stepped up at the time, offered to attend all the sessions, and <a href="https://medium.com/@apeksha.0503/the-acm-w-grad-cohort-2020-women-conquering-computing-online-ca085623e396">wrote</a> <a href="https://medium.com/@apeksha.0503/grad-cohort-2020-day-1-of-the-women-virtual-workshop-in-computing-opens-with-a-bang-56407c113ad">up</a> <a href="https://medium.com/@apeksha.0503/acm-w-grad-cohort-2020-day-2-a-perfect-combo-of-motivation-and-quality-advice-from-women-leaders-3f2c629e05e5">comprehensive</a> <a href="https://medium.com/@apeksha.0503/day-3-acm-w-grad-cohort-2020-concludes-with-strong-networking-opportunities-and-professional-bc8c78efbc33">summaries</a>.</p>
<p>She has now joined the Ph.D.&nbsp;program in the Humanities and Social Sciences and is currently researching cognitive aspects of science communication with <a href="https://en.wikipedia.org/wiki/Frederick_L._Coolidge.">Frederick Coolidge</a>.</p>
</section>
<section id="dhara" class="level2">
<h2 class="anchored" data-anchor-id="dhara">Dhara</h2>
<p><a href="https://www.linkedin.com/in/dhara-vora-1019/">Dhara</a> joined us in the summer of 2018, and immediately got to work on managing our social media channels. She also streamlined the process of collecting information: a lot of what we do revolves around robust archival, and IITGN being a happening place does not make this easy! We get dozens of emails every day announcing events of varying scales, updates of various kinds.</p>
<p>Anticipating that the volume would only get worse, we devised a system for manually cataloging every bit of news in a bunch of Airtable bases. The long-term vision was that the Airtable API exposes this data to anyone who needs it: the web team could draw from it and filter appropriately to display upcoming events, an archival team could write a report generating app that used this as the backend, and so forth. We even had a web app developed by a team of undergraduates that pulled data from these bases to show off upcoming events on a big screen.</p>
<p>Dhara now manually curates information from these databases and runs a weekly internal newsletter collating what‚Äôs happened and what‚Äôs coming up at IITGN: this has been a major value addition for many. She also serves up the raw data needed for our public <a href="https://iitgn.ac.in/about/newsletter">quarterly newsletter</a> and <a href="https://iitgn.ac.in/about/annualreports">annual reports</a> based on this system, which saves everyone a lot of time. Apart from all of this, she is in the driver‚Äôs seat for all our <a href="https://twitter.com/iitgn">major</a> <a href="https://www.facebook.com/iitgn.official">social</a> <a href="https://www.linkedin.com/school/indian-institute-of-technology-gandhinagar-iitgn-/">media</a> <a href="https://www.instagram.com/iit_gandhinagar/">channels</a>, and then some‚Ä¶ and magically manages to stay on top of everything. You can <a href="https://medium.com/@voradhara46">find her writing on Medium</a>.</p>
</section>
<section id="divyangi" class="level2">
<h2 class="anchored" data-anchor-id="divyangi">Divyangi</h2>
<p><a href="https://www.linkedin.com/in/divyangi-chaudhari-404115140/">Divyangi</a> joined us in the summer of 2018 and worked with us for three years until the summer of 2021. She was a wizard when it came to scripting for automating tasks, and quickly became the go-to person for departments who were looking to improve their workflows.</p>
<p>IITGN runs on the Google ecosystem. Divyangi figured out several nice ways of bringing data from spreadsheets to frontends, generating reports, and so forth. She even ran a workshop on Google scripts and related tools as a part of an initiative coordinated by our Staff Development Cell.</p>
<p>Among the many projects Divyangi was involved in, one of my favorites was the backend for our rather popular <a href="https://srip.iitgn.ac.in/">Summer Research Internship Program</a>. The website is powered by WordPress, and provides various interfaces for both interns and mentors to keep track of their applications during the application phase (this runs into tens of thousands of records), and progress during the internship (updates from interns and feedback from mentors are all managed from here). Divyangi, together with Dilip, deeply customized the WordPress instance to provide a number of features that help with running a large-scale program smoothly, with most of the tedious tasks completely automated.</p>
</section>
<section id="chandni" class="level2">
<h2 class="anchored" data-anchor-id="chandni">Chandni</h2>
<p>Chandni joined us in the summer of 2019 for a year. She was already a very talented photographer at the time of joining us. As our events and activities grew in number and scale, we found very valuable support in Chandni‚Äôs presence. Check out her <a href="https://www.instagram.com/visi_lens/">Instagram</a> here!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/comms/chand.png" class="img-fluid figure-img" style="width:70.0%"></p>
<p></p><figcaption class="figure-caption">A sample of Chandni‚Äôs photography</figcaption><p></p>
</figure>
</div>
</section>
<section id="vandana" class="level2">
<h2 class="anchored" data-anchor-id="vandana">Vandana</h2>
<p><a href="https://www.linkedin.com/in/vandanay/">Vandana</a> joined us in the summer of 2017 in the role of a Communications and Media Officer for a year. During this time, she was working closely with local press and media, and ensuring that our stories are filed with them on a regular basis.</p>
<p>Vandana was already passionate about writing and had a keen eye for detail. She filled an important void at the time she joined and immediately setup various important foundations in the context of this role. She expanded our style guide, made a press kit, and developed a starting database of journalists that we could work with: these are all tools that the whole content team uses regularly to this day.</p>
<p>Her spirit of volunteerism meant that a lot of our content got reviewed and improved across the board: on the website, on our brochures, and so forth. This was also the time when we launched what I think is our best-kept secret: IITGN‚Äôs <a href="https://news.iitgn.ac.in">news blog</a>. Vandana, along with the rest of the team, setup a careful pipeline to ensure that everything we capture across press and social media gets a permanent home on the blog. She continues to pitch in remotely, even after moving on from her onsite role with us on campus.</p>
</section>
<section id="shivangi" class="level2">
<h2 class="anchored" data-anchor-id="shivangi">Shivangi</h2>
<p><a href="https://www.linkedin.com/in/shivangi-bhatt-365b4a38/">Shivangi</a> joined us in the summer of 2018 in the role of a Communications and Media Officer, picking up from where Vandana left off. She has been synonymous with media and press at IITGN, and is currently our main interface with the press. She has substantially expanded on our network of partners in press, and ensures that we have the visibility we deserve in the local and national news, and even beyond. She is especially diligent about ensuring that regionally-focused news is appropriately translated in the local languages whenever appropriate, a widely appreciated effort.</p>
<p>Shivangi‚Äôs style has been remarkably proactive: if anything at IITGN is newsworthy, she makes sure it‚Äôs covered. She draws on her substantial experience in the field to bring nuanced insights to the table, and these have served us very well in our overall communications and outreach strategy.</p>
<p>Beyond coordinating stories for the press, Shivangi also comprehensively tracks IITGN‚Äôs presence in the news and other public domains, is closely invovled in the production of the <a href="https://iitgn.ac.in/about/newsletter">quarterly newsletter</a> and <a href="https://iitgn.ac.in/about/annualreports">annual reports</a>, and our social media activities as well. Shivangi is, unsurprisingly, an amazing writer, and <a href="https://www.facebook.com/shivangi.bhatt.501/posts/pfbid0CB5AGAkotx6cuXnYdNKGqVWc9jE7p3DrodzKTYGGDymSDWC4fxCJNer6bUrLCpJol">here‚Äôs a performance of hers</a> in a SDC event that was among my favorites.</p>
</section>
<section id="gaurav" class="level2">
<h2 class="anchored" data-anchor-id="gaurav">Gaurav</h2>
<p><a href="https://www.linkedin.com/in/gauravvipul/">Gaurav</a> has been around for longer than I have, and he is a founding member of the team. He is among the most versatile people I know: not only does the scope of his work at IITGN go well beyond communications, even within communications his skills span a very wide range: he‚Äôs behind the camera, he‚Äôs the person behind the design and layouts for some of our best print collaterals, he‚Äôs directed and produced a number of videos, and I could go on and on.</p>
<p>I‚Äôve freely relied on his mentorship: much of the growth that has happened within the team, especially in terms of creative efforts, is thanks to Gaurav‚Äôs experience and guidance.</p>
<p>If you pick up any of our booklets, there‚Äôs a good chance that Gaurav has been involved in engineering the layout and design. Among them, I‚Äôll single out a couple for you to sample: the <em><a href="https://iitgn.ac.in/assets/pdfs/brochures/faculty-brochure.pdf">World Class Faculty</a></em> brochure looks especially lovely in print, and the <a href="https://sites.iitgn.ac.in/10/index.php">10 on 10</a> brochure has a bold aesthetic that was a crowd favorite when it was released for our 10-year celebration.</p>
</section>
<section id="devarsh" class="level2">
<h2 class="anchored" data-anchor-id="devarsh">Devarsh</h2>
<p><a href="https://www.instagram.com/dev_barbhaya/">Devarsh</a> joined us in the summer of 2017, with a background in creative film-making and theatre. He quickly became the go-to person when it came to anything to do with video or photography. Over the years here, he‚Äôs grown leaps and bounds in his craft and understanding of all aspects of the process ‚Äî both work that happens on the field and in post.</p>
<p>Our YouTube presence was in its nascent stages when Devarsh joined. He‚Äôs single-handedly worked on <a href="https://www.youtube.com/channel/UCbOCAa_fRS1qEOknCmEHzVw">our channel</a> in mission mode from the get go, and it is largely thanks to his efforts that we have a fairly systematic video respository of most major events and talks on campus.</p>
<p>Devarsh has been involved in several memorable projects. Here‚Äôs <a href="https://www.youtube.com/embed/lZSAkpjsyZs">a video</a> that he shot for our first virtual convocation, which also happened to be among the first virtual convocation events to be held in India (as far as we know).</p>
</section>
<section id="nostalgia" class="level2">
<h2 class="anchored" data-anchor-id="nostalgia">Nostalgia</h2>
<p>Some of the early members of the team are not pictured. Apart from everyone above, I had the good fortune to have worked with: Ritu (among other things, was the curator for all the early editions of the quarterly newsletter, <em>Connections</em>, and our annual reports), Dayanand (our first communications and media officer), Maria (our first social media intern), and Khushbu (who took over from Maria and preceded Dhara on managing social media).</p>
<p>It would be remiss of me to not give a shout out to the faculty support we have enjoyed over the years. Several colleagues have played major roles in helping out on all aspects of our responsbilities. A special thanks to Achal Mehra, who brought extensive experience to the table, and has been forever generous with his time and advice, and <a href="https://twitter.com/iitgn/status/1163406174626050048">Vasco Trigo</a>, whose inputs for the whole team were extremely timely and valuable.</p>
<p>I‚Äôll also take this opportunity to thank friends at the Communications department at Duke University ‚Äî they hosted us in the very early days, and their detailed and candid tour of various operational aspects was massively helpful in setting up a lot of the foundations back here.</p>
<p>I walked into this gig more or less by accident. I should confess here that I didn‚Äôt have a 5-year vision from which I could work backwards to nicely chunked milestones. There were no OKRs or KPIs or whatever else the pros do. A few times, it‚Äôs occurred to us that we should have targets, strategies, and systems<sup>3</sup>. While we never articulated any as far as I can remember, I think we did have a tacitly shared goal: it was to ensure that everyone got what they needed from comms, and that we didn‚Äôt make any mistake twice. My biases notwithstanding, I would say we have largely succeded :)</p>
<p>My time with this team remains special forever.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This was during the summer of 2015, with <a href="https://sudhirjain.info/">Prof.&nbsp;Sudhir Jain</a>.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Tez = fast in Hindi‚Ü©Ô∏é</p></li>
<li id="fn3"><p>Most people at IITGN know by now that ambushing me in a corridor is more effective than email, and meanwhile, the team gets things done by some magic that remains a mystery to me.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>iitgn</category>
  <guid>https://neeldhara.blog/posts/comms/index.html</guid>
  <pubDate>Thu, 22 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/comms/1.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Dog Bunny Puzzle</title>
  <link>https://neeldhara.blog/posts/dogs-bunny-puzzle/index.html</link>
  <description><![CDATA[ 




<section id="dog-bunny-a-cute-puzzle" class="level3">
<h3 class="anchored" data-anchor-id="dog-bunny-a-cute-puzzle">Dog Bunny: A Cute Puzzle</h3>
<p>Conrad Barski (<a href="https://twitter.com/lisperati"><span class="citation" data-cites="lisperati">@lisperati</span></a>)‚Äôs latest, <a href="http://www.dogbunnypuzzle.com/">Dog Bunny Puzzle</a>, had <a href="https://news.ycombinator.com/item?id=32884467">jumped to #1 on HN</a>. The puzzle presents the following somewhat minimalist interface:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dogs-bunny-puzzle/puzzlescreenshot.png" class="img-fluid figure-img" style="width:77.0%"></p>
<p></p><figcaption class="figure-caption">The Dogs Bunny Puzzle</figcaption><p></p>
</figure>
</div>
<p>If you haven‚Äôt played it yet, you might want to go ahead and <a href="http://www.dogbunnypuzzle.com/">give it a shot</a> first. Most people figured out the mechanics without any explicit instructions. A couple of things that may not be immediately clear, but typically discovered quickly within a few moves:</p>
<ul>
<li><p>The edges are labeled with conditions, and can be used only if <em>all</em> of the said conditions are met.</p></li>
<li><p>The bunny or dog icons may sometimes cover up what kind of location they are at. You can drag them away to find out!</p></li>
<li><p>Multiple animals can occupy the same spot at a time.</p></li>
<li><p>It is possible to get into a dead end, a situation from where no legal moves are possible. In the verison of the game that is available at the time of this writing, the game offers no sign that you might be in this situation. This may <a href="https://twitter.com/lokshtanov/status/1571597503795167232">however change</a>.</p></li>
</ul>
<p>After winging it on the puzzle, several questions seemed natural:</p>
<div class="callout-note callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What‚Äôs the smallest number of moves to win?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><a href="https://gist.github.com/wrbs/5824e9b17c55b5ad3d8467f93e12ed8b">Apparently 26.</a></p>
</div>
</div>
</div>
<div class="callout-note callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Can you write a program to find a solution?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><a href="https://github.com/polkerty/dog-bunny-puzzle-solver/blob/master/main.py">Yes</a> (Python) and <a href="http://hakank.org/picat/dogbunny_puzzle.pi">yes</a> (Picat).</p>
</div>
</div>
</div>
<div class="callout-note callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Can a script generate more of these puzzles?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Indeed:</p>
<blockquote class="twitter-tweet blockquote" data-conversation="none">
<p lang="en" dir="ltr">
For those paying attention, yes I am two days late :(<br><br>FYI, I also have a program now that can create an infinite number of these puzzles at differing difficulty<br><br>How would you rate the puzzle I posted today?
</p>
‚Äî Conrad Barski (<span class="citation" data-cites="lisperati">@lisperati</span>) <a href="https://twitter.com/lisperati/status/1571232335043112960?ref_src=twsrc%5Etfw">September 17, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
</div>
</div>
<div class="callout-note callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Are there connections with other well-known puzzles?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Why yes, check out the <a href="https://en.wikipedia.org/wiki/Wolf,_goat_and_cabbage_problem">Wolf puzzle</a> (as pointed out by <a href="https://twitter.com/RianNeogi/status/1571608738791817217"><span class="citation" data-cites="RianNeogi">@RianNeogi</span></a>) and this <a href="https://www.youtube.com/watch?v=ZCVAGb1ee8A">Numberphile video</a> about it.</p>
</div>
</div>
</div>
<div class="callout-note callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Is the problem NP-complete?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Before you ask, <a href="https://twitter.com/gfredericks_/status/1571247392321671174">I am not the only one</a> who‚Äôs asking!</p>
</div>
</div>
</div>
<p>So the last question may strike you as a bit left-field, but that‚Äôs what I‚Äôm going to ramble about for the rest of this post :) It turns out that the answer is in the affirmative, and <a href="https://twitter.com/lokshtanov/status/1571588360254410752">here</a> is a lovely reduction by <a href="https://twitter.com/lokshtanov"><span class="citation" data-cites="lokshtanov">@lokshtanov</span></a> showing as much.</p>
</section>
<section id="the-reduction" class="level3">
<h3 class="anchored" data-anchor-id="the-reduction">The Reduction</h3>
<p>Let‚Äôs just set up the game as a computational problem just to be sure that we agree on the abstraction. In fact, we‚Äôll be working with a simpler version that we will call <code>BunnyCarrot</code>.</p>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
BunnyCarrot
</div>
</div>
<div class="callout-body-container callout-body">
<p>In the <code>BunnyCarrot</code> problem, the input is a simple undirected graph <img src="https://latex.codecogs.com/png.latex?G%20=%20(V,E)">, subsets <img src="https://latex.codecogs.com/png.latex?B"> and <img src="https://latex.codecogs.com/png.latex?C"> of <img src="https://latex.codecogs.com/png.latex?V"> indicating the initial positions of bunnies and carrots, and a (possibly empty) instruction <img src="https://latex.codecogs.com/png.latex?r_e"> for every <img src="https://latex.codecogs.com/png.latex?e%20%5Cin%20E">, which is a collection of conditions, <em>at least</em> one‚Ä† of which must be true for the edge <img src="https://latex.codecogs.com/png.latex?e"> to be ‚Äúactive‚Äù.</p>
<p>The question is if there is a sequence of movements of bunnies along active edges such that at the end of the sequence, every bunny is located at one of the vertices from <img src="https://latex.codecogs.com/png.latex?C">.</p>
<p>‚Ä† In the original version of the problem, we need <em>all</em> conditions associated with an edge to be satisfied, not at least one. The construction that we will describe can be easily adapted to this setting as well, but is simpler to describe for this variant :)</p>
</div>
</div>
<p>We are going to show that <code>BunnyCarrot</code> is NP-complete by reducing from <code>3SAT</code>. So let <img src="https://latex.codecogs.com/png.latex?%5Cphi%20:=%20%5C%7BC_1,%20%5Cldots,%20C_m%5C%7D"> be a collection of <img src="https://latex.codecogs.com/png.latex?m"> 3SAT clauses over variables <img src="https://latex.codecogs.com/png.latex?%5C%7Bx_1,%20%5Cldots,%20x_n%5C%7D">. The reduced instance of <code>BunnyCarrot</code> corresponding to <img src="https://latex.codecogs.com/png.latex?%5Cphi"> looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dogs-bunny-puzzle/reduction2.png" class="img-fluid figure-img" style="width:87.0%"></p>
<p></p><figcaption class="figure-caption">A cartoon sketch of the reduced instance of BunnyCarrot from 3SAT.</figcaption><p></p>
</figure>
</div>
<p>What we have here is the following in terms of the structure of graph:</p>
<ul>
<li><p>a path <img src="https://latex.codecogs.com/png.latex?X"> on <img src="https://latex.codecogs.com/png.latex?m+2"> vertices, with the left most vertex in <img src="https://latex.codecogs.com/png.latex?B"> and the rightmost one in <img src="https://latex.codecogs.com/png.latex?C">;</p></li>
<li><p>a pair of vertices <img src="https://latex.codecogs.com/png.latex?(u_i,v_i)"> for every <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5Bn%5D">, and an edge between them, where all the <img src="https://latex.codecogs.com/png.latex?u_i">‚Äôs are in <img src="https://latex.codecogs.com/png.latex?B">‚Äô ‚Äî the vertex <img src="https://latex.codecogs.com/png.latex?u_i"> represents the literal <img src="https://latex.codecogs.com/png.latex?x_i"> while the vertex <img src="https://latex.codecogs.com/png.latex?v_i"> represents the literal <img src="https://latex.codecogs.com/png.latex?%5Coverline%7Bx_i%7D">;</p></li>
<li><p>a pair of vertices <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> in <img src="https://latex.codecogs.com/png.latex?C">, with <img src="https://latex.codecogs.com/png.latex?p"> adjacent to all <img src="https://latex.codecogs.com/png.latex?u_i">‚Äôs and <img src="https://latex.codecogs.com/png.latex?q"> adjacent to all <img src="https://latex.codecogs.com/png.latex?v_i">‚Äôs.</p></li>
</ul>
<p>Now here be the instructions associated with the edges:</p>
<ul>
<li><p>the edge to the <img src="https://latex.codecogs.com/png.latex?%5Cell">-th vertex on <img src="https://latex.codecogs.com/png.latex?X"> is active only if there is a bunny on at least one of the literals present in the clause <img src="https://latex.codecogs.com/png.latex?C_%7B%5Cell-1%7D">;</p></li>
<li><p>the edges between <img src="https://latex.codecogs.com/png.latex?u_i"> and <img src="https://latex.codecogs.com/png.latex?v_i"> are active only when there is a bunny on the leftmost vertex of <img src="https://latex.codecogs.com/png.latex?X">; and</p></li>
<li><p>finally, the edges incident on <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> are active only when there is a bunny on the rightmost vertex of <img src="https://latex.codecogs.com/png.latex?X">.</p></li>
</ul>
</section>
<section id="the-forward-direction" class="level3">
<h3 class="anchored" data-anchor-id="the-forward-direction">The Forward Direction</h3>
<p>We first claim that we can ‚Äúwin‚Äù this game if <img src="https://latex.codecogs.com/png.latex?%5Cphi"> has a satisfying assignment. Indeed, let <img src="https://latex.codecogs.com/png.latex?%5Ctau:%20%5C%7Bx_1,%5Cldots,x_n%5C%7D%20%5Crightarrow%20%5C%7B0,1%5C%7D"> be a truth assignment that satisfies all the clauses of <img src="https://latex.codecogs.com/png.latex?%5Cphi">. Then:</p>
<ol type="1">
<li><p>If <img src="https://latex.codecogs.com/png.latex?%5Ctau(x_i)%20=%200">, move the bunny on <img src="https://latex.codecogs.com/png.latex?u_i"> to <img src="https://latex.codecogs.com/png.latex?v_i">.</p></li>
<li><p>Move the bunny on the leftmost vertex of the path <img src="https://latex.codecogs.com/png.latex?X"> to the rightmost vertex: note that all edges are active because <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is a satisfying assignment.</p></li>
<li><p>Move all bunnies on <img src="https://latex.codecogs.com/png.latex?u_i">‚Äôs to <img src="https://latex.codecogs.com/png.latex?p"> and those on <img src="https://latex.codecogs.com/png.latex?v_i">‚Äôs to <img src="https://latex.codecogs.com/png.latex?q">.</p></li>
</ol>
</section>
<section id="the-backward-direction" class="level3">
<h3 class="anchored" data-anchor-id="the-backward-direction">The Backward Direction</h3>
<p>Now suppose there is a winning sequence of moves <img src="https://latex.codecogs.com/png.latex?%5Csigma">. We will show that we can extract from this sequence a satisfying assignment for <img src="https://latex.codecogs.com/png.latex?%5Cphi">, which will firmly establish the equivalence of the generated instance of <code>BunnyCarrot</code> with the OG hard instance <img src="https://latex.codecogs.com/png.latex?%5Cphi">.</p>
<p>Note that to begin with, all the blue edges are inactive. Now, in the sequence <img src="https://latex.codecogs.com/png.latex?%5Csigma">, let us say that a step is <em>key</em> if it involves a bunny moving along the first edge of the path <img src="https://latex.codecogs.com/png.latex?X"> and <em>critical</em> if it involves a bunny moving along the last edge of the path <img src="https://latex.codecogs.com/png.latex?X">.</p>
<p>Suppose the <img src="https://latex.codecogs.com/png.latex?%5Cell">-th step is the first critical step in <img src="https://latex.codecogs.com/png.latex?%5Csigma">. Further, suppose that the <img src="https://latex.codecogs.com/png.latex?t">-th step is the <em>last</em> key step to occur <em>before</em> the <img src="https://latex.codecogs.com/png.latex?%5Cell">-th step. Notice that there must be at least one key step before a critical step ‚Äî we must begin before we can end :)</p>
<p>Now, for all steps after the <img src="https://latex.codecogs.com/png.latex?t">-th step and before the <img src="https://latex.codecogs.com/png.latex?%5Cell">-th step, note that edges incident to <img src="https://latex.codecogs.com/png.latex?u_i"> and <img src="https://latex.codecogs.com/png.latex?v_i"> are <strong>inactive</strong> for all <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5Bn%5D">. This implies that every step between the <img src="https://latex.codecogs.com/png.latex?t">-th and <img src="https://latex.codecogs.com/png.latex?%5Cell">-th steps involves a bunny moving along <img src="https://latex.codecogs.com/png.latex?X">, and in particular, every edge in <img src="https://latex.codecogs.com/png.latex?X"> is crossed at least once in this phase of the game.</p>
<p>Let us note the positions of the bunnies who are on the <img src="https://latex.codecogs.com/png.latex?u_i">‚Äôs and <img src="https://latex.codecogs.com/png.latex?v_i">‚Äôs after the <img src="https://latex.codecogs.com/png.latex?t">-th step is executed. Observe that this naturally translates to an assignment on the variables as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bequation*%7D%0A%20%20%20%20%5Ctau(x_i)%20=%0A%20%20%20%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%201%20&amp;%20%5Ctext%7Bif%20%7D%20u_i%20%5Cin%20B,%5C%5C%0A%20%20%20%20%20%200%20&amp;%20%5Ctext%7Bif%20%7D%20v_i%20%5Cin%20B.%0A%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation*%7D%0A"></p>
<p>We argue that <img src="https://latex.codecogs.com/png.latex?%5Ctau"> must in fact be a satisfying assignment.</p>
<p>Assume to the contrary: suppose some clause <img src="https://latex.codecogs.com/png.latex?C_k"> is, in fact, not satisfied by <img src="https://latex.codecogs.com/png.latex?%5Ctau">.</p>
<p>Then, we claim that the edge connecting the <img src="https://latex.codecogs.com/png.latex?k">-th and <img src="https://latex.codecogs.com/png.latex?(k+1)">-th vertices is not active.</p>
<p>As an example, suppose <img src="https://latex.codecogs.com/png.latex?C_k%20=%20%5C%7Bx_1,x_2,%5Coverline%7Bx_3%7D%5C%7D">. Since <img src="https://latex.codecogs.com/png.latex?%5Ctau"> does not satisfy <img src="https://latex.codecogs.com/png.latex?C_k">, it must be the case that:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctau(x_1)%20=%200"> ‚Äî and hence there is a bunny on <img src="https://latex.codecogs.com/png.latex?v_1">;</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctau(x_2)%20=%200"> ‚Äî and hence there is a bunny on <img src="https://latex.codecogs.com/png.latex?v_2">;</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctau(x_3)%20=%201"> ‚Äî and hence there is a bunny on <img src="https://latex.codecogs.com/png.latex?u_3">.</li>
</ul>
<p>However, the condition for the edge to the <img src="https://latex.codecogs.com/png.latex?(k+1)">-th vertex on <img src="https://latex.codecogs.com/png.latex?X"> to be active is simply that there is a bunny present on at least one of the literals present in the clause <img src="https://latex.codecogs.com/png.latex?C_%7Bk%7D">, i.e, one of <img src="https://latex.codecogs.com/png.latex?u_1">, <img src="https://latex.codecogs.com/png.latex?u_2"> or <img src="https://latex.codecogs.com/png.latex?v_3">. However, because of the structure of the graph, and the fact that all edges incident on <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> are inactive at all times before the first critical step, observe that:</p>
<ul>
<li>If there is a bunny on <img src="https://latex.codecogs.com/png.latex?v_1">, there is no bunny on <img src="https://latex.codecogs.com/png.latex?u_1">.</li>
<li>If there is a bunny on <img src="https://latex.codecogs.com/png.latex?v_2">, there is no bunny on <img src="https://latex.codecogs.com/png.latex?u_2">.</li>
<li>If there is a bunny on <img src="https://latex.codecogs.com/png.latex?u_3">, there is no bunny on <img src="https://latex.codecogs.com/png.latex?v_3">.</li>
</ul>
<p>By our assumption that <img src="https://latex.codecogs.com/png.latex?%5Ctau"> falsifies <img src="https://latex.codecogs.com/png.latex?C_k">, <em>all</em> the premises above are true! So there is an edge on the path <img src="https://latex.codecogs.com/png.latex?X"> that is not active between the <img src="https://latex.codecogs.com/png.latex?t">-th and <img src="https://latex.codecogs.com/png.latex?%5Cell">-th steps, which violates our understanding that every edge was crossed between these steps. This is a contradiction, and hence <img src="https://latex.codecogs.com/png.latex?%5Ctau"> must indeed be a satisfying assignment.</p>
<p>I‚Äôll just remark here that this construction can be modified so that every vertex in the graph has constant degree, and there is only one vertex in <img src="https://latex.codecogs.com/png.latex?C">. It can also be modified to change the ‚Äúor‚Äù condition on the edges to an ‚Äúand‚Äù, by simply separating the conditions out along multiedges.</p>
</section>
<section id="food-for-thought" class="level3">
<h3 class="anchored" data-anchor-id="food-for-thought">Food for thought</h3>
<p>Here are some more questions :)</p>
<div class="callout-important callout callout-style-simple no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<ol type="1">
<li><p>What‚Äôs the complexity of this game when the underlying graph has some simple structure (e.g, a tree)?</p></li>
<li><p>Does the problem get harder if we introduce attacking entities like wolves?</p></li>
<li><p>Can we come up with an algorithm that runs in polynomial time on instances where there is a valid winning sequence of constant length?</p></li>
<li><p>Is the problem hard even for a constant number of bunnies?</p></li>
</ol>
</div>
</div>
</div>
<p>PS. Here‚Äôs <a href="https://twitter.com/neeldhara/status/1571522626526515202">a sketch of a slighty different reduction</a> from vertex cover. Thanks again to <a href="https://twitter.com/lokshtanov">Daniel</a> for sharing the reduction described here! Comments welcome here, or <a href="https://twitter.com/neeldhara/status/1571629379779973121">continue the conversation on Twitter</a>!</p>


</section>

 ]]></description>
  <category>puzzles</category>
  <category>exposition</category>
  <guid>https://neeldhara.blog/posts/dogs-bunny-puzzle/index.html</guid>
  <pubDate>Sun, 18 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dogs-bunny-puzzle/puzzlescreenshot.png" medium="image" type="image/png" height="168" width="144"/>
</item>
<item>
  <title>On Cards and Graphs</title>
  <link>https://neeldhara.blog/posts/dsanotes/debruijn/index.html</link>
  <description><![CDATA[ 




<section id="of-cards-and-graphs-de-bruijn-seuqences" class="level1 page-columns page-full">
<h1>Of Cards and Graphs: de Bruijn seuqences</h1>
<p><a href="https://slides.com/neeldhara/dsa1-w04#/1/2">Link to slides</a></p>
<p><a href="https://twitter.com/neeldhara/status/1569407947100266499">Link to a Tweet thread summarizing these notes</a></p>
<p>Before we talk about exploring graphs, we will take a small detour to throw in some motivation. In our discussion here we will establish that knowing how to go around a graph can meaningfully help us pull off a spectacular card trick. I trust that this should leave us sufficiently interested in finding out how we can actually find those Euler tours, which is our next stop.</p>
<section id="the-trick" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-trick">The Trick</h2>
<ul>
<li><p>A deck with 32 cards is given to someone in the audience.</p></li>
<li><p>Any number of <em>cut shuffles</em><sup>1</sup> are done.</p></li>
<li><p>Once the audience is satisfied that the deck is suitably shuffled, it is passed to someone, say P, from where the following happens:</p>
<pre class="plaintext"><code>P takes the top card and passes the deck to the next person (Q).
Q takes the top card and passes the deck to the next person (R).
R takes the top card and passes the deck to the next person (S).
S takes the top card and passes the deck to the next person (T).</code></pre></li>
<li><p>All five people look at their cards without revealing them to anyone else.</p></li>
<li><p>Those who got red cards are requested to stand up.</p></li>
<li><p>All cards are identified.</p></li>
</ul>
<div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;A cut shuffle involves taking some number of cards from the top of the deck, placing them on the table, and then placing the rest of the deck on top of them. So if the stack has cards 1,2,3,4,5 from bottom to top, then it will look like 4,5,1,2,3 after a cut shuffle with two cards shaved off the top.</p></li></div></section>
<section id="behind-the-scenes" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="behind-the-scenes">Behind the scenes</h2>
<p>Interpreting reds as 1‚Äôs and blacks as 0‚Äôs, any sequence of five cards is a signal: a bitstring of length 5. This is ‚Äî at least in principle ‚Äî enough to ID one of the cards in a 32-card deck, for sure. But to ID the next five cards too? Wow!</p>
<p>So to begin with, let‚Äôs just focus on ID-ing card. The deck, of course, is setup: the cards appear in a specific order, one whose relevant properties are unperturbed by cut shuffles. Note that we have no control over how many times the deck is cut, so the top card could be effectively anywhere in from the original sequence. So what we need is a sequence of 32 bits:</p>
<p><img src="https://latex.codecogs.com/png.latex?b_0,%20b_1,%20%5Cldots,%20b_i,%20%5Cldots,%20b_%7B31%7D"></p>
<div class="page-columns page-full"><p>with the following property. For any <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5C%7B0,%5Cldots,31%5C%7D">, if <img src="https://latex.codecogs.com/png.latex?B_i"> denotes<sup>2</sup> the substring:</p><div class="no-row-height column-margin column-container"><li id="fn2"><p><sup>2</sup>&nbsp;subscripts are mod 32</p></li></div></div>
<p><img src="https://latex.codecogs.com/png.latex?b_%7Bi%7D,%20b_%7Bi+1%7D,%20b_%7Bi+2%7D,%20b_%7Bi+3%7D,%20b_%7Bi+4%7D,"></p>
<p>then we would very much like that <img src="https://latex.codecogs.com/png.latex?b_i%20%5Cneq%20b_j"> whenever <img src="https://latex.codecogs.com/png.latex?i%20%5Cneq%20j">. This ensures that no matter how many times the deck is cut, when the members of the audience with the red cards stand up, we have a clean and unambiguous signal, which we can pre-relate by our powers of rote memory to the card at position <img src="https://latex.codecogs.com/png.latex?i"> in said sequence. Because subscripts are read mod 32, note that this is really all we need. For example, here‚Äôs a seuquence that does happen to have the property we are after:</p>
<blockquote class="blockquote">
<p>00000100101100111110001101110101</p>
</blockquote>
<p>The diagram below shows why cut shuffles still result in sequences where the signal from any location continues to be unique, and in some sense, <em>invariant</em> across shuffles: suppose a position <img src="https://latex.codecogs.com/png.latex?x"> corresponds to a certain signal <img src="https://latex.codecogs.com/png.latex?S_x"> before a cut shuffle, then after a cut shuffle, if position <img src="https://latex.codecogs.com/png.latex?x"> shifts to <img src="https://latex.codecogs.com/png.latex?y">, then <img src="https://latex.codecogs.com/png.latex?S_y%20=%20S_x">. Note that this would <em>not</em> be true if someone, say, enthusiastically riffle shuffled the pack ‚Äî so do make sure to prevent this at all cost.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch5-cutshuffleex.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Examples of cut shuffles and why they don‚Äôt affect the addressing technique. The first column shows the original sequence, the second shows the proposed cut, and the last shows the final sequence after the cut shuffle is excecuted.</figcaption><p></p>
</figure>
</div>
<p>This property makes the sequence a robust device for card discovery: we simply associate a specific card with every 5-length bit string, and position the card corresponding to <img src="https://latex.codecogs.com/png.latex?b_i"> at location <img src="https://latex.codecogs.com/png.latex?i">. By knowing the signature corresponding to the top five cards after any number of cut shuffles, you know where this signal appeared in the original sequence, and by turdging further along in the sequence, you also know the signals for the next five cards.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
You perhaps see now how you can perform the entire trick:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>memorize the sequence <code>00000100101100111110001101110101</code></li>
<li>associate‚Ä† a card with each bit-string of length 5</li>
<li>memorize said association</li>
<li>place cards as dictated by the sequence and given by the association</li>
<li>profit and/or impress</li>
</ul>
<p>‚Ä† Note that the association has to respect the semantics of the bitstring: so the <strong>1-positions get red cards and the 0-positions get black</strong> (or the other way round if you please, so long as you are consistent in your conventions throughout).</p>
</div>
</div>
<p>Notice that once you can read off one card, having committed the seuqence and the association to memory, you can also read off any of the cards after that. This does seem like a lot of memorizing, but it‚Äôs worth it for the impact.</p>
</section>
<section id="mnemonic-improvements-for-an-actual-performance" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="mnemonic-improvements-for-an-actual-performance">Mnemonic improvements for an actual performance</h2>
<p>If you want to make your life easier, you could use an association that is easy to remember:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch5-dictionary.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A useful dictionary between 5-bit strings and cards from a standard deck of cards</figcaption><p></p>
</figure>
</div>
<p>So getting to the first card is quite straightforward already:</p>
<ul>
<li>If the first person is seated, they have a black card, and otherwise they have a red card. But this is immediate anyway from the convention, so not particularly impressive to point out.
<ul>
<li>When the card is black: if the second person is seated, it is a ‚ô£, otherwise a ‚ô†.</li>
<li>When the card is red: if the second person is seated, it is a ‚¨•, otherwise a ‚ô•.</li>
</ul></li>
<li>Finally, the value of the card is just translating the last three bits to their value in decimal (remembering to map all zeroes to eight).</li>
</ul>
<p>If you want to really impress with the next four, you could just memorize the whole sequence, but to avoid visible murmuring, you can also exploit a handy feature of this particular sequence that helps you navigate it with only a little bit of mental math.</p>
<div class="page-columns page-full"><p>It turns out that if you know <img src="https://latex.codecogs.com/png.latex?b_i"> (which you do based on who stands up), you can obtain the next bit (i.e, the sixth bit relative to the start of <img src="https://latex.codecogs.com/png.latex?b_i">) in the sequence by simply adding the first and third bits from <img src="https://latex.codecogs.com/png.latex?b_i">. In other words, the sequence has the following nice pattern: standing anywhere, you can obtain the next bit by taking the sum (mod 2) of the bits that are three and five bits behind wherever you are standing. Go on, verify this for yourself!<sup>3</sup></p><div class="no-row-height column-margin column-container"><li id="fn3"><p><sup>3</sup>&nbsp;If you do, you‚Äôll find this is not quite true at the fourth and fifth positions. The claimactually works if you drop any one of the leading <code>0</code>‚Äôs, e.g.&nbsp;the first one. This gives you a sequence of 31 cards to work with which have this nice pattern. If you want to be a purist, though, you can commit this exception to memory.</p></li></div></div>
</section>
<section id="de-bruijn-sequences" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="de-bruijn-sequences">de Bruijn Sequences</h2>
<p>So how does this lovely self-working card-trick fit, even if as a detour, into our discussion about graphs?</p>
<p>Let‚Äôs step back for a bit. We pulled out the driver of this whole setup, the sequence:</p>
<blockquote class="blockquote">
<p>00000100101100111110001101110101</p>
</blockquote>
<div class="page-columns page-full"><p>much like a real magician pulls out a real rabbit from a real hat. You very likely raised an eyebrow and wondered about where this sequence came from. It‚Äôs a useful exercise to experiment with coming up with one, even if by means of ad-hoc scribbling. As a warmup, it‚Äôs worth trying to find one of length eight, where every 3-bit string occurs exactly once<sup>4</sup>.</p><div class="no-row-height column-margin column-container"><li id="fn4"><p><sup>4</sup>&nbsp;Apparently the Sanskrit sutra <em>yam√§t√§rajabh√§nasalagam</em> (and variants thereof), which describes all possible triplets of short and long syllables, is considered evidence that such sequences were known in India from a while ago. Sanskrit meters are based on the system of short (laghu) and long (guru) syllables, and you might count this as a hint for the exercise here. If you are curious about the history of the sutra, look no further than <a href="https://web.archive.org/web/20141029120230/http://202.41.82.144/rawdataupload/upload/insa/INSA_2/200059d2_123.pdf">this article</a>.</p></li></div></div>
<p>It turns out that such sequences are in fact <a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence">rather well-studied</a>, and one way of generating them involves taking a walk in an appropriate graph! In particular, let us go back to our original task of generating a 32-bit sequence like the one shown above, except that we are on our own this time. Consider a graph where we have:</p>
<ul>
<li>a vertex for every bit string of length <em>four</em>, and let us say that the bit string associated with a vertex <img src="https://latex.codecogs.com/png.latex?u"> is denoted by <img src="https://latex.codecogs.com/png.latex?b_u">; and</li>
<li>an edge from <img src="https://latex.codecogs.com/png.latex?u"> to <img src="https://latex.codecogs.com/png.latex?v"> if the corresponding bit strings are all but the same: i.e, the 3-length suffix of <img src="https://latex.codecogs.com/png.latex?u"> is the same as the <img src="https://latex.codecogs.com/png.latex?3">-length prefix of <img src="https://latex.codecogs.com/png.latex?v">.</li>
</ul>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
If you want to take a look at the graph, it‚Äôs right here‚Ä¶
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚Ä¶although a bit of a monstrosity!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch5-debruijngraph.png" class="img-fluid figure-img" style="width:75.0%"></p>
<p></p><figcaption class="figure-caption">The de Bruijn graph of order 4</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>The following properties are worth thinking about:</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
the total number of vertices is _____
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>One for every bit string of length four, so sixteen.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
every vertex has indegree and outdegree _____
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Fix a vertex <img src="https://latex.codecogs.com/png.latex?v"> and let <img src="https://latex.codecogs.com/png.latex?s_v"> denote the last three bits of <img src="https://latex.codecogs.com/png.latex?v">. The only outgoing edges are to vertices that represent the bit strings <img src="https://latex.codecogs.com/png.latex?s_v"><code>0</code> and <img src="https://latex.codecogs.com/png.latex?s_v"><code>1</code>.</p>
<p>Fix a vertex <img src="https://latex.codecogs.com/png.latex?v"> and let <img src="https://latex.codecogs.com/png.latex?p_v"> denote the first three bits of <img src="https://latex.codecogs.com/png.latex?v">. The only incoming edges are from vertices that represent the bit strings <code>0</code><img src="https://latex.codecogs.com/png.latex?p_v"> and <code>1</code><img src="https://latex.codecogs.com/png.latex?p_v">.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
the total number of edges is _____
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There are sixteen vertices and each of them has outdegree two, so the total number of edges is <img src="https://latex.codecogs.com/png.latex?32">. Does that ring a bell yet?</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
there are exactly _____ self-loops
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Consider a vertex <img src="https://latex.codecogs.com/png.latex?v">. Let the bit string associated with <img src="https://latex.codecogs.com/png.latex?v"> be denoted by <code>WXYZ</code>. For <img src="https://latex.codecogs.com/png.latex?v"> to be adjacent to itself, we will need <code>XYZ = WXY</code>, which implies that <code>W = X</code>, <code>X = Y</code>, <code>Y = Z</code>.</p>
<p>So if <code>W = 1</code>, then we have that <code>WXYZ = 1111</code> and if <code>W = 0</code> then we have <code>WXYZ = 0000</code>.</p>
<p>These are the only two possible scenarios, so our graph has exactly two self-loops.</p>
</div>
</div>
</div>
<div class="page-columns page-full"><p>If you were to take an Euler tour in this graph, i.e, walk around visiting every edge exactly once, then it very naturally spells out a sequence as follows. Start with an empty string. Now as you move around, going from the vertex <img src="https://latex.codecogs.com/png.latex?u"> to <img src="https://latex.codecogs.com/png.latex?v"> along the edge <img src="https://latex.codecogs.com/png.latex?(u,v)"> amounts to essentially ‚Äúseeing one new bit‚Äù: recall that the suffix of <img src="https://latex.codecogs.com/png.latex?u"> almost fully eats up the prefix of <img src="https://latex.codecogs.com/png.latex?v">, leaving one new bit to observe, which <em>is what we tag on to our sequence</em>. Once you have traveled along every edge exactly once, you‚Äôve collected exactly 32 bits, so we have written out a sequence of length 32 by the time we are done<sup>5</sup>.</p><div class="no-row-height column-margin column-container"><li id="fn5"><p><sup>5</sup>&nbsp;If edges were 1km roads, we would have been just 10km shy of a full marathon.</p></li></div></div>
<div class="page-columns page-full"><p>Now: our somewhat outrageous claim is that this infact is a valid de Bruijn sequence! Given that we have written out exactly 32 bits, it is enough to show that any bit sequence of length 5 shows up as a substring in this sequence starting from some position. The main intuition here is the following: suppose you want to ‚Äúsee‚Äù the bitstring <code>PQRST</code> in your sequence. Well, at some point in our walk on the graph, we moved from the vertex representing <code>PQRS</code> to the one representing <code>QRST</code><sup>6</sup>. This made us add <code>T</code> to whatever sequence we had so far. Let‚Äôs rewind our walk a bit and see what happened in the last few steps too:</p><div class="no-row-height column-margin column-container"><li id="fn6"><p><sup>6</sup>&nbsp;Indeed, this must have happened at some point, since we visit every edge exactly once.</p></li></div></div>
<p><code>LMNO</code> ‚Üí <code>MNOP</code> ‚Üí <code>NOPQ</code> ‚Üí <code>OPQR</code> ‚Üí <code>PQRS</code> ‚Üí <code>QRST</code></p>
<p>Retracing our steps, here are the bits that would have been triggered by this walk: <code>PQRST</code>, and thus we are almost done. You might say: perhaps the edge from the vertex representing <code>PQRS</code> to the one representing <code>QRST</code> was taken very early on, at the start of the tour, so we don‚Äôt have these many steps to retrace: but here‚Äôs the thing ‚Äî we are on a <em>tour</em>, so you can continue walking back past your starting point and the sequence would still have this overall form: it‚Äôs just that a few of those bits would be written at the end, rather than at the start, and that just means that we can find our substring wrapped around the end, which is a perfectly valid place to discover it.</p>
<p>Notice that there was nothing special about this whole process and the numbers four and five: you can generate so-called ‚Äúde Bruijn sequences of order <img src="https://latex.codecogs.com/png.latex?k">‚Äù, which are bitstrings of length <img src="https://latex.codecogs.com/png.latex?2%5Ek"> with the property that every <img src="https://latex.codecogs.com/png.latex?k">-bit string appears exactly once in the sequence as a substring (including wraparoudns), using exactly the same idea.</p>
<p>So you should be convinced by now ‚Äî perhaps after reflecting for a moment or two ‚Äî that de Bruijn sequences of any order in fact exist, which is not obvious at all from the definition. It turns out that there are actually quite a few of them: <img src="https://latex.codecogs.com/png.latex?2%5E%7B2%5E%7Bk-1%7D-k%7D">, to be precise, a formula we know thanks to de Bruijn, after whom the sequences are named.</p>
<p>You might wonder if there are other ways of coming up with these sequences, or possibly even enumerating them. These discussions are unfortunately out of scope, but there are several excellent resources for the curious. Much of these notes are based on the third chapter of the book <a href="https://www.amazon.in/Magical-Mathematics-Mathematical-Animate-Tricks/dp/0691169772">Magical Mathematics: The Mathematical Ideas That Animate Great Magic Tricks</a> which is a treasure of a book. Paraphrasing from this chapter, here is a little about the people behind this trick:</p>
<blockquote class="blockquote">
<p>The origins of this trick go back to Charles T. Jordan in 1919, and the original version required a color pattern of length 6 to identify all the cards. Later William Larson and T. Page Wright came up with another variant involving 52 cards, and 3 people revealing the suits being enough for the magician to pick up the values. In the 1960s, Karl Fulves and, separately, P. Diaconis working with the chemist Ronald Wohl, derived dozens of tricks based on variations and extensions of Jordan‚Äôs idea.</p>
</blockquote>


</section>
</section>


 ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/debruijn/index.html</guid>
  <pubDate>Sat, 10 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/figures/ch5-cutshuffleex.png" medium="image" type="image/png" height="185" width="144"/>
</item>
<item>
  <title>Walking Around via Euler Tours</title>
  <link>https://neeldhara.blog/posts/dsanotes/eulertours/index.html</link>
  <description><![CDATA[ 




<p>We revisit the following problem from our introduction to graphs:</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The Problem
</div>
</div>
<div class="callout-body-container callout-body">
<p>The city of K√∂nigsberg in Prussia (now Kaliningrad, Russia) was set on both sides of the Pregel River, and included two large islands‚ÄîKneiphof and Lomse‚Äîwhich were connected to each other, and to the two mainland portions of the city, by seven bridges.</p>
<p>Devise a walk through the city that would cross each of those bridges once and only once. Try this yourself on a few different maps at <a href="https://mathigon.org/course/graph-theory/bridges">Mathigon</a>!</p>
</div>
</div>
<p>We also found such traversals useful for computing de Bruijn sequences, so between success on city exploration challenges and impressing with card tricks, there is plenty of motivation to take an Euler tour in a graph.</p>
<p>In general, we are given a directed or undirected graph <img src="https://latex.codecogs.com/png.latex?G%20=%20(V,E)"> and we want to know if there is a sequence of edges:</p>
<p><img src="https://latex.codecogs.com/png.latex?W%20:=%20e_0%20=%20(u_0,v_0),%20%5Cldots,%20e_%7Bm-1%7D%20=%20(u_%7Bm-1%7D,v_%7Bm-1%7D)"></p>
<p>such that <img src="https://latex.codecogs.com/png.latex?v_i%20=%20u_%7Bi+1%20%5Cmod%20m%7D"> for all <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5C%7B0,1,%5Cldots,m-1%5C%7D">, and every edge in <img src="https://latex.codecogs.com/png.latex?E"> features <em>exactly once</em> in this sequence.</p>
<section id="necessary-and-sufficient-conditions" class="level2">
<h2 class="anchored" data-anchor-id="necessary-and-sufficient-conditions">Necessary and sufficient conditions</h2>
<p>Note that if such a sequence does exist for a directed graph <img src="https://latex.codecogs.com/png.latex?G">, then the indegree of every vertex must equal its outdegree, i.e:</p>
<blockquote class="blockquote">
<p>indegree<img src="https://latex.codecogs.com/png.latex?(v)"> = outdegree<img src="https://latex.codecogs.com/png.latex?(v)"> for all <img src="https://latex.codecogs.com/png.latex?v%20%5Cin%20V">.</p>
</blockquote>
<p>Likewise, if such a sequence exists for an undirected graph <img src="https://latex.codecogs.com/png.latex?G">, then every vertex must have even degree:</p>
<blockquote class="blockquote">
<p>degree<img src="https://latex.codecogs.com/png.latex?(v)%20=%202k_v"> for all <img src="https://latex.codecogs.com/png.latex?v%20%5Cin%20V"> and some integer <img src="https://latex.codecogs.com/png.latex?k_v">.</p>
</blockquote>
<p>You can observe this based on simulating the sequence on the graph and imagining it from the perspective of your favorite vertex <img src="https://latex.codecogs.com/png.latex?v"> in it. In particular, assume you are walking around in <img src="https://latex.codecogs.com/png.latex?G"> as dictated by <img src="https://latex.codecogs.com/png.latex?W">. Fix your attention on <img src="https://latex.codecogs.com/png.latex?v">: every time you ‚Äúenter‚Äù <img src="https://latex.codecogs.com/png.latex?v">, via, say the edge <img src="https://latex.codecogs.com/png.latex?e_i">, then you must ‚Äúexit‚Äù <img src="https://latex.codecogs.com/png.latex?v"> via the edge <img src="https://latex.codecogs.com/png.latex?e_%7Bi+1%7D">. If <img src="https://latex.codecogs.com/png.latex?G"> is directed, <img src="https://latex.codecogs.com/png.latex?e_i"> is an incoming edge and <img src="https://latex.codecogs.com/png.latex?e_%7Bi+1%7D"> is an outgoing edge, and if <img src="https://latex.codecogs.com/png.latex?G"> is undirected, these are simply two edges incident on <img src="https://latex.codecogs.com/png.latex?v"> that can be naturally ‚Äúpaired off‚Äù. So any successful walk witnesses the claims above.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
These conditions are necessary, but are they sufficient?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>It turns out that you could have graphs where these conditions are true, but there are no Euler tours. This happens when the graph is ‚Äúdisconnected‚Äù, i.e, when there is a pair of vertices <img src="https://latex.codecogs.com/png.latex?u"> and <img src="https://latex.codecogs.com/png.latex?v"> such that there is no path from <img src="https://latex.codecogs.com/png.latex?u"> to <img src="https://latex.codecogs.com/png.latex?v">. The following are good exercises to work through:</p>
<ul>
<li><p>Come up with an example of a graph where the degree conditions are met but there is no Euler tour.</p></li>
<li><p>Convince yourself that if <img src="https://latex.codecogs.com/png.latex?G"> is connected and satisfies the degree conditions indicated above, you can always find an Euler tour.</p></li>
</ul>
</div>
</div>
</div>
</section>
<section id="a-naive-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="a-naive-algorithm">A naive algorithm</h2>
<p>Now we turn to the procedural question: knowing what it takes to find an Euler tour, how do we actually find one? First, we get the simple degree-based sanity check out of the way. For undirected graphs we have:</p>
<pre class="plaintext"><code>for v in V(G):
    if deg[v] % 2 != 0:
        return False</code></pre>
<p>and for directed graphs we have:</p>
<pre class="plaintext"><code>for v in V(G):
    if indeg[v] != outdeg[v]:
        return False</code></pre>
<p>Assuming we pass these sanity checks, we want to embark on an actual tour. Here‚Äôs a reasonable starting point, which essentially amounts to saying that you get to start anywhere, and keep going while you can:</p>
<pre class="plaintext"><code>find_tour(G,v):
    // G is the graph
    // and v is our favorite vertex
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u) which is not in S:
        add e to S
        set curr := u
    return S</code></pre>
<p>This is basically a ‚Äúkeep going until stuck‚Äù process. By the very nature of the process, the sequence <img src="https://latex.codecogs.com/png.latex?S"> that we come up with is <em>walkable</em> and does not repeat edges, but it is unclear if this list is exhaustive. Indeed, you should be able to come up with examples of graphs <img src="https://latex.codecogs.com/png.latex?G"> where <img src="https://latex.codecogs.com/png.latex?G"> has an Euler tour but <code>find_tour(G)</code> does not output one.</p>
</section>
<section id="fixing-the-naive-approach" class="level2">
<h2 class="anchored" data-anchor-id="fixing-the-naive-approach">Fixing the naive approach</h2>
<p>How do we fix this? For one, we need to know if we are done or not: if an edge is missing from <img src="https://latex.codecogs.com/png.latex?S">, then that‚Äôs a bad sign, and we need to do something about it. How do we know if every edge is enlisted in the output? One way is to compute the length of <img src="https://latex.codecogs.com/png.latex?S">: if it falls short of <img src="https://latex.codecogs.com/png.latex?m">, we are not done yet.</p>
<p>But we also need to know what the missing edges are. We could in principle go through our edge list and ask ourselves if the edge made it to <img src="https://latex.codecogs.com/png.latex?S"> or not, but that sounds mildly painstaking. Let‚Äôs save ourselves the pain with some additional bookkeeping ‚Äî let‚Äôs track the ‚Äúresidual degree‚Äù of the vertices: this is the number of edges incident on <img src="https://latex.codecogs.com/png.latex?v"> that are not yet listed in <img src="https://latex.codecogs.com/png.latex?S">. Any vertex with non-zero residual degree gives us concrete hints about missing edges.</p>
<p>So for directed graphs we have:</p>
<pre class="plaintext"><code>find_tour(G,v):
    init res_deg[v] = outdeg[v]
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u) which is not in S:
        add e to S
        res_deg[curr] = res_deg[curr]-1
        set curr := u
    return S</code></pre>
<p>and for undirected graphs we have:</p>
<pre class="plaintext"><code>find_tour(G,v):
    init res_deg[v] = deg[v]
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u) which is not in S:
        add e to S
        res_deg[curr] = res_deg[curr]-1
        res_deg[u] = res_deg[u]-1
        set curr := u
    return S</code></pre>
<p>So now we know when our algorithm is a fail. What‚Äôs the fix? Well, let‚Äôs approach vertices who are not done yet as per our intel from their <code>res_deg</code> value. We use these vertices to trigger more happy-go-lucky tours:</p>
<pre class="plaintext"><code>find_tour_fr(G):
    i := 0
    marked := emptyset
    res_deg[v] := outdeg[v]
    S := list of lists
    while there is some v with res_deg[v] &gt; 0:
        let S[i] := find_tour(G,v,marked)
        add every edge in S_i to marked
        i = i+1</code></pre>
<p>Since we need to track visited edges across multiple runs now, we actually inform the <code>find_tour</code> function about the edges already visited from past lives. This is tracked with the <code>marked</code> set.</p>
<p>So our updated <code>find_tour</code> function looks like this:</p>
<pre class="plaintext"><code>find_tour(G,v,marked):
    set curr := v
    set S := empty
    while there is an outgoing edge e = (curr,u)
    which is not in S or marked:
        add e to S
        res_deg[curr] = res_deg[curr]-1
        set curr := u
    return S</code></pre>
<p>(The change is analogous for the version dealing with undirected graphs.)</p>
<p>What we have now is a bunch of fragments, each of which is essentially a walk that begins and ends at the same vertex. Because of our relentless and careful pursuit (c.f. the while condition and the marked set), every edge in <img src="https://latex.codecogs.com/png.latex?G"> features in <em>exactly</em> one of these fragments. Now it‚Äôs just a matter of putting everything together.</p>
<p>Start with the first fragment <img src="https://latex.codecogs.com/png.latex?S_0">. If this is the only fragment we have, that means that our first happy-go-lucky tour was in fact also a lucky one! So we have nothing left to do. Otherwise, there are at least two fragments. Let us look at the set of vertices involved in <img src="https://latex.codecogs.com/png.latex?S_0">. The crucial observation is that there must be at least one other fragment, say <img src="https://latex.codecogs.com/png.latex?S_i">, that also features some vertex that appears in <img src="https://latex.codecogs.com/png.latex?S_0">. Indeed, if this is not the case, then you can argue that <img src="https://latex.codecogs.com/png.latex?S_0"> is a sad isolated fragment, and we can actually report that <img src="https://latex.codecogs.com/png.latex?G"> has no Euler tour.</p>
<p>Otherwise, find the common vertex between <img src="https://latex.codecogs.com/png.latex?S_0"> and <img src="https://latex.codecogs.com/png.latex?S_i">, and extend one of them using the other: for example, if <img src="https://latex.codecogs.com/png.latex?v"> is the common vertex, take a walk in <img src="https://latex.codecogs.com/png.latex?S_0"> until you encounter <img src="https://latex.codecogs.com/png.latex?v">, and then instead of following along on <img src="https://latex.codecogs.com/png.latex?S_0">, take a detour as specified by <img src="https://latex.codecogs.com/png.latex?S_i">. Remember if you start on <img src="https://latex.codecogs.com/png.latex?S_i"> at <img src="https://latex.codecogs.com/png.latex?v">, then you will eventurally exhaust <img src="https://latex.codecogs.com/png.latex?S_i"> by coming back to <img src="https://latex.codecogs.com/png.latex?v">: and at this point you can ‚Äúresume‚Äù your walk on <img src="https://latex.codecogs.com/png.latex?S_0">. Note that this process welds two fragments at the vertex <img src="https://latex.codecogs.com/png.latex?v"> thereby reducing the total number of fragments by one. This should count as a sure sign of progress: repeating for as long as possible, we have to do this at most <img src="https://latex.codecogs.com/png.latex?(f-1)"> many times, where <img src="https://latex.codecogs.com/png.latex?f%20%5Cleq%20%5Cfrac%7Bm%7D%7B2%7D"> is the total number of fragments.</p>
<pre><code>patchup():
    Let S[i] for i in 1, 2, ..., f denote the set of all fragments
    while f &gt; 1:
        look for a fragment S[i] that intersects S[0]
        if S[i] does not exist:
            return false
        else:
            expand S[0] along S[i]
            remove S[i] from the set of all fragments</code></pre>
</section>
<section id="expenses" class="level2">
<h2 class="anchored" data-anchor-id="expenses">Expenses</h2>
<p>Although arguably a naive algorithm, the cool thing about this procedure is that it is guaranteed to work, and the number of steps involved is not terribly bad either. Here‚Äôs a naive back-of-the-envelope analysis, assuming <img src="https://latex.codecogs.com/png.latex?G"> is stored as an adjacency list:</p>
<ol type="1">
<li>The degree-based sanity checks are <img src="https://latex.codecogs.com/png.latex?%5Capprox%20m"> since <img src="https://latex.codecogs.com/png.latex?G"> is stored as an adjacency list.</li>
<li>Consider <code>find_tour_fr(G)</code>:
<ul>
<li>The outer <code>while</code> loop runs at most <img src="https://latex.codecogs.com/png.latex?m"> times since each iteration decreases the residual degree of at least two vertices and the sum of residual degrees is <img src="https://latex.codecogs.com/png.latex?2m"> at the start (an analogous argument applies for directed graphs).</li>
<li>The inner <code>while</code> loop in <code>find_tour(G,v,marked)</code> is executed at most <img src="https://latex.codecogs.com/png.latex?m"> times. To find an appropriate edge, we have to go through the negibors of <code>curr</code> and check if the associated edge is already in <code>S</code> or <code>marked</code>. This takes at most <img src="https://latex.codecogs.com/png.latex?(nm)"> iterations in the worse case, if implemented directly.</li>
<li>Assuming that <code>S</code> is a linked list and <code>res_deg</code> is an array, the innermost operations are all constant time.</li>
<li>The overall cost of a direct implementation is therefore <img src="https://latex.codecogs.com/png.latex?nm%5E3">.</li>
</ul></li>
<li>The <code>patchup</code> procedure involves a outer <code>while</code> loop that runs at most <img src="https://latex.codecogs.com/png.latex?f"> times if we have <img src="https://latex.codecogs.com/png.latex?f"> fragments. The looking business to merge fragments will take no more than <img src="https://latex.codecogs.com/png.latex?m"> units of time: worst case we have to scan all remaining fragments to find a suitable match, and the merger involves updating a few pointers ‚Äî noting again that the fragments are stored as lists. This is of course a conservative estimate, but it will do. The overall time here is therefore no worse than <img src="https://latex.codecogs.com/png.latex?%5Capprox%20m%5E2"> since <img src="https://latex.codecogs.com/png.latex?f%20%5Cleq%20%5Cfrac%7Bm%7D%7B2%7D">.</li>
</ol>
<p>This gives us <img src="https://latex.codecogs.com/png.latex?m%20+%20nm%5E3%20+%20m%5E2"> in total damages. However, notice that a more careful analysis helps us do better without doing anything substantially different. If you think about <code>find_tour_fr(G)</code> think about how often the instructions:</p>
<pre><code>add e to S
res_deg[curr] = res_deg[curr]-1
set curr := u</code></pre>
<p>from <code>find_tour(G,v,marked)</code> are actually executed. Every time we execute this set of instructions, we effectively add one edge to the set of marked edges, and since this happens exactly once per edge, these instructions only execute <img src="https://latex.codecogs.com/png.latex?m"> times overall. Recall that what it takes to enter this loop is the discovery of an unused edge:</p>
<pre><code>while there is an outgoing edge e = (curr,u)
which is not in S or marked</code></pre>
<p>This is the bit that took us a while, because we assumed we have to examine all possible edges that go out of <code>curr</code> and then also tally up against <code>S</code> and <code>marked</code>. One way to speed this up is to always commit to pulling out the first element in the adjacency list of the vertex <code>u</code> and then in fact deleting this element from the list. If you are paranoid about subjecting your input to this kind of annihilation, then you can just make a working copy upfront. This way, you can be sure that you can find what you want in constant time, a good case in point to show how the way you store your data can impact the performance of your algorithm.</p>
<p>Based on the hints above, convince yourself that <code>find_tour_fr(G)</code> in fact has a total expense amounting to <img src="https://latex.codecogs.com/png.latex?%5Capprox%20m">, modulo constants. With this, our overall cost comes down to <img src="https://latex.codecogs.com/png.latex?%5Capprox%202m%20+%20m%5E2">.</p>
</section>
<section id="afterthoughts" class="level2">
<h2 class="anchored" data-anchor-id="afterthoughts">Afterthoughts</h2>
<p>Can we do better? Indeed, it turns out that with a slightly more careful implementation, the business of merging fragments can also be done with an expense proportional to the number of edges. The careful version goes by Hierholzer‚Äôs algorithm, and you can read up about this <a href="https://en.wikipedia.org/wiki/Eulerian_path#Hierholzer's_algorithm">on Wikipedia</a> or watch the video below.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/8MpoO2zA2l4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>


</section>

 ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/eulertours/index.html</guid>
  <pubDate>Thu, 08 Sep 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>On Teaching</title>
  <link>https://neeldhara.blog/posts/on-teaching/index.html</link>
  <description><![CDATA[ 




<!--
:::{.callout-note appearance="simple" icon="false"}
These are some parts of the teaching statment that I wrote roughly seven years ago, updated slightly in the interest of clarity and additional context.
::: -->
<blockquote class="blockquote">
<p><em>A teacher does not teach, a student learns.</em></p>
<p>‚Äî snippet from <a href="https://www.facebook.com/425094961174523/videos/5530977776968824/">this interview</a> of <a href="https://en.wikipedia.org/wiki/Zakir_Hussain_(musician)">Ustad Zakir Hussain</a></p>
</blockquote>
<p>I‚Äôll pose some how/what/why questions in the context of teaching.</p>
<section id="how" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how">How</h2>
<div class="page-columns page-full"><p>The last couple of decades, especially the last few years, have seen dramatic changes in how information is communicated. A lot of learning happens in online communities, for instance, question-and-answer websites like Quora and StackExchange. Thanks to folks who invest time on these platforms, expert help seems to be nearer than ever before. Specialized and snark-free communities on Discord/Slack/Telegram are enabling peer-to-peer learning at global scale. </p><div class="no-row-height column-margin column-container"><span class="aside">I keep hearing that Quora is not what it used to be, but as long as <a href="https://www.quora.com/profile/Thomas-Cormen-1/">Thomas Cormen</a> is an active user, I am positive it remains a valuable resource.</span></div></div>
<div class="page-columns page-full"><p>Books are beginning to be injected with exciting new technology: <a href="https://codemirror.net/index.html">CodeMirror</a> makes code interactive and runnable, while tools like <a href="https://pythontutor.com/">PythonTutor</a> can help with visualizing what happens behind-the-scenes when code is executed. <a href="https://github.com/denysdovhan/wtfjs">Say</a> <a href="https://www.destroyallsoftware.com/talks/wat">what</a> <a href="https://wtfjs.com/">you</a> <a href="https://martin-thoma.com/javascript-wtf/">want</a> about JavaScript, but the interactivity that it brings to the written medium has helped make reading less passive. Some of my favorite interactive texts include <a href="https://seeing-theory.brown.edu/">Seeing Theory</a>, <a href="http://probmods.org/">Probabilistic Models of Cognition</a>, courses on <a href="https://brilliant.org/">Brilliant</a>, <a href="https://mathigon.org/">Mathigon</a>, and essays from <a href="https://ncase.me/">Nicky Case</a>, <a href="https://minutelabs.io/">Minute Labs</a>, and others on <a href="https://explorabl.es/">Explorables</a>.</p><div class="no-row-height column-margin column-container"><span class="aside">The name ‚ÄúPythonTutor‚Äù is slightly misleading, since the website also lets you visualize code snippets written in C, C++, Java, and JavaScript.</span></div></div>
<div class="columns">
<div class="column" style="width:45%;">
<p>And finally there are the online courses. At the time of this writing, it has been just a little over two decades since <a href="https://en.wikipedia.org/wiki/MIT_OpenCourseWare">MIT‚Äôs Open Course Ware</a> opened to the public. The early hype around MOOCs roughly coincided with my years in college and graduate school. As far as I remember, it was quite the thrill to have free-flowing access to online lectures ‚Äî ‚Äútaught by the best‚Äù ‚Äî for several of the courses I was supposed to be doing as a part of my curriculum.</p>
</div><div class="column" style="width:4%;">

</div><div class="column" style="width:51%;">
<p><a href="https://imgflip.com/i/6s9ym6"><img src="https://neeldhara.blog/posts/on-teaching/https:/i.imgflip.com/6s9ym6.jpg" title="made at imgflip.com" width="100%"></a></p>
</div>
</div>
<p>All this is to say that I walked into a career involving a substantial teaching component with plenty of hesitation. The delivery was/is still largely confined to classroom settings in broadcast mode. It is not entirely clear what this format has to offer over YouTube. Basic interactivity is being increasingly solved with questions built into video players. Peer learning is quite doable with WhatsApp/Slack/Discord groups and local chapter meetups. Scale in the context of assessments is somewhat addressed by peer evaluation. And then there are all the things you can do on YouTube that you can‚Äôt do with traditional lectures: find a teacher whose style resonates, find an accent you understand, replay, play at 2x, 0.5x, binge watch, don‚Äôt watch‚Ä¶</p>
<div class="page-columns page-full"><p>So: what‚Äôs the incentive for <em>anyone</em> to show up in a classroom at a fixed time, especially when said time is 8AM? This question became particularly relevant during the pandemic years: once the novelty wore off, almost nobody‚Ä† showed up to lectures. If I was a student, I‚Äôd likely do the same. This remains largely an open problem in my mind, but here are some pointers that have kept me motivated about the conventional format. </p><div class="no-row-height column-margin column-container"><span class="aside">‚Ä† Shout out to those of you accounting for the ‚Äúalmost‚Äù, thank you!</span></div></div>
<ol type="1">
<li>Classroom = theatre. I am increasingly treating it as a ground for practicing standup and <a href="https://twitter.com/neeldhara/status/1542606730701307904?ref_src=twsrc%5Etfw">magic</a> skills. I should admit that this isn‚Äôt easy for a clinically shy person like myself, but I got used to making a fool of myself fast ‚Äî that‚Äôs served well. I imagine that some of the fun that comes out performance-first lectures is hard to recreate with recordings and notes.</li>
</ol>
<div class="columns">
<div class="column" style="width:45%;">
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Totally. It's almost always a performance, irrespective of the class size. And the more you rehearse, the better it goes. At least that's what works for me.
</p>
‚Äî Manu Awasthi (<span class="citation" data-cites="mnwsth">@mnwsth</span>) <a href="https://twitter.com/mnwsth/status/1562372066967359490?ref_src=twsrc%5Etfw">August 24, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div><div class="column" style="width:10%;">

</div><div class="column" style="width:45%;">
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Some musings on teaching from a lunch talk awhile back: <a href="https://t.co/19vOXpxcjs">https://t.co/19vOXpxcjs</a>
</p>
‚Äî Tim Roughgarden (<span class="citation" data-cites="Tim_Roughgarden">@Tim_Roughgarden</span>) <a href="https://twitter.com/Tim_Roughgarden/status/1379441864072429570?ref_src=twsrc%5Etfw">April 6, 2021</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>
</div>
<ol start="2" type="1">
<li><p>In a classroom setting, I can nudge the audience to discover things for themselves. As far as I know, the interactivity in online materials can help with validating understanding, but not as much with developing it from first principles. My hope is for learners to walk out of a classroom with the confidence that they <em>came up</em> with parts of the material in the textbook on their own.</p>
<p>Again, this is hard to do in time-bound fashion, given that a lot of this kind of understanding comes from brooding and hours of messing around. I can only hope to convince the audience that the process is worth the trouble.</p></li>
<li><p>The opportunity to show that you care. For learners who may have struggles with and beyond the materials ‚Äî classrooms, labs, and office hours afford opportunities for us to offer help.</p>
<p>This was a late realization for me personally: for the longest time, my own sense of self-doubt did not allow me to see that I could potentially be useful to someone else. While self-doubt remains, I have started to compartmentalize it enough to show up for others.</p></li>
</ol>
<p>All this said, I believe online and remote formats have substantial potential for making quality education accessible at scale, and that it is only a matter of time before classrooms in their most conventional forms either become obsolete or a ruse.</p>

<div class="no-row-height column-margin column-container"><div class="">
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
I am going to attend college lectures from now on just to increase my attention span. The goal will be to sit for an hour without sleeping or getting distracted from mobile notifications.
</p>
‚Äî Priyansh Agarwal (<span class="citation" data-cites="Priyansh_31Dec">@Priyansh_31Dec</span>) <a href="https://twitter.com/Priyansh_31Dec/status/1566707282695847937?ref_src=twsrc%5Etfw">September 5, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/on-teaching/calvin-21stcentury.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Calvin on 21st Century Education</figcaption><p></p>
</figure>
</div>
</section>
<section id="what" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what">What</h2>
<p>It is also increasingly challenging to formulate a curricula gets people to the bleeding edge starting from the foundations. For instance, there is a growing sentiment that <a href="http://nlpers.blogspot.in/2014/10/machine-learning-is-new-algorithms.html">Machine Learning is the new Algorithms</a> (or <a href="http://blog.geomblog.org/2014/10/algorithms-is-new-algorithms.html">maybe not</a>). On the other hand, the extent of involvement of ‚Äúmathematics‚Äù in introductory CS courses is also <a href="https://twitter.com/boazbaraktcs/status/1561737094866804738">up</a> <a href="https://twitter.com/togelius/status/1561737958385917953">for</a> <a href="https://twitter.com/YannaiGonch/status/1561480166429302784">debate</a>.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/on-teaching/https:/www.explainxkcd.com/wiki/images/7/79/obsolete_technology.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Cutting Edge</figcaption><p></p>
</figure>
</div>
</div></div><p>How much theory <a href="https://cstheory.stackexchange.com/questions/8761/what-can-i-do-to-supplement-my-theoretical-undergraduate-cs-curriculum-so-that-i">is needed</a> for competence in practice? How crucial is it to develop competencies that don‚Äôt have an immediately visible ROI? How frequently do we <a href="https://twitter.com/ramgopal_rao/status/1566428352398774272">rewrite the textbooks</a> based on developments in industry?</p>
<p>I once read a collection of answers to the question of what <em>every computer science graduate should know</em> on a Q&amp;A site. As an aspiring graduate myself, I figured I should know what I should know. Unfortunately, I remember it as a mostly unnerving experience: it was a list that started with Voronoi diagrams and ended with incompleteness theorems, and a <em>lot</em> of things in between.</p>
<p>From the other side of the fence, for whatever it‚Äôs worth ‚Äî the answer to this question <a href="https://twitter.com/togelius/status/1561738432422023175">remains elusive</a>, mainly because I think it‚Äôs a context-heavy issue. For better or worse, <a href="https://twitter.com/benmschmidt/status/1562256566631518208">there is a growing interest in computer science</a>, and it will likely remain a non-trivial challenge to find an approach that is both maximally inclusive and sufficiently useful. I can only hope that between ruthless efficiency in teaching things driven purely by need and a curriculum flooded with random adventures, we can find an balance appropriate to our contexts!</p>
<!-- ![[Comments](https://cstheory.stackexchange.com/questions/8761/what-can-i-do-to-supplement-my-theoretical-undergraduate-cs-curriculum-so-that-i) on a question on cstheory.SE](cstheoryvpractice.png){width=70%} -->
</section>
<section id="why" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="why">Why</h2>
<p>Given that everything that needs to be explained has more or less been done and dusted really well on the interwebs, personally, this is hardest question of the lot. Not from my own POV, that‚Äôs the easy bit - <a href="https://dsanghi.blogspot.com/2014/08/why-i-want-to-be-professor.html">as pointed out here</a>, it‚Äôs fun to go through the idea exchange process with a captive audience, and in my experience at least one party is sufficiently triggered at the end of it (hopefully in a good way).</p>

<div class="no-row-height column-margin column-container"><div class="">
<blockquote class="blockquote">
<p>The satisfaction that you get when you are able to explain a concept to someone who did not know it earlier is immense. Sometimes it could be straightforward, and sometimes it could be frustrating. But the end point is always the same - a smile on the faces of those students. Money can buy all the books, but can‚Äôt buy that smile.</p>
<p>Prof Dheeraj Sanghi, <a href="https://dsanghi.blogspot.com/2014/08/why-i-want-to-be-professor.html">‚ÄúWhy I want to be a professor‚Äù</a></p>
</blockquote>
</div></div><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/on-teaching/https:/phdcomics.com/comics/archive/phd062613s.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">On hope in teaching.</figcaption><p></p>
</figure>
</div>
<p>I am just not sure if we create enough of a net positive in a traditional classroom setup from a ROI perspective. Given the few good things that the internet has brought us, perhaps it is time to think beyond classrooms and focusing on making existing resources more accessible to everyone who‚Äôs interested.</p>



<div class="no-row-height column-margin column-container"><section id="join-the-conversation" class="level3">
<h3 class="anchored" data-anchor-id="join-the-conversation">Join the conversation</h3>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
New blog, new post:<a href="https://t.co/c2lEHM0lTI">https://t.co/c2lEHM0lTI</a><br><br>Meanwhile ‚Äî happy teachers day to everyone!
</p>
‚Äî Neeldhara (<span class="citation" data-cites="neeldhara">@neeldhara</span>) <a href="https://twitter.com/neeldhara/status/1566800730001788929?ref_src=twsrc%5Etfw">September 5, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</section></div></section>

 ]]></description>
  <category>funda</category>
  <guid>https://neeldhara.blog/posts/on-teaching/index.html</guid>
  <pubDate>Sun, 04 Sep 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/on-teaching/calvin-21stcentury.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Representing Graphs</title>
  <link>https://neeldhara.blog/posts/dsanotes/graphs/index.html</link>
  <description><![CDATA[ 




<section id="drawing-and-walking-challenges" class="level2">
<h2 class="anchored" data-anchor-id="drawing-and-walking-challenges">Drawing and Walking Challenges</h2>
<p>At some point of time in your life, you have likely been challenged to draw a kite-like figure:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/draw-K4.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A common drawing challenge.</figcaption><p></p>
</figure>
</div>
<p>without ever lifting your pencil/pen/quill off the paper. You may have noticed that there are figures that are particularly elusive to this persistent style of drawing, while others are pleasingly possible to draw in this fashion.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
(Spoiler) Beth Thomas demonstrating what drawing challenges are doable
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<iframe width="560" height="315" src="https://www.youtube.com/embed/E0BQrk49tbk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</div>
</div>
<p>The city of K√∂nigsberg in Prussia (now Kaliningrad, Russia) was set on both sides of the Pregel River, and included two large islands‚ÄîKneiphof and Lomse‚Äîwhich were connected to each other, and to the two mainland portions of the city, by seven bridges.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The Problem
</div>
</div>
<div class="callout-body-container callout-body">
<p>Devise a walk through the city that would cross each of those bridges once and only once. Try this yourself on a few different maps at <a href="https://mathigon.org/course/graph-theory/bridges">Mathigon</a>!</p>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch3-knbridges.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Konigsberg Classic: Map of K√∂nigsberg in Euler‚Äôs time showing the actual layout of the seven bridges, highlighting the river Pregel and the bridges. Image by Bogdan Giu≈ücƒÉ, in the public domain (CC BY-SA 3.0) and sourced from Wikipedia.</figcaption><p></p>
</figure>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
(Spoiler) Numberphile commentary on the bridges of K√∂nigsberg
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<iframe width="560" height="315" src="https://www.youtube.com/embed/W18FDEA1jRQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</div>
</div>
<p>The question was addressed and answered by Euler (1736). He did not solve this by ‚Äúmessing around‚Äù with all possible ways of walking around the city and checking if any of the walks satisfied the desired criteria. His more systematic approach involved modeling the problem abstractly, and making some key observations that ultimately led to the solution ‚Äî not just for this problem, but for all problems with a similar framing!</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Classroom Activity with Eulerian Paths
</div>
</div>
<div class="callout-body-container callout-body">
<p>The picture below shows a few popular actors, with edges connecting pairs of those who have worked together in a movie together<sup>1</sup>. The example is designed so that there are exactly two actors who participate in an odd number of pairings.</p>
<p>We can work through the ‚Äúbridges puzzle‚Äù on this graph. In the classroom, we all started with the vertex representing Juhi Chawla, ‚Äúwalked around‚Äù using every connection exactly once, and the fun effect is that everyone ends up at the vertex representing Rishi Kapoor (or solves the puzzle incorrectly). From here, you can probably begin to guess the role of the two special vertices in the puzzle.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch3-eulerpath.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">An actor collaboration graph</figcaption><p></p>
</figure>
</div>
<p>This activity is an adaptation of the example from the <a href="https://www.udacity.com/course/intro-to-algorithms--cs215">Intro to Algorithms</a> course at Udacity, where it appears in the first chapter with the title ‚ÄúA Social Network Magic Trick‚Äù.</p>
</div>
</div>
<p>Here‚Äôs another similar-sounding and classic problem involving a chessboard, <a href="https://en.chessbase.com/post/euler-and-the-knights-tour">also posed to Euler</a>:</p>
<blockquote class="blockquote">
<p>‚ÄúI found myself one day in a company where, on the occasion of a game of chess, someone proposed this question: <em>To move with a knight through all the squares of a chess board, without ever moving two times to the same square, and beginning with a given square.</em>‚Äù</p>
</blockquote>
<p>The origins of this problem ‚Äî the so-called ‚ÄúKnight‚Äôs Tour‚Äù ‚Äî goes all the way back to the 9th century AD, where it is described in <a href="https://www.ias.ac.in/article/fulltext/reso/025/08/1095-1116">Rudra·π≠a‚Äôs Kavyalankara</a>. Here‚Äôs an example of a knight‚Äôs tour, as seen on Wikipedia:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch3-kt-anim.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">An animated example of a knight‚Äôs tour.</figcaption><p></p>
</figure>
</div>
<p>Although deceptively similar to the problem of the bridges, this is a different problem with two important contrasts:</p>
<ol type="1">
<li>we were previously not allowed to reuse <em>bridges</em>, here we are not allowed to reuse <em>squares</em>, and</li>
<li>we were previously obliged to use <em>every</em> bridge, here we are <em>not</em> required to make every possible move that exists.</li>
</ol>
<p>Generalizing from the 8x8 chessboard, you could ask yourself what <img src="https://latex.codecogs.com/png.latex?(n%20%5Ctimes%20n)"> boards admit such tours.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
(Spoiler) Numberphile commentary on the knight‚Äôs tour
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<iframe width="560" height="315" src="https://www.youtube.com/watch?v=ab_dY3dZFHM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</div>
</div>
</section>
<section id="abstractions-via-graphs" class="level2">
<h2 class="anchored" data-anchor-id="abstractions-via-graphs">Abstractions via Graphs</h2>
<p>It‚Äôs useful to model such problems using <em>graphs</em> (aka <em>networks</em>). And we‚Äôre not talking sine curves here ‚Äî a graph in our context is a structure that represents relationships between entities.</p>
<p>Usually these relationships are between two entities at a time. Indeed, this is typically already quite a bit to keep track of, hence graphs that do more are said to be hyper. That is to say, graphs that model relationships involving more than two entities in one go are generally called <em>hypergraphs</em>, and they will be a story for another day.</p>
<p>For now, we will variously refer to entities as <em>vertices</em> or <em>nodes</em>, and relationships as <em>edges</em> or <em>connections</em>. Come to think of it, graphs are everywhere:</p>
<table class="table">
<thead>
<tr class="header">
<th>Entities</th>
<th>Two entitites are in a relationship if‚Ä¶</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>People</td>
<td>they are in a relationship.</td>
</tr>
<tr class="even">
<td>Cats</td>
<td>they have fought each other.</td>
</tr>
<tr class="odd">
<td>Actors</td>
<td>they have been in a movie together.</td>
</tr>
<tr class="even">
<td>Airports</td>
<td>there is a direct flight between them.</td>
</tr>
<tr class="odd">
<td>Landmasses</td>
<td>there is a bridge connecting them.</td>
</tr>
<tr class="even">
<td>Songs</td>
<td>one of the tunes was copied from the other.</td>
</tr>
<tr class="odd">
<td>Subsets of <img src="https://latex.codecogs.com/png.latex?%5B42%5D"></td>
<td>one is contained in another.</td>
</tr>
<tr class="even">
<td>Ingredients</td>
<td>there is a recipe that uses them together.</td>
</tr>
<tr class="odd">
<td>Webpages</td>
<td>one of them has a link leading to the other.</td>
</tr>
<tr class="even">
<td>Twitter Users</td>
<td>one of them follows the other<sup>2</sup></td>
</tr>
<tr class="odd">
<td>Locations on a Chessboard<sup>3</sup></td>
<td>one of them is reachable from the other via a knight move.</td>
</tr>
</tbody>
</table>
<p>We usually like to distinguish between graphs where the relationships are potentially one-sided (such as people in a relationship), and those where they are mutual (such as ingredients in a recipe). Edges like these are called <em>directed</em> and <em>undirected</em>, respectively.</p>
<p>Depending on what the graph is modeling, we may not allow for entities to entertain relationships with themselves (e.g, flights don‚Äôt come back to airports they took off from). In other contexts, it makes sense to allow for this (e.g, a set always contains itself). An edge that connects a vertex to itself is called a <em>self-loop</em><sup>4</sup>.</p>
<p>Sometimes, it is reasonable that there are multiple edges between a fixed pair of vertices (for example, consider that there are several recipies that use salt and potatoes). Multiple edges are useful to model a multitude of relationships, and are often called <em>multiedges</em> when used.</p>
<p>A <em>simple</em> graph is one that does not have either self-loops or multiedges.</p>
<p>Finally, it is worth mentioning that some relationships naturally connect more two entities. For example, in an actor collaboration graph, you would find edges between Amitabh Bachchan, Juhi Chawla, and Shah Rukh Khan. You would also find edges between Akshay Kumar, Dhanush, and Sonam Kapoor. In the first example, there happens to be one film that all three actors feature in together, while this is not the case in the latter, at least at the time of this writing. As such, the graph does not have enough structure to reveal this distinction: it looks exactly the same in both cases!</p>
<p>For an actor-collaboration graph, allowing for <img src="https://latex.codecogs.com/png.latex?n">-way relationships would make room for accurately capturing information about both actors and movies. Indeed, every movie could be represented by an ‚Äòedge‚Äô ‚Äî the subset of actors who belonged to the cast. Such graphs are called <em>hypergraphs</em> or <em>set systems</em>.</p>
<p>While hypergraphs are a very useful generalization of graphs, they will be largely out of scope for our discussions in this course. To make up for that, here is a different workaround to capture all the information we have in the actor-collaboration graph example. Instead of having a vertex for every actor, we introduce a vertex for every actor <em>and</em> for every movie. Now, an actor <img src="https://latex.codecogs.com/png.latex?a"> and a movie <img src="https://latex.codecogs.com/png.latex?m"> are connected by an edge if <img src="https://latex.codecogs.com/png.latex?a"> belongs to the cast of <img src="https://latex.codecogs.com/png.latex?m">. Observe that this approach can be used to ‚Äúconvert‚Äù any hypergraph into a graph.</p>
<p>A little more terminology before we move on: I promise that we‚Äôre almost done introducing new words!</p>
<p>For an undirected graph, a vertex <img src="https://latex.codecogs.com/png.latex?u"> is called a <em>neighbor</em> of a vertex <img src="https://latex.codecogs.com/png.latex?v"> if <img src="https://latex.codecogs.com/png.latex?(u,v)"> is an edge. For a directed graph, the presence of the edge <img src="https://latex.codecogs.com/png.latex?(u,v)"> would make <img src="https://latex.codecogs.com/png.latex?v"> an <em>out-neighbor</em> of <img src="https://latex.codecogs.com/png.latex?u"> and <img src="https://latex.codecogs.com/png.latex?u"> an <em>in-neighbor</em> of <img src="https://latex.codecogs.com/png.latex?v">.</p>
<p>For an undirected graph, the <em>degree</em> of a vertex <img src="https://latex.codecogs.com/png.latex?v"> is the number of neighbors of <img src="https://latex.codecogs.com/png.latex?v">. For a directed graph, the in-degree and out-degree of <img src="https://latex.codecogs.com/png.latex?v"> is the number of in-neighbors and out-neighbors of <img src="https://latex.codecogs.com/png.latex?v">, respectively.</p>
</section>
<section id="representing-graphs" class="level2">
<h2 class="anchored" data-anchor-id="representing-graphs">Representing Graphs</h2>
<p>If you wanted to tell your program about a graph, there are a few different ways you could go about it. Let‚Äôs assume that we‚Äôre trying to represent a graph <img src="https://latex.codecogs.com/png.latex?G"> on <img src="https://latex.codecogs.com/png.latex?n"> nodes, labeled <img src="https://latex.codecogs.com/png.latex?1"> through <img src="https://latex.codecogs.com/png.latex?n">, and <img src="https://latex.codecogs.com/png.latex?m"> edges.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How would you do it?
</div>
</div>
<div class="callout-body-container callout-body">
<p>Before reading further, it would be worth spending some time thinking about how you would represent a graph. Based on our discussions so far, you might counter this with the question: ‚ÄúWell, what do <em>you</em> need it for?‚Äù ‚Äî and that‚Äôs a fair reaction!</p>
<p>Listed below are some fairly common operations that come up when dealing with graphs.</p>
<pre class="[plaintext]"><code>1. add edge u v
2. remove edge u v
3. add vertex v
4. remove vertex v
5. is u a neighbor of v?
6. find degree v</code></pre>
</div>
</div>
<p><strong>Edge Lists.</strong> The most natural way is to perhaps just braindump the full list of edges. This gives us all we need to know about <img src="https://latex.codecogs.com/png.latex?G">.</p>
<p>Since this is just a plain list, you could implement it either as an array or as a linked list.</p>
<p><strong>Adjacency Matrix.</strong> The other way is to block off a <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> array <img src="https://latex.codecogs.com/png.latex?A"> of integers. You could then have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Bequation*%7D%0A%20%20%20A%5Bi%5D%5Bj%5D%20=%0A%20%20%20%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%201%20&amp;%20%5Ctext%7Bif%20%7D%20(i,j)%20%5Cin%20E,%5C%5C%0A%20%20%20%20%20%200%20&amp;%20%5Ctext%7Botherwise.%7D%0A%20%20%20%20%5Cend%7Bcases%7D%0A%5Cend%7Bequation*%7D%0A"></p>
<p><strong>Adjacency Lists.</strong> Finally, you could have an array <img src="https://latex.codecogs.com/png.latex?A"> of size <img src="https://latex.codecogs.com/png.latex?n">, with <img src="https://latex.codecogs.com/png.latex?A%5Bi%5D"> pointing to a list of the neighbors of the vertex <img src="https://latex.codecogs.com/png.latex?i"> if the graph is undirected, and out-neighbors if the graph is directed.</p>
<p>Again, since these are just lists, they could be, in principle, implemented either as arrays or linked lists. We will follow the traditional choice of implementing them as lists.</p>
<p>It should be no surprise at this point that there is no ‚Äúright‚Äù answer to the choice of representation. You might have noticed, for instance, that an adjacency matrix always reserves <img src="https://latex.codecogs.com/png.latex?n%5E2"> units of space to store <img src="https://latex.codecogs.com/png.latex?G">, while the amount of space consumed by the other two representations is proportional to <img src="https://latex.codecogs.com/png.latex?m">. Notice that the number of edges in a graph can be as large as <img src="https://latex.codecogs.com/png.latex?%5Capprox%20n%5E2"> for simple graphs, so there certainly are graphs for which the space consumption looks the same for all representations. However, for graphs where there aren‚Äôt as many edges, then the matrix representation is likely wasteful in terms of space, although you may have other good reasons for sticking to it.</p>
<p>Let‚Äôs classify expenses incurred as follows.</p>
<ol type="1">
<li><strong>Brilliant.</strong> When the procedure only needs constant time.</li>
<li><strong>Decent.</strong> When the procedure always wraps up in, and sometimes needs, time proportional to the maximum degree of the graph.</li>
<li><strong>(n/m)-tolerable.</strong> When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph.</li>
<li><strong>(n/m)-painful.</strong> When the procedure always wraps up in, and sometimes needs, time proportional to the number of vertices/edges in the graph squared.</li>
</ol>
<p>Here‚Äôs a run down of how the representations above fare with respect to some of the common operations mentioned in the opening exercise.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Operations</th>
<th style="text-align: center;">Adj. Matrix</th>
<th style="text-align: center;">Adj. List</th>
<th style="text-align: center;">Edge List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Adding a vertex</td>
<td style="text-align: center;">n-Painful</td>
<td style="text-align: center;">n-Tolerable</td>
<td style="text-align: center;">Decent</td>
</tr>
<tr class="even">
<td style="text-align: center;">Deleting a vertex</td>
<td style="text-align: center;">n-Painful</td>
<td style="text-align: center;">n-Tolerable</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Adding an edge</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Brilliant</td>
</tr>
<tr class="even">
<td style="text-align: center;">Deleting an edge</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Decent</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Finding degree(v)</td>
<td style="text-align: center;">n-Tolerable</td>
<td style="text-align: center;">Decent</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
<tr class="even">
<td style="text-align: center;">Check if (u,v) is an edge</td>
<td style="text-align: center;">Brilliant</td>
<td style="text-align: center;">Decent</td>
<td style="text-align: center;">m-Tolerable</td>
</tr>
</tbody>
</table>
<p>It would be a good exercise to validate that these claims indeed make sense.</p>
<p>Now that we‚Äôre comfortable with storing graphs, next up, we‚Äôll talk about exploring them.</p>
<p><br></p>
<hr>
<p><br></p>
<div id="hyvor-talk-view">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I‚Äôve been told that this representation is not complete, and indeed, I have only verified that the connections are justified‚Ä¶ some of the missing edges are likely to be inaccurate.‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Find out more about <a href="https://dl.acm.org/doi/10.1145/2488388.2488433">Twitter‚Äôs WTF (who-to-follow) service</a>.‚Ü©Ô∏é</p></li>
<li id="fn3"><p>See how the puzzle about exchanging the positions of black and white knights can be <a href="https://www.nytimes.com/2022/07/05/science/june-huh-heisuke-hironaka-math-chromatic-geometry.html">recast as a graph problem</a>.‚Ü©Ô∏é</p></li>
<li id="fn4"><p>There are even graphs that <a href="https://en.wikipedia.org/wiki/Bouquet_graph"><em>only</em> have self-loops</a>.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/graphs/index.html</guid>
  <pubDate>Tue, 09 Aug 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/figures/draw-K4.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Representing Sequences</title>
  <link>https://neeldhara.blog/posts/dsanotes/sequences/index.html</link>
  <description><![CDATA[ 




<section id="of-playlists-and-tweet-threads-representing-sequential-information" class="level1 page-columns page-full">
<h1>Of Playlists and Tweet Threads: <br>Representing Sequential Information</h1>
<p><a href="https://slides.com/neeldhara/dsa1-w01#/2/1">Link to Slides</a></p>
<p>So far, we have worked with <em>atomic</em> types, which is to say variables that can hold a ‚Äúsingle kind of data‚Äù for us ‚Äî like integers, characters, strings, booleans, and so on. Often, however, we need to work with compound types, which is to say, a bunch of these things taken together. For example, you may have sensed that when we spoke of maintaining <a href="intro.qmd">a set of cards</a> earlier with 52 booleans, it may have been nicer if they could be strung together into a single, unified structure: for one, it saves you having to keep track of a large number of variables, and further, it might be easier ‚Äî as we will find out ‚Äî to manipulate the data in response to operations that we may want to support.</p>
<p>When you speak of a bunch of objects, it is useful to agree on whether you interpret the collection as an <em>ordered</em> or <em>unordered</em> set. Consider the following examples:</p>
<ol type="1">
<li>Your playlist of happy songs</li>
<li>A stack of cards</li>
<li>People living in a house</li>
<li>Teams that played in the Asia Cup 2022</li>
<li>Chess pieces on a board mid-game</li>
</ol>
<div class="page-columns page-full"><p>While some people play their happy songs in shuffle mode, for some the playlist is carefully organized, and the order matters. A stack of cards and chess pieces on a board are clearly collections with a natural sense of order, and one that is very likely to be important. On the other hand, people who live in a particular house or the set of teams that participated in the Asia cup in 2022 can be thought of as sets with no underlying order: of course, if you had to impose one you could cook something up<sup>1</sup> (e.g, alphabetical, favorites, and so on). We will focus on storing ordered lists for now and return to sets in due course.</p><div class="no-row-height column-margin column-container"><li id="fn1"><p><sup>1</sup>&nbsp;For example, the C++ implementation of <code>set</code> maintains a default order even though it is, by nomenclature, modeling unordered sets. On the other hand, the <code>unordered_set</code> data structure in the C++ STL throws all caution to the wind and buys faster operations on average.</p></li></div></div>
<p>There are a few different ways that you can store a list of things in a computer‚Äôs memory. Imagine that you are real estate agent and you want to book some houses in a complex for your current and future clients. Stretching your imagination a little bit further, say all houses are numbered from 1 to 1000 and are positioned on a straight line in the natural order (i.e, 2 after 1, 3 after 2, and so on). Some houses are occupied and others are not. If you reserve <img src="https://latex.codecogs.com/png.latex?k"> houses, management will find some contiguous block of <img src="https://latex.codecogs.com/png.latex?k"> unoccupied houses and give you the number of the first house in the block. For instance, if you ask for 50 houses, you would get a letter from the management saying 50 houses starting from #420 are yours. If you need 20 more houses later, you would get a letter from the management saying 70 houses starting from #777 are yours. That‚Äôs right: they are not obiligied to give you houses #470 to #489, indeed, these may not be avaiailable. They <em>could</em> just give you an additional chunk of 20 houses somewhere else, but sadly that‚Äôs not how they roll: them management, them rules. There are also no refunds: you can‚Äôt give back reserved houses.</p>
<p>Now here comes our first dilemma: how many houses do we reserve? Say we have 20 clients: it is clear that we need to reserve <em>at least</em> 20 houses, but should we reserve a few more? Reservations are not free, so we don‚Äôt want to reserve a very large number of houses either: remember, there are no refunds. But on the other hand, if we reserve too few, and we end up with more clients than the number of houses we‚Äôve reserved, we will be in a sticky situation ‚Äî worst case some clients may have to move, which is not ideal. You will have to work on coming up with a reasonable estimate of how many clients you will eventually have, and hope for the best.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch2-houses-01.png" class="img-fluid figure-img" style="width:70.0%"></p>
<p></p><figcaption class="figure-caption">Expanding your reservations can get tricky</figcaption><p></p>
</figure>
</div>
<p>Over time you find that this business of estimating the number of clients you have is an unpleasant one: both under and overestimates lead to losses, which makes you wonder if there are apartments that have more flexible options. You look around, and why yes, you find a different apartment complex ‚Äî again a thousand houses on a line neatly numbered 1 to 1000 from left to right, but this time, management reserves one house at a time. You want a new house, you simply ask for one. But there‚Äôs a catch: the paperwork here requires you to submit the client‚Äôs information, and they directly get their house number. So this is actually quite efficient: the management does all the work and you can reserve exactly what you need. All is well until it‚Äôs time for Diwali and you realize you don‚Äôt know where your clients are housed, and you can‚Äôt send them postcards, sweets, and advertisements.</p>
<p>You could, of course, just call your clients and ask them for their house numbers, but then this requires you to maintain some kind of register, and let us just say that you are not good with that kind of thing. So here‚Äôs what you do instead: you only keep the first client‚Äôs address, because that‚Äôs just one thing that‚Äôs easy to remember. Then you ask your <img src="https://latex.codecogs.com/png.latex?i">-th client to remember the address of the <img src="https://latex.codecogs.com/png.latex?(i+1)">-th client: they are slightly bewildered but you tell them it‚Äôs for insurance. Now if you want to pay a visit to your <img src="https://latex.codecogs.com/png.latex?%5Cell">-th client, you just start from your first one, and follow the trail. Peculiar, but works.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/figures/ch2-houses-02.gif" class="img-fluid figure-img" style="width:70.0%"></p>
<p></p><figcaption class="figure-caption">Walking around to find your clients with new management.</figcaption><p></p>
</figure>
</div>
<p>Note that with the previous maangement this was never a problem: you had a contiguous block of houses that you allocated sequentially, so your <img src="https://latex.codecogs.com/png.latex?i">-th client‚Äôs house address was always at hand if you were good with arithmetic or had a calculator: simply add <img src="https://latex.codecogs.com/png.latex?(i-1)"> to the house number of the first client.</p>
<p>As analogies go this was both unrealistic and imprefect, but I hope it gives you a sense of the main trade-offs involved in the two ways we have to store sequential data ‚Äî very roughly speaking:</p>
<ul>
<li>in contiguous blocks, access is easy, flexibility is hard;</li>
<li>with elements all over the place, access is indirect but the structure is relatively flexible.</li>
</ul>
<section id="arrays" class="level2">
<h2 class="anchored" data-anchor-id="arrays">Arrays</h2>
<p>Quoting <a href="https://en.wikipedia.org/wiki/Array_data_structure">Wikipedia</a>:</p>
<blockquote class="blockquote">
<p>An array is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. An array is stored such that the position of each element can be computed from its index tuple by a mathematical formula.</p>
</blockquote>
<blockquote class="blockquote">
<p>For example, an array of 10 32-bit (4-byte) integer variables, with indices 0 through 9, may be stored as 10 words at memory addresses 2000, 2004, 2008, ‚Ä¶, 2036, (in hexadecimal: 0x7D0, 0x7D4, 0x7D8, ‚Ä¶, 0x7F4) so that the element with index i has the address 2000 + (i √ó 4).[4]</p>
</blockquote>
</section>
<section id="linked-lists" class="level2">
<h2 class="anchored" data-anchor-id="linked-lists">Linked Lists</h2>
<p>Quoting <a href="https://en.wikipedia.org/wiki/Linked_list">Wikipedia</a>:</p>
<blockquote class="blockquote">
<p>A linked list is a linear collection of data elements whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence. In its most basic form, each node contains: data, and a reference (in other words, a link) to the next node in the sequence. This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration.</p>
</blockquote>
<blockquote class="blockquote">
<p>More complex variants add additional links, allowing more efficient insertion or removal of nodes at arbitrary positions. A drawback of linked lists is that access time is linear (and difficult to pipeline). Faster access, such as random access, is not feasible. Arrays have better cache locality compared to linked lists.</p>
</blockquote>
</section>
<section id="comparison" class="level2">
<h2 class="anchored" data-anchor-id="comparison">Comparison</h2>
<p>Given a fully occupied array with n elements v/s a linked list with n elements, here are the costs of some operations that you might want to perform:</p>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 21%">
<col style="width: 28%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Operations</th>
<th style="text-align: center;">Arrays</th>
<th style="text-align: center;">Singly Linked List</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Looking up the i-th element</td>
<td style="text-align: center;">instant</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> i</td>
</tr>
<tr class="even">
<td style="text-align: center;">Adding a new element at the start</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n</td>
<td style="text-align: center;">instant</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Adding a new element at the end</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n</td>
</tr>
<tr class="even">
<td style="text-align: center;">Removing the i-th element</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> n-i</td>
<td style="text-align: center;"><img src="https://latex.codecogs.com/png.latex?%5Capprox"> i</td>
</tr>
</tbody>
</table>
</section>
<section id="what-should-you-use" class="level2">
<h2 class="anchored" data-anchor-id="what-should-you-use">What should you use?</h2>
<p>The correct answer is: it depends. If you expect your lists to be heavily manipulated, then linked lists are likely to be the better choice. On the other hand, if yuo are working with a list of a predictable size (or you at least have a known and reasonable upper bound on the size), and direct access is important to you, then arrays are the way to go. If you are dissatisfied with both methods, then consider transforming your unhappiness into motivation for discovering more sophisticated options!</p>

<!--
    - index.qmd
    - intro.qmd
    - sequences.qmd
    - cardtricks.qmd
    - graphs.qmd
    - traversals.qmd
    - stablematchings.qmd
 -->


</section>
</section>


 ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/sequences/index.html</guid>
  <pubDate>Mon, 01 Aug 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/figures/ch2-houses-01.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Data Structures and Structured Data</title>
  <link>https://neeldhara.blog/posts/dsanotes/introduction/index.html</link>
  <description><![CDATA[ 




<p><a href="https://slides.com/neeldhara/dsa1-w01">Link to Slides</a></p>
<section id="wdym-data-structures" class="level2">
<h2 class="anchored" data-anchor-id="wdym-data-structures">WDYM, data structures?</h2>
<p>We will keep it casual and skip formal definitions for now. üëÄ</p>
<p>Data structures give us principled ways to <em>stow away</em> information. It‚Äôs important to do this nicely based on what you want to <em>do</em> with the information.</p>
<p>For example, the notes you might be taking in this class is information. If you have no plans of revisiting them later, you can take them as you please, or better yet, not take them at all!</p>
<p>However, you want your notes optimised for giving you quality company during a 2AM revision session on exam day, competing with Maggi for attention, you want your notes to be competently taken: they don‚Äôt have to be neat, and it‚Äôs enough for them to be useful.</p>
<p>On the other hand, if you are taking notes so that a special someone who will inevitably miss a few classes will almost certainly ask for later, then you would be making notes to impress, and that potentially requires a different approach.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Throughout this course, we will try to make sense of trade-offs.
</div>
</div>
<div class="callout-body-container callout-body">
<p>We‚Äôll equip ourselves with ideas that will ultimately help you decide questions like: how do you organise the clothes in your cupboard?</p>
<table class="table">
<colgroup>
<col style="width: 19%">
<col style="width: 37%">
<col style="width: 43%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>Throw ‚Äôem in, nobody‚Äôs looking</th>
<th>Keep it where you can find it later</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Time to process</td>
<td>Negligible</td>
<td>Forever</td>
</tr>
<tr class="even">
<td>Time to retrieve</td>
<td>Forever</td>
<td>Negligible</td>
</tr>
</tbody>
</table>
<p>Table 1. No free lunches.</p>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
This <em>is</em> in fact a useful framing!
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-table01.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Table 1 Revisited. No Free Lunches</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="representing-polynomials" class="level2">
<h2 class="anchored" data-anchor-id="representing-polynomials">Representing Polynomials</h2>
<p>Let‚Äôs say that you are spending a fine evening watching the #LockdownMath playlist from 3blue1brown. The first episode happens to be all about solving quadratics:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-lockdownmath.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A screenshot from #LockdownMath showing Grant Sanderson solving quadratics.</figcaption><p></p>
</figure>
</div>
<p>Now, it‚Äôs quite natural to want to ‚Äúwrite a program‚Äù, so to speak, that can take a quadratic equation such as <img src="https://latex.codecogs.com/png.latex?x%5E2%20-%207x%20+%2012"> as input and output its two roots.</p>
<p>Given that programs running on your phone are able to make suggestions, even if dubious, for what series to binge-watch next on Netflix, finding roots of quadratics should be a fairly benign exercise.</p>
<p>You might recall that most programs let you declare variables that can hold on to specific <em>types</em> of information, for instance: numbers, strings, and so forth. Our input doesn‚Äôt ‚Äúlook‚Äù like a number, so it would be a fair take to simply store it as a string:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb1-1">px <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"x^2 - 7x + 12"</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Now‚Ä¶
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-meme01.jpeg" title="Meme: So preoccupied with if you could, you didn't stop to ask if you should." class="img-fluid"></p>
</div>
</div>
</div>
<p>While this is a perfectly faithful representation, you can imagine that it would be slightly painful to work with. You would have to write some code that can ‚Äúpull out‚Äù the parts of the string that represent the <em>numbers</em> you care about (in this example, <img src="https://latex.codecogs.com/png.latex?b%20=%20-7"> and <img src="https://latex.codecogs.com/png.latex?c%20=%2012">), so that you can move on to your calculation, which is an <em>expression</em> involving numbers.</p>
<p>Given that a quadratic with the leading coefficient normalized to one is uniquely determined by two numbers, it seems a lot simpler to directly represent the polynomial as two integers instead:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb2-1">px_b <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb2-2">px_c <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">12</span></span></code></pre></div>
<p>You might appreciate that this saves us quite some circus and we can quite directly get to the computation we‚Äôre interested in. What if you cared about higher order polynomials? You may want to solve them (even if you <a href="https://www.youtube.com/watch?t=2543&amp;v=O5eH3x3sTNA&amp;feature=youtu.be">run out of expressions for solutions pretty quickly</a>, you might be interested in <a href="https://math.stackexchange.com/a/1386830">other ways of getting to the roots</a>), or manipulate them in other ways (for example, by adding or <a href="https://www.youtube.com/watch?v=h7apO7q16V0">multiplying</a> them).</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>How would you represent higher-order polynomials? What about multivariate polynomials? Is there a way that you might be able to capture an algebraic expression for a polynomial without either using strings or just the coefficients?</p>
</div>
</div>
</section>
<section id="representing-a-game---i" class="level2">
<h2 class="anchored" data-anchor-id="representing-a-game---i">Representing a Game - I</h2>
<p>The <a href="https://www.youtube.com/watch?v=846A4rgO_os">game of 100</a> goes like this: I pick a number between 1 and 10, and then you pick one within the next ten numbers, and on and on. The first person to reach 100 wins.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Recall from class and/or figure out that‚Ä¶
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
SPOILER ALERT
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>...whoever starts has a way of winning the game:

    0. To begin with, I say 1.
    1. No matter what number you pick, I can say 12.
    2. No matter what number you pick, I can say 23.
    3. No matter what number you pick, I can say 34.
    4. No matter what number you pick, I can say 45.
    5. No matter what number you pick, I can say 56.
    6. No matter what number you pick, I can say 67.
    7. No matter what number you pick, I can say 78.
    8. No matter what number you pick, I can say 89.
    9. No matter what number you pick, I can say 100.</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<p>What if you want to write a program that mimics the winning strategy?</p>
<p>Note that this game can go on for at most a 100 steps, and in fact exactly 20 steps (or ten rounds) when you employ said winning strategy. So one way to go about this is to declare 20 variables to track the 20 numbers exchanged between the players. But a moment‚Äôs reflection may reveal that you <em>don‚Äôt</em> need to store anything at all.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Can you write a program that makes the first move, prompts the user for their moves on their turn, uses the winning strategy discussed above, and uses no variables for explicit storage?</p>
</div>
</div>
</section>
<section id="representing-a-game---ii" class="level2">
<h2 class="anchored" data-anchor-id="representing-a-game---ii">Representing a Game - II</h2>
<p>If <del>you missed the first class</del> you haven‚Äôt played the <a href="https://ncase.me/trust/">Game of Trust</a>, you are welcome to take a break and experience it now. Let‚Äôs recollect the setup:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-game-trust.png" title="Alt text: The Game of Trust. You have one choice. In front of you is a machine: if you put a coin in the machine, the other player gets three coins and vice versa. You both can either choose to COOPERATE (put in coin), or CHEAT (don't put in coin). The image shows a cartoon machine with players on either side." class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">Illustration from an implementation by <a href="https://ncase.me/trust/">Nicky Case</a>.</figcaption><p></p>
</figure>
</div>
<p>Suppose you want to implement your own version of this game, where the program responds to inputs from the user and plays according to a specific, pre-meditated strategy. Remember you have seen some strategies already:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<figure class="figure">
<img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-players-trust.png" title="Five player strategies also outlined below." class="img-fluid figure-img">
</figure>
<p></p><figcaption class="figure-caption">A second illustration from the same implementation by <a href="https://ncase.me/trust/">Nicky Case</a>.</figcaption><p></p>
</figure>
</div>
<p>We reproduce these strategies below:</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Player Strategies
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>COPYCAT: Hello! I start with Cooperate, and afterwards, I just copy whatever you did in the last round. Meow.</li>
<li>ALWAYS CHEAT: The strong shall eat the weak.</li>
<li>ALWAYS COOPERATE: Let‚Äôs be best friends &lt;3</li>
<li>GRUDGER: Listen, pardner. I‚Äôll start cooperatin‚Äô, and keep cooperatin‚Äô, but if y‚Äôall ever cheat me, I‚ÄôLL CHEAT YOU BACK TIL THE END OF TARNATION.</li>
<li>DETECTIVE: First: I analyze you. start: Cooperate, Cheat, Cooperate, Cooperate. If you cheat back, I‚Äôll act like Copycat. If you never cheat back, I‚Äôll act like Always Cheat, to exploit you. Elementary, my dear Watson.</li>
</ol>
</div>
</div>
<p>Let‚Äôs say that your program is designed to play 5 rounds and that your program is playing the copycat strategy. To begin with, you might want to declare a couple of variables to keep track of the scores of the players, and ten variables to track the moves of both players in each round. With this, your code may start out looking like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb4-1">my_points <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-2">user_points <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">user_move_1 <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">input</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Input 1 for Cooperate and 0 for Cheat."</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;">//Sanity check input:</span></span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_1 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span> and user_move_1 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb4-8">    express disappointment and abort</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">// My first move is to cooperate:</span></span>
<span id="cb5-2">my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb5-3">user_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_1<span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb5-6">    my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb5-7">    user_points <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<p>Now your next move is determined by the value of <code>user_move_1</code>, so you might proceed as follows.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb6-1">user_move_2 <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">input</span><span class="op" style="color: #5E5E5E;">(</span><span class="st" style="color: #20794D;">"Input 1 for Cooperate and 0 for Cheat."</span><span class="op" style="color: #5E5E5E;">)</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">//Sanity check input:</span></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_2 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span> and user_move_2 <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb6-5">    express disappointment and abort</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode java code-with-copy"><code class="sourceCode java"><span id="cb7-1"><span class="co" style="color: #5E5E5E;">// My next move is based on the user's first:</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_1<span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb7-3">    my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb7-4">    user_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;">if</span><span class="op" style="color: #5E5E5E;">(</span>user_move_2<span class="op" style="color: #5E5E5E;">):</span></span>
<span id="cb7-7">    my_points <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb7-8">    user_points <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<p>‚Ä¶and so on and on, you get the drift.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Do you really need ten variables to track the game? If you were instead implementing the always cheat or always cooperate strategy, how many variables would you need? What about the strategies of the grudger and the detective?</p>
</div>
</div>
<p>Now, suppose we come up with our own player, whom we call the <strong>majority mover</strong>. This player looks at your entire game history, and cooperates if you have cooperated more than you have cheated, and cheats if you have cheated more than you have cooperated, and acts randomly otherwise.</p>
<p>It seems like implementing the majority mover strategy would really require keeping track of everything. Or would it? You might observe at this point that it‚Äôs enough to keep track of two counts: the number of rounds and the <em>number</em> of moves where the user has cheated: note that it does not matter when the cheats happened in the history of the game.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
You could also‚Ä¶
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚Ä¶track the number of cooperate moves along with the number of rounds; or the number of cheat moves and the number of cooperate moves.</p>
<p>At this point it‚Äôs a matter of taste :)</p>
</div>
</div>
</div>
<p>How about a <strong>completely random</strong> player? This one chooses a number <strong>K</strong> between 1 and N uniformly at random (let‚Äôs not worry about <em>how</em> this is done for now, because that would be a story for another day), where N is the number of rounds played so far; and mimics the other player‚Äôs <strong>K</strong>th move. To implement this strategy, you really would need to keep track of the user‚Äôs entire game history with the five variables, and also assume that you have a way of picking a number at random.</p>
<p>Finally, consider that instead of fixing your program to play five rounds ‚Äî ü•± ‚Äî you want to politely ask the user how m<em>any </em>rounds they want to play.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
After all‚Ä¶
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-meme02.jpeg" title="Meme: we are professionals." class="img-fluid"></p>
</div>
</div>
</div>
<p>Well, for the first few players, this is just a matter of upgrading your for loop (which you should have switched to already when you realised that you don‚Äôt need all. those. variables.) to use N: and you are done.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>How will you implement this version if you are working with our latest player? If you happen to have a very enthusiastic user who asks for half a million rounds, would you be able to declare that many variables all at once, while your program is running? Notably, you don‚Äôt know what the user is going to say ahead of time!</p>
</div>
</div>
</section>
<section id="representing-a-subset-of-a-deck-of-cards" class="level2">
<h2 class="anchored" data-anchor-id="representing-a-subset-of-a-deck-of-cards">Representing a subset of a deck of cards</h2>
<p>If you are implementing a card<sup>1</sup> game, you might need a mechanism for keeping track of ‚Äúhands‚Äù, or various subsets of cards. Let‚Äôs say a <em>hand</em> is a subset of cards. For many games, you would need the ability to be able to quickly:</p>
<ul>
<li>tell if a particular card belongs to a hand or not,</li>
<li>add a card to a hand,</li>
<li>remove a card from a hand, and</li>
<li>replace a card in a hand with another one.</li>
</ul>
<p>One way to meet these requirements is to declare a collection of 52 boolean (i.e, true/false or 0/1) variables to represent the hand: the cards in the hand are set to true while cards that don‚Äôt belong are set to false.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>What do you like about this method? What don‚Äôt you like about it?</p>
</div>
</div>
<p>Here‚Äôa another way, though: you could agree on a notation for the cards in the deck: e.g, a standard one is to use a number, A/J/Q/K to denote the value, and S/C/D/H to denote the suit, so every card can be represented as a pair of characters. For example the Ace of Diamonds would be AD, the five of spades would be 5S and the King of Hearts would be KH. With this in place, you could represent a hand also by simply <em>concatenating</em> these string representations of the cards in the hand.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>What do you like about this method? What don‚Äôt you like about it?</p>
</div>
</div>
<p>Now for this toy example, if you were to implement both methods and clock the time taken to implement the four operations above, you may not notice a major difference. However, for actual applications, you may be in a situation where your <em>subsets</em> (here, the ‚Äúhands‚Äù) may be coming from a large <em>universe</em> (here, the ‚Äúdeck‚Äù). On the other hand, you may have a very large number of operations to take care of efficiently.</p>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Food for thought.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Are there other ways that you might want to store this kind of information, given the things you want to do are as enlisted above?</p>
</div>
</div>
<p>Your choice of method will again be driven by the requirements: the one thing to keep in mind is that you cannot have it all, but we can usually get pretty damn close!</p>
<p><br></p>
<hr>
<p><br></p>
<div id="hyvor-talk-view">

</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Assume you are working with the <a href="https://en.wikipedia.org/wiki/Standard_52-card_deck">standard 52-card deck</a>.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>dsanotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/dsanotes/introduction/index.html</guid>
  <pubDate>Sun, 31 Jul 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/dsanotes/introduction/figures/ch1-table01.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Solo Chess</title>
  <link>https://neeldhara.blog/posts/solo-chess/index.html</link>
  <description><![CDATA[ 




<p>Putting <a href="https://twitter.com/neeldhara/status/1506794212590768130">this thread</a> in one place.</p>
<hr>
<p>üßµ&nbsp;on our latest at FUN 2022 with <a href="https://twitter.com/NRAravind1"><span class="citation" data-cites="NRAravind1">@NRAravind1</span></a> and Harshil.</p>
<p>Have you tried Solo Chess <a href="https://twitter.com/chesscom"><span class="citation" data-cites="chesscom">@chesscom</span></a> yet? It‚Äôs addictive ‚Äî and NP-complete* even when you‚Äôre dealing only with rooks!</p>
<p>*when appropriately generalized</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/FOk1WJZXwAUb7V7.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The Rules of the Game</figcaption><p></p>
</figure>
</div>
<p>So this is a single-player, peg-solitaire-ish chess variant, where you have to clear board by making a sequence of valid captures, albeit starting with unorthodox ‚Äî and even unrealistic ‚Äî positions.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_04.30.34.png" class="img-fluid figure-img" style="width:42.0%"></p>
<p></p><figcaption class="figure-caption">An example position</figcaption><p></p>
</figure>
</div>
<p>To begin with the boards start easy, with a few pieces at a time. Notice, even in the early games, how some positions have just one solution while others may have several.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot%202022-08-30%20at%2008.46.16.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">More positions</figcaption><p></p>
</figure>
</div>
<p>From initial plays, you sense that it has a very Hamiltonian-Path-ish vibe, and feels like you‚Äôre trying to find a path in <em>some</em> graph üòÖ&nbsp;</p>
<p>We started with a variant that was simultaneously a generalization and specialization:</p>
<ul>
<li>n pieces üòé</li>
<li>‚ôñ‚Äôs only</li>
<li>1D boards üôà</li>
</ul>
<p>This, it turns out, is case so special that its trivial - you can sweep all rooks to the extreme left or extreme right of the board, and any position is winning even if every rook can capture exactly once. Less trivial though: how many ways there are to win? ü§î</p>
<p>We also ask what happens if every rook had a designated number of captures left. Imagine you have a 1D board and three kinds of rooks:</p>
<ul>
<li>red rooks cannot move</li>
<li>blue rooks can move at most once</li>
<li>green rooks can move at most twice</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_04.47.53.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">1D Boards</figcaption><p></p>
</figure>
</div>
<p>We show that such 1D boards can be cleared if and only if then number of green rooks is at least the number of red rooks. This ties nicely with the intuition that every immovable rook needs to be picked up by a rook that can help another one (i.e, &gt; one move left).</p>
<p>This generalizes naturally to rooks with a designated number of moves left, where said number can be anything between 0 and d.&nbsp;Since no other chess piece moves sensibly* across a 1D board, we decided to move on 2D boards from here.</p>
<ul>
<li>Kings + rooks is an easy exercise.</li>
</ul>
<p>So if you are still playing with red, blue, and green rooks, then the problem of checking if a given 2D configuration can be cleared up according to solo chess rules turns out to be NP-complete.</p>
<p>No Hamiltonian Path though ‚Äî this one was from bipartite dominating set üòé</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_04.58.23.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A reduction from bipartite dominating set - I</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_04.53.21.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A reduction from bipartite dominating set - II</figcaption><p></p>
</figure>
</div>
<p>Bishops are much the same as rooks, by a 45-degree tilt of the board.</p>
<p>‚ö†Ô∏è&nbsp;Still open though: what about the case when all pieces have at most two moves left, which is closer to the original spirit of the game?</p>
<p>We don‚Äôt know yet, although we‚Äôd bet it‚Äôs hard, I think.</p>
<p>When playing with queens only, however, we can gadget in the behaviors of red and blue pieces. So we do have that Generalized Solo Chess with just queens that can all move at most twice is NP-complete.</p>
<p>What about pawns? Let‚Äôs get clarifying assumptions out of the way:</p>
<ul>
<li>white pawns only</li>
<li>regular captures only since there‚Äôs no premise for en passant captures</li>
</ul>
<p>In solo chess, pawns are (heavily) constrained bishops: they can only move upwards and to a neighboring diagonal square. Knowing that bishops were hard, but pawns felt simple ‚Äî we didn‚Äôt have a bet either way. ü§î</p>
<p>We were pleasantly surprised that the case of pawns is tractable, even when each pawn has a designated* number of moves!</p>
<p>*at most two.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_05.23.22.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Lemma for pawns</figcaption><p></p>
</figure>
</div>
<p>The algorithm is linear time, too.</p>
<p>Next: what about knights? We don‚Äôt know yet!</p>
<p>‚ùì&nbsp;What‚Äôs the complexity of solo chess when played only with knights?</p>
<p>Knights are special because we don‚Äôt have to worry about obstructions. So the game can be described by a more general token game on graphs:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_05.28.55.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The Graph Capture Problem</figcaption><p></p>
</figure>
</div>
<p>We do show that Graph Capture is hard by a reduction, again from bipartite dominating set. This might hint at the hardness for Solo Chess played with knights only, but we are not betting on this yet.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_05.29.11.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Another reduction from bipartite dominating set - I</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_05.29.06.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Another reduction from bipartite dominating set - II</figcaption><p></p>
</figure>
</div>
<p>I think these preliminary explorations have left us with more questions than answers:</p>
<ul>
<li>optimization versions (e.g, clear at least k pieces)</li>
<li>other constraints (e.g, on distance moved)</li>
<li>special cases (e.g, O(1) pieces per row/column)</li>
<li>n x c boards, constant c</li>
</ul>
<p>While at it, I‚Äôm also curious about how <a href="https://twitter.com/chesscom"><span class="citation" data-cites="chesscom">@chesscom</span></a> generates these puzzles, and if they have a mechanism for generating ones that have unique solutions. Also, is it true that if you throw ‚Äúenough‚Äù pieces on the board, it‚Äôs solvable WHP?</p>
<p>Shout out to the <a href="https://ctan.org/tex-archive/fonts/chess/skak">skak package</a> for making it easy to bring chess pieces to TikZ. We expect to put up a preprint on ArXiV soon. üëÄ&nbsp; Meanwhile, we welcome comments and feedback ‚Äî and if you read this far, thanks very much!</p>
<p>PS. Also if you enjoy chess and algorithms, don‚Äôt miss <a href="https://miguel-ambrona.github.io/">Miguel Ambrona‚Äôs</a> amazing <a href="https://chasolver.org/">Chess Unwinnability Analyzer</a>, which also appears at FUN 2022!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/solo-chess/CleanShot_2022-03-24_at_05.56.43.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Chess Unwinnability</figcaption><p></p>
</figure>
</div>
<p>You can find the <a href="https://sites.google.com/view/fun2022/acceptedpapers">full list of accepted papers here</a>.</p>



 ]]></description>
  <category>exposition</category>
  <category>twitterthread</category>
  <guid>https://neeldhara.blog/posts/solo-chess/index.html</guid>
  <pubDate>Wed, 23 Mar 2022 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/solo-chess/FOk1WJZXwAUb7V7.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Eight Self-Sabotaging Behaviors</title>
  <link>https://neeldhara.blog/posts/eight-self-sabotaging-behaviors/index.html</link>
  <description><![CDATA[ 




<p>Putting <a href="https://twitter.com/neeldhara/status/1503551801378881541">this thread</a> in one place.</p>
<hr>
<p>üßµ <span class="citation" data-cites="fortelabs">@fortelabs</span> recently finished the opening keynote on <a href="https://twitter.com/fortelabs/status/1498668781585014785?ref_src=twsrc%5Etfw">the Second Brain summit</a>, which incidentally has a great lineup including a panel discussion on PKM through the lens&nbsp;of ADHD. Ironically, I didn‚Äôt quite take notes but I think the themes also feature in this short video:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/lKM2jE2PygY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
<p>The live session was fun because of a super engaged chat ‚Äî everyone had great suggestions for managing some of these (surprisingly common?) behaviors.</p>
<p>I‚Äôll not share the premise (it‚Äôs self-explanatory + there‚Äôs the video), but the discussion involved three parts:</p>
<ol type="1">
<li><p>why it‚Äôs an issue;</p></li>
<li><p>why-do-we-do-this-to-ourselves;</p></li>
<li><p>how do we not keep doing it üòÄ</p></li>
</ol>
<p>I‚Äôll share a tweet-length summary of my takeaways.</p>
<blockquote class="blockquote">
<p>Caveat I: 280 chars! Twitter isn‚Äôt the platform for nuance. üòÖ</p>
<p>Caveat II. Should go without saying, but all of this gyaan needs to be tempered with context, which was a frequently used word throughout the session!</p>
</blockquote>
<hr>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Starting over (again and again)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; Not learning from previous mistakes.</p>
<p>ü§î&nbsp; False sense of accomplishment, dopamine hit from a clean slate, FOMO (new tools).</p>
<p>üí°&nbsp;Start simple, iterate slowly, resist looking at shiny new objects.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Feeling guilty
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; Can‚Äôt win when you are at war with yourself.</p>
<p>ü§î&nbsp; Probably comes from knowing you‚Äôll trip again.</p>
<p>üí°&nbsp;Extend to yourself the same courtesy and patience you‚Äôd show to a friend, consider replacing guilt with curiosity.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Perfectionism
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; Not making mistakes is a risky way to live.</p>
<p>ü§î&nbsp; Feeds ego, sense of control and safety, and you think you push yourself harder with lofty standards.</p>
<p>üí°&nbsp;Aim for B+, fail in public and value it ‚Äî can be a relief to not have to keep up with the perfect image.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Do <em>all</em> the research first
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; When overdone, really procrastination in disguise.</p>
<p>ü§î&nbsp; Creates an illusion of getting work done. Paranoia associate with diving in without preparation.</p>
<p>üí°&nbsp;Second brains are not for archival, but production. Iterate often. Timebox research.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Going big
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; Ambition dominates the public discourse around goal-setting. Big goals are not problematic until they get in the way.</p>
<p>ü§î&nbsp; Ego boosted, creates a potentially misguided sense of being inspired.</p>
<p>üí°&nbsp;Break things down, take incremental (read: realistic!) steps.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Doing it all yourself
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; Potentially limiting.</p>
<p>ü§î&nbsp; A desire for respect or credit, and the sense that nobody can do this as well as me.</p>
<p>üí°&nbsp;Delegate when appropriate, especially when looking to scale and/or diversify.</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Comparing yourself to others
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; Potentially depressing.</p>
<p>ü§î&nbsp; Self-pity, and an excuse to not even try.</p>
<p>üí°&nbsp;Compare to past you. Read your old journal entries. (Also, journal.)</p>
</div>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Postpone gratification
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>‚ö†Ô∏è&nbsp; For something to be sustainable, it needs to be fun!</p>
<p>ü§î&nbsp; Traditional positive quality.</p>
<p>üí°&nbsp;Enjoy the journey because nobody knows the destination. Live in the moment, find joy in the small things, be present. Also, music for instant gratification!</p>
</div>
</div>
</div>
<p>Do check out the <a href="https://www.secondbrainsummit.com/">Second Brain Summit</a> for the remaining sessions.</p>
<p>I think you get a link to a recording if you‚Äôre registered for a session, at least this was the case for me with the opening session.</p>
<p>The community attending this is also <a href="https://basb.io/slack">on a slack</a>.</p>



 ]]></description>
  <category>funda</category>
  <category>twitterthread</category>
  <guid>https://neeldhara.blog/posts/eight-self-sabotaging-behaviors/index.html</guid>
  <pubDate>Mon, 14 Mar 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Kidney Exchanges</title>
  <link>https://neeldhara.blog/posts/kidney-exchanges/index.html</link>
  <description><![CDATA[ 




<p>This post is based on an excellent (chalk and board!) talk that <a href="https://cse.iitkgp.ac.in/~palash/">Palash Dey</a> gave at IIT Gandhinagar today. This is his joint work with <a href="https://sites.google.com/view/arnab-maiti/home">Arnab Maiti</a>, to appear as an <a href="https://aamas2022-conference.auckland.ac.nz/accepted/extended-abstracts/">extended abstract</a> at <a href="https://aamas2022-conference.auckland.ac.nz/">AAMAS 2022</a> (<a href="https://arxiv.org/pdf/2112.10250.pdf">preprint here</a>).</p>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p><a href="https://en.wikipedia.org/wiki/Kidney_paired_donation">Kidney paired donation</a> or <em>paired exchange</em> allows donors to donate their kidneys to compatible patients with the understanding that their patients receive medically compatible kidneys in turn. The central problem in this setting is the <em>clearing problem ‚Äî</em> which involves matching patients to donors in such a way that a maximum number of patients receive compatible kidneys. We introduce a directed graph as a convenient abstraction for this question, where:</p>
<ul>
<li>each node <img src="https://latex.codecogs.com/png.latex?v_i%20=%20(P_i,D_i)"> represents a patient-donor pair, and</li>
<li>we introduce a <em>directed</em> edge <img src="https://latex.codecogs.com/png.latex?v_i%20%E2%86%92%20v_j"> if the kidney of the donor <img src="https://latex.codecogs.com/png.latex?D_i"> is compatible with the patient <img src="https://latex.codecogs.com/png.latex?P_j">.</li>
</ul>
<p>Observe that a cycle in this directed graph naturally represents a sequence of feasible exchanges within the cycle. For example, imagine that we have a three-cycle with the edges:</p>
<p><img src="https://latex.codecogs.com/png.latex?(P_2,D_2)%20%E2%86%92%20(P_5,D_5)%20%E2%86%92%20(P_7,D_7)%20%E2%86%92%20(P_2,D_2)"></p>
<p>Then we have the following compatible donations:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P_5"> is assigned the kidney of donor <img src="https://latex.codecogs.com/png.latex?D_2"></li>
<li><img src="https://latex.codecogs.com/png.latex?P_7"> is assigned the kidney of donor <img src="https://latex.codecogs.com/png.latex?D_5"></li>
<li><img src="https://latex.codecogs.com/png.latex?P_2"> is assigned the kidney of donor <img src="https://latex.codecogs.com/png.latex?D_7"></li>
</ul>
<p>This accounts for all the patients and donors involved in this cycle and motivates the following question:</p>
<blockquote class="blockquote">
<p>Given a directed graph, what is the largest number of vertices that can be covered by a disjoint union of cycles?</p>
</blockquote>
<p>While a positive answer to this question will ‚Äúresolve‚Äù all the needs in the system, consider that exchanges along a cycle of length <img src="https://latex.codecogs.com/png.latex?%5Cell"> involve <img src="https://latex.codecogs.com/png.latex?%5Cell"> simultaneous operations to mitigate the risks involved with donors potentially backing out of the exchange agreements.</p>
<p>This motivates the following refinement of the previously posed question:</p>
<blockquote class="blockquote">
<p>Given a directed graph, what is the largest number of vertices that can be covered by a disjoint union of cycles, where each cycle is of length <img src="https://latex.codecogs.com/png.latex?%5Cell"> or less?</p>
</blockquote>
<p>If the exchanges are restricted to swaps, that is, <img src="https://latex.codecogs.com/png.latex?%5Cell%20=%202">, the problem reduces to finding a maximum matching. However, the problem is NP-complete already when <img src="https://latex.codecogs.com/png.latex?%5Cell%20=%203"> (see Theorem 1, <a href="https://www.cs.cmu.edu/~sandholm/kidneyExchange.EC07.withGrantInfo.pdf">Abraham, Blum, and Sandholm</a>; EC 2007).</p>
<p>We now generalize the model a little further to account for the presence of <em><a href="https://en.wikipedia.org/wiki/Organ_transplantation#Good_Samaritan">altruistic donors</a>,</em> who are donors without a matching patient and are willing to donate to any compatible patient. To account for the presence of such donors, we modify our graph representation as follows:</p>
<ul>
<li>Each node either:
<ul>
<li>represents a patient-donor pair <img src="https://latex.codecogs.com/png.latex?v_i%20=%20(P_i,D_i)"> or</li>
<li>represents an altruistic donor <img src="https://latex.codecogs.com/png.latex?u_k%20=%20D_k%5E%5Cstar"></li>
</ul></li>
<li>The edges are as follows:
<ul>
<li>We have a <em>directed</em> edge <img src="https://latex.codecogs.com/png.latex?v_i%20%E2%86%92%20v_j"> if the kidney of the donor <img src="https://latex.codecogs.com/png.latex?D_i"> is compatible with the patient <img src="https://latex.codecogs.com/png.latex?P_j">.</li>
<li>We have a <em>directed</em> edge <img src="https://latex.codecogs.com/png.latex?u_k%20%E2%86%92%20v_j"> if the kidney of the donor <img src="https://latex.codecogs.com/png.latex?D_k%5E%5Cstar"> is compatible with the patient <img src="https://latex.codecogs.com/png.latex?P_j">.</li>
</ul></li>
</ul>
<p>In this setting, note that we can also facilitate exchanges along <em>paths</em> as well, with the paths starting at the altruistic donors. For instance, if we have the path:</p>
<p><img src="https://latex.codecogs.com/png.latex?(D_7%5E%5Cstar)%20%E2%86%92%20(P_2,D_2)%20%E2%86%92%20(P_5,D_5)%20%E2%86%92%20(P_7,D_7)%20%E2%86%92%20(P_3,D_3)"></p>
<p>Then we have the following compatible donations:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P_2"> is assigned the kidney of donor <img src="https://latex.codecogs.com/png.latex?D_7%5E%5Cstar"></li>
<li><img src="https://latex.codecogs.com/png.latex?P_5"> is assigned the kidney of donor <img src="https://latex.codecogs.com/png.latex?D_2"></li>
<li><img src="https://latex.codecogs.com/png.latex?P_7"> is assigned the kidney of donor <img src="https://latex.codecogs.com/png.latex?D_5"></li>
<li><img src="https://latex.codecogs.com/png.latex?P_3"> is assigned the kidney of donor <img src="https://latex.codecogs.com/png.latex?D_7"></li>
</ul>
<p>Note that in this situation, the donor <img src="https://latex.codecogs.com/png.latex?D_3"> is relieved from any obligation to donate to a patient. We now update our problem statement to reflect the presence of altrustic donors and the possibility of facilitating exchanges along paths:</p>
<blockquote class="blockquote">
<p>ü§ù Optimal Kidney Exchange Along Short Paths and Cycles</p>
<p><strong>Input.</strong> A directed graph <img src="https://latex.codecogs.com/png.latex?G%20=%20(V,E)">, where <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BA%7D%20%5Csubseteq%20V"> are source vertices; and positive integers <img src="https://latex.codecogs.com/png.latex?%5Cell_p">, <img src="https://latex.codecogs.com/png.latex?%5Cell_c"> and <img src="https://latex.codecogs.com/png.latex?t">.</p>
<p><strong>Output.</strong> Yes if and only if there is a collection of cycles of length at most <img src="https://latex.codecogs.com/png.latex?%5Cell_c"> each and a collection of paths of length at most <img src="https://latex.codecogs.com/png.latex?%5Cell_p"> each such that the cycles and paths altogether covers <img src="https://latex.codecogs.com/png.latex?t"> nodes outside of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BA%7D">.</p>
</blockquote>
<p>The main claim in the context of this problem is the following:</p>
<p>There exists a <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(2%5E%7B%5Cmathcal%7BO%7D(t)%7D%20%5Ccdot%20%5Ctext%7Bpoly%7D(n))"> that decides Optimal Kidney Exchange Along Short Paths and Cycles.</p>
</section>
<section id="an-algorithm-for-oke" class="level2">
<h2 class="anchored" data-anchor-id="an-algorithm-for-oke">An Algorithm for OKE</h2>
<p>Here‚Äôs a high-level description of the algorithm (perhaps best approached with some prior familiarity with <a href="https://www.youtube.com/watch?v=_4opS8Hpvc0&amp;list=PLEAYkSg4uSQ2jI2x3Bwm711Tmjj-E25Et&amp;index=19">color coding</a>). To begin with, notice that we may assume without loss of generality that <img src="https://latex.codecogs.com/png.latex?%5Cell_p%20%5Cleq%20t"> and <img src="https://latex.codecogs.com/png.latex?%5Cell_c%20%5Cleq%20t"> ‚Äî intuitively, this is because if the permitted cycle and path lengths are longer than the number of patients we hope to cover, then we can simply look for cycles or paths of length <img src="https://latex.codecogs.com/png.latex?t"> directly to begin with ‚Äî if we find one, then we are done, and if none exist, then we ‚Äúmight as well‚Äù set <img src="https://latex.codecogs.com/png.latex?%5Cell_p"> and/or <img src="https://latex.codecogs.com/png.latex?%5Cell_c"> to <img src="https://latex.codecogs.com/png.latex?t-1">.</p>
<p>Now, if there is a solution that accounts for at least <img src="https://latex.codecogs.com/png.latex?t"> patients, there is also one that involves at most <img src="https://latex.codecogs.com/png.latex?2t"> patients and in particular, also at most <img src="https://latex.codecogs.com/png.latex?t"> paths. Such a solution engages at most <img src="https://latex.codecogs.com/png.latex?t"> nodes from <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BA%7D">. Therefore, if there is a solution, then there is one that spans <img src="https://latex.codecogs.com/png.latex?s%20%5Cleq%203t"> vertices.</p>
<p>As is standard for color coding, we guess the correct value of <img src="https://latex.codecogs.com/png.latex?s"> and randomly partition the vertex set <img src="https://latex.codecogs.com/png.latex?V"> into <img src="https://latex.codecogs.com/png.latex?s"> parts. The hope is that each part contains exactly one vertex from the solution (this is a so-called ‚Äúcolorful solution‚Äù). The probability that a random partition is a lucky one is <img src="https://latex.codecogs.com/png.latex?(3t)!/(3t)%5E%7B(3t)%7D">, which turns out to be at least <img src="https://latex.codecogs.com/png.latex?e%5E%7B-3t%7D">. This implies that <img src="https://latex.codecogs.com/png.latex?e%5E%7B3t%7D"> repetitions ensure a constant success probability.</p>
<p>Given that the partition is indeed a lucky one, we can recover the solution using the following dynamic programming semantics. For <img src="https://latex.codecogs.com/png.latex?C%20%5Csubseteq%20%5B3t%5D"> and <img src="https://latex.codecogs.com/png.latex?i%20%5Cin%20%5B3t%5D">, let <img src="https://latex.codecogs.com/png.latex?D%5BC,i%5D"> be <strong>TRUE</strong> if and only if there is a colorful solution spanning at least <img src="https://latex.codecogs.com/png.latex?i"> nodes outside <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BA%7D"> in <img src="https://latex.codecogs.com/png.latex?G%5BV_C%5D">, where <img src="https://latex.codecogs.com/png.latex?V_C"> denotes the subset of vertices colored with colors from <img src="https://latex.codecogs.com/png.latex?C">.</p>
<p>The recurrence is based on isolating one path or cycle by guessing the set of colors involved in said component and using table lookups to figure out if this can be extended to a full solution.</p>
<p>In particular, we have:</p>
<p><img src="https://latex.codecogs.com/png.latex?D%5BC,i%5D%20=%20P%5BC,i%5D%20%5Clor%20Q%5BC,i%5D">,</p>
<p>where</p>
<p><img src="https://latex.codecogs.com/png.latex?P%5BC,i%5D%20=%20%5Clor_%7B(B,j):%20B%20%5Csubseteq%20C%20%5Ctext%7B%20and%20%7D%201%20%5Cleq%20j%20%5Cleq%20%5Cell_c%7D%20%5BD%5BC%20%5Csetminus%20B,%20i%20-%20j%5D%20%5Cland%20f(B,j)%5D"></p>
<p>and</p>
<p><img src="https://latex.codecogs.com/png.latex?Q%5BC,i%5D%20=%20%5Clor_%7B(B,j):%20B%20%5Csubseteq%20C%20%5Ctext%7B%20and%20%7D%201%20%5Cleq%20j%20%5Cleq%20%5Cell_p%7D%20%5BD%5BC%20%5Csetminus%20B,%20i%20-%20j%5D%20%5Cland%20g(B,j)%5D">.</p>
<p>Here, we have that:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?f(B,j)"> is <strong>TRUE</strong> if and only if the vertices of <img src="https://latex.codecogs.com/png.latex?B"> can be covered with a cycle of length <img src="https://latex.codecogs.com/png.latex?j">.</li>
<li><img src="https://latex.codecogs.com/png.latex?g(B,j)"> is <strong>TRUE</strong> if and only if the vertices of <img src="https://latex.codecogs.com/png.latex?B"> can be covered with a path of length <img src="https://latex.codecogs.com/png.latex?j">.</li>
</ul>
<p>The truth values of <img src="https://latex.codecogs.com/png.latex?f(B,j)"> and <img src="https://latex.codecogs.com/png.latex?g(B,j)"> can be determined directly using standard approaches to finding colorful paths and cycles in time that is single-exponential in <img src="https://latex.codecogs.com/png.latex?j">.</p>
<p>To claim the overall running time, note that:</p>
<ul>
<li>The total number of entries in the table is <img src="https://latex.codecogs.com/png.latex?2%5E%7BO(t)%7D%20%5Ccdot%20t"> and each entry can be computed in time <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D%5E%7B%7D%5Cleft(2%5E%7B%5Cmathcal%7BO%7D(%5Cell)%7D%5Cright)."></li>
<li>Therefore, the algorithm outputs the correct decision in <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D%5E%7B%7D%5Cleft(2%5E%7B%5Cmathcal%7BO%7D(t)%7D%5Cright)"> time with probability at least <img src="https://latex.codecogs.com/png.latex?e%5E%7B-3t%7D">,</li>
<li>By repeating <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D%5Cleft(e%5E%7B3%20t%7D%5Cright)"> times, we find the correct decision with constant success probability.</li>
<li>The overall running time is <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D%5E%7B*%7D%5Cleft(2%5E%7B%5Cmathcal%7BO%7D(t)%7D%5Cright)">.</li>
</ul>
</section>
<section id="other-results" class="level2">
<h2 class="anchored" data-anchor-id="other-results">Other Results</h2>
<p>As Palash mentioned in his talk, the preprint has more, and here are some highlights of the other results that were established:</p>
<ol type="1">
<li><p>Optimal Kidney Exchange Along Short Paths and Cycles is <a href="https://en.wikipedia.org/wiki/Parameterized_complexity#FPT">FPT</a> also when parameterized by the treewidth of the underlying graph <img src="https://latex.codecogs.com/png.latex?+"> maximum length of path <img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Cell_%7Bp%7D%5Cright)+"> maximum length of cycle allowed <img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Cell_%7Bc%7D%5Cright)"> and the number of vertex types<sup>1</sup> when <img src="https://latex.codecogs.com/png.latex?%5Cell_%7Bp%7D%20%5Cleq%20%5Cell_%7Bc%7D">.</p></li>
<li><p>A <a href="https://en.wikipedia.org/wiki/Monadic_second-order_logic">Monadic second-order formula</a> for the problem is also presented, where the length of the formula is upper bounded by a function of <img src="https://latex.codecogs.com/png.latex?%5Cell=%5Cmax%20%5Cleft%5C%7B%5Cell%7Bc%7D,%20%5Cell_%7Bp%7D%5Cright%5C%7D">.</p></li>
<li><p>The problem admits a <a href="https://en.wikipedia.org/wiki/Kernelization">polynomial kernel</a> with respect to the number of patients receiving kidneys <img src="https://latex.codecogs.com/png.latex?+"> maximum degree when <img src="https://latex.codecogs.com/png.latex?%5Cmax%20%5Cleft%5C%7B%5Cell_%7Bp%7D,%20%5Cell_%7Bc%7D%5Cright%5C%7D"> is a constant.</p></li>
<li><p>On the other hand, the problem does <em>not</em> admit any polynomial kernel parameterized by the number of patients receiving kidneys <img src="https://latex.codecogs.com/png.latex?+"> maximum degree <img src="https://latex.codecogs.com/png.latex?+%5Cmax%20%5Cleft%5C%7B%5Cell_%7Bp%7D,%20%5Cell_%7Bc%7D%5Cright%5C%7D"> (under standard assumptions).</p></li>
<li><p>A <img src="https://latex.codecogs.com/png.latex?%5Cleft(16/9+%5Cepsilon%5Cright)">-approximation algorithm is presented for the case when only cycles of length at most 3 are allowed and no paths are allowed.</p></li>
</ol>
</section>
<section id="pointers" class="level2">
<h2 class="anchored" data-anchor-id="pointers">Pointers</h2>
<p>Some discussion that came up during the talk:</p>
<ol type="1">
<li><p>The so-called dual parameter <img src="https://latex.codecogs.com/png.latex?(n-t)">, which in this case corresponds to the number of patients who were ‚Äúleft out‚Äù, is perhaps a natural parameter to study as well.</p></li>
<li><p>The notion of a patient without a matching donor seems complementary notion of altrusitic donors. Such patients would be the last vertices on paths kickstarted by altruistic donors. However, this notion likely does not manifest in practice.</p></li>
</ol>
<p>If you‚Äôd like to dig deeper, be sure to <a href="https://arxiv.org/pdf/2112.10250.pdf">check out the preprint</a>! A few additional pointers:</p>
<ol type="1">
<li><p>This work closely builds on the works of <a href="https://www.ijcai.org/proceedings/2018/77">Xiao and Wang</a> (IJCAI, 2018), who proposed an exact algorithm with running time <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D(2%5Enn%5E3)"> where <img src="https://latex.codecogs.com/png.latex?n"> is the number of vertices in the underlying graph. They also show an FPT algorithm parameterized by the number of vertex types if we do not have any restriction on the length of cycles and chains.</p></li>
<li><p><a href="https://www.mdpi.com/1999-4893/12/2/50">Lin, Wang, Feng, and Fu</a> (Algorithms, 2019) studied the version of the kidney exchange problem which allows only cycles and developed a randomized parameterized algorithm with respect to the parameter being (number of patients receiving a kidney, maximum allowed length of any cycle).</p></li>
<li><p>Alvin E. Roth was awarded the Nobel Prize in Economic Sciences 2012 (along with Lloyd S. Shapley) in part for his pioneering contributions to the theory and practice of kidney exchange ‚Äî his <a href="https://www.nobelprize.org/prizes/economic-sciences/2012/roth/biographical/">biographical account</a> indicates that he had started anticipating the problem even before it emerged as a legal practice. His <a href="https://www.youtube.com/watch?v=exB1O3pTf7E">talk at Simons Institute</a> surveys ‚Äúfifteen years of history‚Äù in the kidney exchange problem, with an emphasis on the game-theoretic aspects. (h/t: <a href="https://csatravelblog.wordpress.com/2016/04/05/rohit-vaish-cmu-visit/">Rohit‚Äôs blog</a> on this topic.)</p></li>
</ol>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://arxiv.org/pdf/1606.01623.pdf">Dickerson, Manlove, Plaut, Sandholm, and Trimble.</a> (EC 2016) introduced the notion of ‚Äúvertex type‚Äù and showed its usefulness as a graph parameter in real-world kidney exchange instances. Two vertices is said to have the same vertex type if their neighbourhoods are the same.‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>exposition</category>
  <guid>https://neeldhara.blog/posts/kidney-exchanges/index.html</guid>
  <pubDate>Thu, 24 Feb 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Women in Mathematics</title>
  <link>https://neeldhara.blog/posts/women-in-mathematics/index.html</link>
  <description><![CDATA[ 




<p>Here‚Äôs a list of books ‚Äî in no particular order ‚Äî about women in mathematics (broadly interpreted) largely taken from <a href="https://twitter.com/stevenstrogatz/status/1495030448904458243">this thread</a>. The links are mostly to versions of the books on Amazon India. Unfortunately many of them are rather expensive, but hopefully it‚Äôs a handy list to share with a librarian you know! Do leave a comment below if you have any additions.</p>
<p>I‚Äôll also leave this <a href="https://twitter.com/virtualcourtney/status/1495076053257175040">relatively sobering thought</a> (or <a href="https://twitter.com/MarissaKawehi/status/1495083281766879243?s=20&amp;t=9CWcnFgcqBQZD4p01UFXsg">this one</a>) here with no further comment.</p>
<hr>
<p>Books:</p>
<ol type="1">
<li><p><a href="https://www.amazon.in/Complexities-Mathematics-Bettye-Anne-Case/dp/0691114625/">Complexities ‚Äì Women in Mathematics</a></p></li>
<li><p><a href="https://www.amazon.in/Women-Mathematics-Addition-Difference-Science/dp/0253211190/ref=sr_1_1?crid=XLR5PKP93HN1&amp;keywords=Women+in+Mathematics%3A+The+Addition+of+Difference&amp;qid=1645384438&amp;sprefix=women+in+mathematics+the+addition+of+difference%2Caps%2C277&amp;sr=8-1">Women in Mathematics ‚Äì The Addition of Difference</a></p></li>
<li><p><a href="https://www.amazon.in/How-Free-Your-Inner-Mathematician/dp/0198843593/">How to Free Your Inner Mathematician: Notes on Mathematics and Life</a></p></li>
<li><p><a href="https://www.amazon.in/Adas-Algorithm-Daughter-Launched-Digital/dp/1783340711/">Ada‚Äôs Algorithm: How Lord Byron‚Äôs Daughter Launched the Digital Age Through the Poetry of Numbers</a></p></li>
<li><p><a href="https://www.amazon.in/Women-Who-Count-Honoring-Mathematicians/dp/1470448890/">Women Who Count: Honoring African American Women Mathematicians</a></p></li>
<li><p><a href="https://www.amazon.in/Women-Becoming-Mathematicians-Professional-Post-World/dp/0262632462/">Women Becoming Mathematicians ‚Äì Creating a Professional Identity in Post‚ÄìWorld War II America</a></p></li>
<li><p><a href="https://www.amazon.in/Power-Numbers-Rebel-Women-Mathematics/dp/1631064851/">Power in Numbers: The Rebel Women of Mathematics</a></p></li>
<li><p><a href="https://www.amazon.in/My-Remarkable-Journey-Katherine-Johnson/dp/0062897667/">My Remarkable Journey: A Memoir</a> (Katherine Johnson)</p></li>
<li><p><a href="https://www.amazon.in/Proving-Her-Way-Noether-Mathematics/dp/3030628108/">Proving It Her Way: Emmy Noether, a Life in Mathematics</a></p></li>
<li><p><a href="https://www.amazon.in/Emmy-Noether%60s-Wonderful-Theorem-2e/dp/1421422670/">Emmy Noether‚Äôs Wonderful Theorem</a></p></li>
<li><p><a href="https://www.amazon.in/Love-Mathematics-Kovalevskaya-P-Kochina/dp/0828533733/">Love and Mathematics: Sofya Kovalevskaya</a> (<a href="https://archive.org/details/kochinaloveandmathematicssofyakovalevskaya1985/mode/2up">alternate link</a>)</p></li>
<li><p><a href="https://www.amazon.in/Einsteins-Wife-Story-Mileva-Einstein-Maric/dp/1665124997">Einstein‚Äôs Wife: The Real Story of Mileva Einstein-Maric</a></p></li>
<li><p><a href="https://www.amazon.in/Inventing-Mathematician-Cultural-Understanding-Mathematics-ebook/dp/B01CPUKOR6/">Inventing the Mathematician: Gender, Race, and Our Cultural Understanding of Mathematics</a></p></li>
<li><p><a href="https://www.amazon.in/Code-Mathematical-Journey-David-Flannery/dp/1861972717">In Code: A Mathematical Journey</a></p></li>
<li><p><a href="https://www.amazon.in/Against-All-Odds-Mathematical-Philosophy/dp/303047612X">Against All Odds: Women‚Äôs Ways to Mathematical Research Since 1800: 6 (Women in the History of Philosophy and Sciences)</a></p></li>
<li><p><a href="https://www.amazon.in/Somerville-Century-Society-Springer-Biographies-ebook/dp/B01N1M5D2H/">The Ascent of Mary Somerville in 19th Century Society</a></p></li>
<li><p><a href="https://bookstore.ams.org/spec-18/">Julia: A Life in Mathematics</a> (ebook only)</p></li>
<li><p><a href="https://www.amazon.in/Women-Mathematics-Bio-Bibliographic-Sourcebook-Bibliographic-ebook/dp/B000WBBEIE/">Women of Mathematics: A Bio-Bibliographic Sourcebook</a></p></li>
<li><p><a href="https://www.amazon.in/Celebration-Programs-Impact-Mathematics-Community/dp/3030194884/">A Celebration of the EDGE Program‚Äôs Impact on the Mathematics Community and Beyond</a></p></li>
<li><p><a href="https://www.amazon.in/Those-Magnificent-Women-Flying-Machines/dp/9388874587">Those Magnificent Women and their Flying Machines: ISRO‚ÄôS Mission to Mars</a></p></li>
<li><p><a href="https://www.amazon.in/Girls-Coming-Tech-Engineering-Education-ebook/dp/B08BTB9HQ2/">Girls Coming to Tech!: A History of American Engineering Education for Women</a></p></li>
<li><p><a href="https://link.springer.com/book/9783030826574">Fifty Years of Women in Mathematics</a></p></li>
<li><p><a href="https://www.amazon.in/Mathematicians-Manifesto-Rethinking-Gender/dp/178816041X/">x+y: A Mathematician‚Äôs Manifesto for Rethinking Gender</a></p></li>
</ol>
<p>Illustrated Books:</p>
<ol type="1">
<li><p><a href="https://www.amazon.in/Maryams-Magic-Mathematician-Maryam-Mirzakhani/dp/0062915967/">Maryam‚Äôs Magic: The Story of Mathematician Maryam Mirzakhani</a></p></li>
<li><p><a href="https://www.amazon.in/Nothing-Stopped-Sophie-Cheryl-Bardoe/dp/0316278203/">Nothing Stopped Sophie: The Story of Unshakable Mathematician Sophie Germain</a></p></li>
<li><p><a href="https://www.amazon.in/Grace-Hopper-Queen-Computer-Changed/dp/1454920009/">Grace Hopper: Queen of Computer Code</a></p></li>
<li><p><a href="https://www.amazon.in/Ada-Byron-Lovelace-Thinking-Machine/dp/1939547202">Ada Byron Lovelace and the Thinking Machine</a></p></li>
<li><p><a href="https://www.amazon.in/Thrilling-Adventures-Lovelace-Babbage-Computer/dp/0141981539/">The Thrilling Adventures of Lovelace and Babbage: The (Mostly) True Story of the First Computer</a></p></li>
<li><p><a href="https://www.amazon.in/Girl-Mind-Math-Montague-Scientists/dp/1943147426/">The Girl With a Mind for Math: The Story of Raye Montague</a></p></li>
<li><p><a href="https://www.amazon.in/Hidden-Figures-Story-Black-Women/dp/0062742469/">Hidden Figures: The True Story of Four Black Women and the Space Race</a></p></li>
<li><p><a href="https://www.amazon.in/Counting-Katherine-Johnson-Astronauts-Moon/dp/1529005612/">Counting on Katherine: How Katherine Johnson Put Astronauts on the Moon</a></p></li>
<li><p><a href="https://www.amazon.in/Emmy-Noether-Important-Mathematician-Youve-ebook/dp/B08J87C17B">Emmy Noether: The Most Important Mathematician You‚Äôve Never Heard Of</a></p></li>
</ol>
<p>Miscellaneous:</p>
<ol type="1">
<li><p><a href="http://comet.lehman.cuny.edu/fitting/bookspapers/pdf/papers/Rasiowa.pdf">A Tribute to Professor Helena Rasiowa</a> (PDF)</p></li>
<li><p><a href="https://www.newyorker.com/news/q-and-a/groundbreaking-mathematician-karen-uhlenbeck-on-the-politics-of-her-field/amp">A Groundbreaking Mathematician on the Gender Politics of Her Field</a> (New Yorker)</p></li>
</ol>



 ]]></description>
  <category>books</category>
  <category>list</category>
  <guid>https://neeldhara.blog/posts/women-in-mathematics/index.html</guid>
  <pubDate>Sun, 20 Feb 2022 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Hat Puzzles</title>
  <link>https://neeldhara.blog/posts/tgif/hat-puzzles/index.html</link>
  <description><![CDATA[ 




<p>We discussed a variety of puzzles in the genre of hat puzzles, which roughly have following story arc:</p>
<ul>
<li>a bunch of (not necessarily finite (!!!)) people are in a location</li>
<li>all of them are wearing hats of one of <img src="https://latex.codecogs.com/png.latex?c"> colors, typically <img src="https://latex.codecogs.com/png.latex?c%20=%202"> (we will assume that hats are either red or blue)</li>
<li>nobody knows the color of their own hat</li>
<li>folks can see the colors of other‚Äôs hats (but not necessarily all of them; this depends on the setting)</li>
<li>everyone is tasked with determining/guessing the color of their own hat, and failure to get it right (most of the time) will usually lead to unpleasant outcomes</li>
</ul>
<p>A traditional special case is the following:</p>
<ul>
<li>There are <img src="https://latex.codecogs.com/png.latex?n"> people standing on a line.</li>
<li>Everyone can see the colors of the hats of everyone ahead of them.</li>
<li>A strategy for how one‚Äôs own hat color is determined can be coordinated in advance.</li>
<li>Starting from the person who can see everyone else (and their hats, more importantly), to the person at the end who sees nothing, everyone spells out their guess of the color of their own hat loudly and clearly for everyone else to hear. There is no communication between poeple other than this.</li>
<li>All but one person must figure out the color of their hat correctly.</li>
</ul>
<div class="callout-caution callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
A Strategy for the Finite Case
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The first person says ‚Äúred‚Äù if the number of red hats s/he sees is even, and ‚Äúblue‚Äù otherwise. This person may be mistaken about the color of their own hat. However, knowing the rationale for what the first person called out, the second can tally up parities to determine the color of their own hat (e.g, if the first person said red and the second person sees an even number of red hats, they conclude they are wearing a blue hat, otherwise they know they are wearing a read hat; and so on).</p>
</div>
</div>
</div>
<p>A crazier version is the following:</p>
<ul>
<li>There are infinitely many people in a room.</li>
<li>Everyone can see the colors of the hats of everyone else, but not their own.</li>
<li>Nobody can hear anyone else‚Äôs guess.</li>
<li>Everyone guesses simultaneously.</li>
<li>Is there a strategy to ensure that infinitely many guesses are correct?</li>
<li>[Level Up]: Is there a strategy to ensure that at most finitely many guesses are wrong?</li>
</ul>
<div class="page-columns page-full"><p>This is fun to think about, and you‚Äôre probably going to have to invoke something something <a href="https://divisbyzero.com/2009/08/11/infinite-hat-problems-solutions/">axiom of choice</a> something something to tackle the situation! </p><div class="no-row-height column-margin column-container"><span class="aside">Spoiler Alert!</span></div></div>



 ]]></description>
  <category>puzzles</category>
  <category>tgif</category>
  <guid>https://neeldhara.blog/posts/tgif/hat-puzzles/index.html</guid>
  <pubDate>Wed, 06 Oct 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Folding Stamps</title>
  <link>https://neeldhara.blog/posts/tgif/folding-stamps/index.html</link>
  <description><![CDATA[ 




<div class="callout-tip callout callout-style-simple no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Source: Dave Richeson <a href="https://twitter.com/divbyzero"><span class="citation" data-cites="divbyzero">@divbyzero</span></a> and Henry Dudeny.</p>
</div>
</div>
</div>
<p>The following is perhaps best attempted with a physical prop.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Yesterday's puzzles seem to be a hit, so here's another one, due to Henry Dudeny. Fold the paper so the squares end up in numerical order (1 on top, 8 on bottom, sequential in between, not necessarily "face up" in the stack, as shown). The first one is easier than the second. <a href="https://t.co/oRGXl90mKp">pic.twitter.com/oRGXl90mKp</a>
</p>
‚Äî Dave Richeson (<span class="citation" data-cites="divbyzero">@divbyzero</span>) <a href="https://twitter.com/divbyzero/status/1577640987412807680?ref_src=twsrc%5Etfw">October 5, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<div class="callout-tip callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Here‚Äôs <a href="https://twitter.com/divbyzero/status/1577680402289917952">a bit from the original</a> source:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/tgif/folding-stamps/source.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Screenshot of a text containing the original problem</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>



 ]]></description>
  <category>puzzles</category>
  <category>tgif</category>
  <guid>https://neeldhara.blog/posts/tgif/folding-stamps/index.html</guid>
  <pubDate>Wed, 06 Oct 2021 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/tgif/folding-stamps/source.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Iwahiro‚Äôs Square in Bag Puzzle</title>
  <link>https://neeldhara.blog/posts/tgif/square-in-bag/index.html</link>
  <description><![CDATA[ 




<div class="callout-tip callout callout-style-simple no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Source: Dave Richeson <a href="https://twitter.com/divbyzero"><span class="citation" data-cites="divbyzero">@divbyzero</span></a>.</p>
</div>
</div>
</div>
<p>Here‚Äôs a very fun packing puzzle.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
One of my all-time favorite puzzles: Iwahiro's "Square in a Bag" puzzle. Put a square piece of paper (14 cm x 14 cm) completely inside a bag (20 cm x 11 cm) without folding, cutting, or rolling up the paper; it should end up lying completely flat. <a href="https://t.co/nGv2TwR8Wp">pic.twitter.com/nGv2TwR8Wp</a>
</p>
‚Äî Dave Richeson (<span class="citation" data-cites="divbyzero">@divbyzero</span>) <a href="https://twitter.com/divbyzero/status/1577308868476108806?ref_src=twsrc%5Etfw">October 4, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>When we discussed this in the meetup, it was a little hard to describe what‚Äôs allowed and what‚Äôs not with the <em>bag</em>. Another thing that was important to emphasize is the side of the bag that is open: I am not sure this is even possible if the bag is sealed on both the long sides and only the short side is the one that is open.</p>
<p>A quick sanity check with respect to surface areas reassures us of the potential feasibility of the task: the total surface area of the square is indeed smaller than the surface area of the bag. So if you imagine cutting the bag along the short sides, and using it as a gift wrap to cover up the square, that‚Äôs very much doable.</p>
<p>The other hint was the fact that the length of the diagonal of the square is less than the length of the longer side of the bag. This prompts us to line up the square so that it‚Äôs opposite corners align with the long and open edge of the bag.</p>
<div class="callout-caution callout callout-style-default no-icon callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Spoiler Alert
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The solution does indeed involve starting here and squishing the bag gradually so that it engulfs the square. Here‚Äôs a nice video demonstration:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/SACE14qPVo0?start=80" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</div>
</div>
<p>We did wonder about formalizing the question and the process above a little more, but we were not able to come up with any appropriate language. At least as an activity-based puzzle I think the instructions are quite clear:</p>
<blockquote class="twitter-tweet blockquote" data-conversation="none">
<p lang="en" dir="ltr">
Ah. The bag can stretch and fold as much as any ordinary kitchen bag can. And for that matter, the paper can warp and bend as you'd expect it would. But in the end everything will end up flat on the tabletop.
</p>
‚Äî Dave Richeson (<span class="citation" data-cites="divbyzero">@divbyzero</span>) <a href="https://twitter.com/divbyzero/status/1578482477869715457?ref_src=twsrc%5Etfw">October 7, 2022</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>It would be nice to be come up with a procedure that, given the dimensions of the square and the bag, can determine if the square can in fact be accommodated in the bag playing by the rules here. Already here, it was pointed out later that it would have worked with <a href="https://twitter.com/divbyzero/status/1577322638783004675?s=20&amp;t=346fCpYPw5ZtAIAQJZ-PtA">a slightly smaller bag too</a>, and at least for the purpose of getting to this particular solution, all that matters is the <a href="https://twitter.com/divbyzero/status/1577322638783004675?s=20&amp;t=346fCpYPw5ZtAIAQJZ-PtA">proportions of the side lengths</a>.</p>
<p>It might also be interesting to think about what happens with other combinations of shapes.</p>



 ]]></description>
  <category>puzzles</category>
  <category>tgif</category>
  <guid>https://neeldhara.blog/posts/tgif/square-in-bag/index.html</guid>
  <pubDate>Wed, 06 Oct 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>On the Communication Complexity of Equality</title>
  <link>https://neeldhara.blog/posts/communication-complexity-equality/index.html</link>
  <description><![CDATA[ 




<p>These are some quick sketchnotes based on&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=orOJRhlqrvk">this lecture</a>&nbsp;by&nbsp;<a href="https://www.cs.cmu.edu/~odonnell/">Ryan O‚ÄôDonnell</a>, a part of the&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=prI35GmCon4&amp;list=PLm3J0oaFux3ZYpFLwwrlv_EHH9wtH6pnX">playlist</a>&nbsp;for the awesome&nbsp;<a href="https://www.diderot.one/course/28/">CS Theory Toolkit</a>&nbsp;course. You can walk through the arguments below.</p>
<iframe src="https://slides.com/neeldhara/deck-85ae95/embed?style=transparent&amp;byline=hidden" width="795" height="420" title="Communication Complexity of Equality" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="">
</iframe>
<p>I should mention that while the <a href="https://rjlipton.wpcomstaging.com/2009/11/30/the-curious-history-of-the-schwartz-zippel-lemma/">Schwartz-Zippel-DeMillo-Lipton lemma</a> is invoked in the notes below, one could make do with just the fact that over any field <img src="https://latex.codecogs.com/png.latex?F">, any degree <img src="https://latex.codecogs.com/png.latex?n"> polynomial has at most <img src="https://latex.codecogs.com/png.latex?n"> roots, as pointed out by <a href="https://twitter.com/dsivakumar"><span class="citation" data-cites="dsivakumar">@dsivakumar</span></a> ‚Äî thanks!</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
In the fourth slide from the end, why [DeMillo‚ÄìLipton]‚ÄìSchwartz‚ÄìZippel Lemma? You only need that number of roots of a polynomial (over Z mod q) of degree n is no more than n.&nbsp;You don't need D-L/S/Z, which gives a general version for multivariate polynomials, right?
</p>
‚Äî D. Sivakumar (<span class="citation" data-cites="dsivakumar">@dsivakumar</span>) <a href="https://twitter.com/dsivakumar/status/1269351801108623360?ref_src=twsrc%5Etfw">June 6, 2020</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>



 ]]></description>
  <category>sketchnotes</category>
  <category>lecturenotes</category>
  <guid>https://neeldhara.blog/posts/communication-complexity-equality/index.html</guid>
  <pubDate>Sun, 03 Oct 2021 18:30:00 GMT</pubDate>
</item>
<item>
  <title>Two approaches to the 15 puzzle</title>
  <link>https://neeldhara.blog/posts/15-puzzle/index.html</link>
  <description><![CDATA[ 




<p>Presenting the <a href="https://en.wikipedia.org/wiki/15_puzzle">15 puzzle</a>:</p>
<blockquote class="blockquote">
<p>This is a sliding puzzle having 15 square tiles numbered 1‚Äì15 in a frame that is 4 tiles high and 4 tiles wide, leaving one unoccupied tile position. Tiles in the same row or column of the open position can be moved by sliding them horizontally or vertically, respectively. The goal of the puzzle is to place the tiles in numerical order.</p>
</blockquote>
<p>According to Wikipedia, <a href="https://doi.org/10.2307%2F2369492">Johnson &amp; Story (1879)</a> used a parity argument to show that half of the starting positions for the <img src="https://latex.codecogs.com/png.latex?n">-puzzle are impossible to resolve, no matter how many moves are made. We are going to explore two approaches* parity-based argument to show that the puzzle shown here on the right is unsolvable.</p>
<p>*I do believe the two proofs are essentially the same with slight differences of language.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_10.36.37_PM.png" class="img-fluid figure-img" style="width:34.0%"></p>
<p></p><figcaption class="figure-caption">An example of the 15 puzzle</figcaption><p></p>
</figure>
</div>
<p>Common to both approaches is the idea of associating a <em>permutation</em> with every state of the puzzle. For the purposes of this discussion, we will think of a permutation simply as a sequence of elements. To turn the grid layout into a sequence, you could, for instance, line up the rows next to each other, in other words, read off the numbers from left-to-right and top-to-bottom:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_10.45.04_PM.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Associating the puzzle with a permutation</figcaption><p></p>
</figure>
</div>
<p>So we think of every puzzle state as a permutation over the set <img src="https://latex.codecogs.com/png.latex?%5C%7B1,%202,%20%5Cldots,%2015%5C%7D%20%5Ccup%20%5C%7B%5Cstar%5C%7D">, where we use <img src="https://latex.codecogs.com/png.latex?%5Cstar"> to denote the blank space. For a particular sequence <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and an index <img src="https://latex.codecogs.com/png.latex?1%20%5Cleq%20i%20%5Cleq%2016">, we will use <img src="https://latex.codecogs.com/png.latex?%5Csigma_i"> to refer to the element that is at the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> position in the sequence <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<p>A couple of definitions in the context of permutations will be useful:</p>
<ul>
<li>An <em>inversion</em> is a pair of elements that is out of their natural order. More precisely, if we have indices <img src="https://latex.codecogs.com/png.latex?i%20%3C%20j"> such that <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%20%3E%20%5Csigma_j">, then the pair <img src="https://latex.codecogs.com/png.latex?(i,j)"> indulges in an inversion. Note that the starting state of our puzzle here has exactly one inversion.</li>
<li>A <em>transposition</em> of locations <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j"> **is essentially a swap of the elements at positions <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j"> of a given permutation. So this is an operation performed on a permutation. Let‚Äôs say this again with more explicit notation ‚Äî if we start with <img src="https://latex.codecogs.com/png.latex?%5Csigma">, then the permutation <img src="https://latex.codecogs.com/png.latex?%5Ctau"> obtained from <img src="https://latex.codecogs.com/png.latex?%5Csigma"> by a transposition of <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j"> is given by the following:</li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctau_%5Cell%20=%20%5Cbegin%7Bcases%7D%0A%20%20%20%20%20%20%5Csigma_j%20&amp;%20%5Ctext%7Bif%20%7D%20%5Cell%20=%20i,%5C%5C%0A%20%20%20%20%20%20%5Csigma_i%20&amp;%20%5Ctext%7Bif%20%7D%20%5Cell%20=%20j,%5C%5C%0A%20%20%20%20%20%20%5Csigma_%5Cell%20&amp;%20%5Ctext%7Botherwise.%7D%0A%20%20%20%20%5Cend%7Bcases%7D%0A"></p>
<p>The identity permutation, which we will denote by <img src="https://latex.codecogs.com/png.latex?%5Ciota">, is special ‚Äî it‚Äôs the following sequence:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%7B1,2,%5Cldots,14,15,%5Cstar%5C%7D.%0A"></p>
<p>It turns out that <em>every permutation</em> <img src="https://latex.codecogs.com/png.latex?%5Csigma"> can be obtained from the identity permutation by a sequence of transpositions. This is not terribly hard to see ‚Äî start with the identity permutation, and repeat the following until the permutation at hand is the one you want to see: find a location <img src="https://latex.codecogs.com/png.latex?i"> that‚Äôs messed up in the current permutation, i.e, it doesn‚Äôt have the element you need in there. Find where the element is in the current permutation, and if that‚Äôs location <img src="https://latex.codecogs.com/png.latex?j">, you could perform a transposition between <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j">. This fixes up the location <img src="https://latex.codecogs.com/png.latex?i">. In every step, you fix at least one location, and never mess up anything else: so at the end of at most <img src="https://latex.codecogs.com/png.latex?n"> steps (assuming you are working with a sequence of <img src="https://latex.codecogs.com/png.latex?n"> elements), you would be done. üéâ</p>
<p>For example, suppose the permutation you want to obtain is 3,4,2,1. Here is how the argument above would play out:</p>
<ol type="1">
<li>1,2,3,4. The first location is messed up, so swap 1 and 3.</li>
<li>3,2,1,4. The second location is messed up, so swap 2 and 4.</li>
<li>3,4,1,2. The third location is messed up, so swap 1 and 2.</li>
<li>3,4,2,1. Now we are done.</li>
</ol>
<p>Note that this may not be the only way of performing a sequence of transpositions that can morph <img src="https://latex.codecogs.com/png.latex?%5Ciota"> into <img src="https://latex.codecogs.com/png.latex?%5Csigma"> ‚Äî there may be various roads to <img src="https://latex.codecogs.com/png.latex?%5Csigma">. However, it turns out that no matter what route you take to transform <img src="https://latex.codecogs.com/png.latex?%5Ciota%20%5Clongrightarrow%20%5Csigma">, the <em>number of steps you perform will always have the same parity.</em> So specifically, it‚Äôs <em>not possible</em> for you to have a series of, say, seventeen transpositions that turn <img src="https://latex.codecogs.com/png.latex?%5Ciota"> into <img src="https://latex.codecogs.com/png.latex?%5Csigma">, and for me to have a series of forty-two transpositions that do the same. We will take this <del>as a cute exercise for the reader</del> as given.</p>
<p>This partitions the set of all permutations into two categories:</p>
<ul>
<li><strong>even permutations:</strong> those permutations that are reachable from the identity with an even number of transpositions</li>
<li>odd <strong>permutations:</strong> those permutations that are reachable from the identity with an odd number of transpositions</li>
</ul>
<p>The fact from the previous paragraph above makes this classification unambiguous.</p>
<p>Alright, so now we have all the terminology we need to get to the argument about why the puzzle state we started with is unsolvable. We can roll up our sleeves and get started.</p>
<hr>
<p>The first line of argument is based on <a href="https://www.youtube.com/watch?v=YI1WqYKHi78&amp;vl=en">this Numberphile video</a>, and is also the one described <a href="https://www.cs.cmu.edu/afs/cs/academic/class/15859-f01/www/notes/15-puzzle.pdf">in this 1999 American Math Monthly article by Archer</a>. We begin with the observation that every move in the game is really a transposition behind the scenes. In particular, let‚Äôs say that we are currently in state <img src="https://latex.codecogs.com/png.latex?s"> and we perform some move and move to state <img src="https://latex.codecogs.com/png.latex?t">. Let‚Äôs say the permutation associated with <img src="https://latex.codecogs.com/png.latex?s"> was <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and the permutation associated with <img src="https://latex.codecogs.com/png.latex?t"> is <img src="https://latex.codecogs.com/png.latex?%5Ctau">. It‚Äôs not hard to see that:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctau"> can be obtained from <img src="https://latex.codecogs.com/png.latex?%5Csigma"> with a single transposition.</li>
</ul>
<p>Now, note that the permutation corresponding to our target state is the following:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_11.04.12_PM.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The permutation corresponding to our target state</figcaption><p></p>
</figure>
</div>
<p>In terms of the game state, notice that the final state has the blank tile at the bottom-right corner, just like we had at the start state. This means that in a hypothetical sequence of moves that morphs the initial game state into this solved state, we must have performed:</p>
<ul>
<li>an equal number of left and right moves; and</li>
<li>an equal number of up and down moves.</li>
</ul>
<p>If this is not the case ‚Äî imagine the blank tile traveling through the board as you perform the moves ‚Äî if the number of times you moved in opposite directions did not exactly cancel, it would be impossible for the blank location to be back at it‚Äôs original location.</p>
<p>So in any winning sequence, the number of moves performed must be even. This implies that the permutation corresponding to the start state, in particular, can be obtained from the identity permutation with an even number of transformations. That makes the starting permutation an even permutation.</p>
<p>However, the permutation corresponding to the start state that we have been handed out is clearly an odd permutation: it can be obtained from the identtiy permutation by a transposition of the elements at the 14-th and 15-th positions. So, well, no dice! This shows that every solvable state that places a blank tile at the bottom-right corner must correspond to an even permutation. This does <em>not</em> automatically imply that all such states associated with even permutations are solvable* ‚Äî it just shows that states with blank tiles at the bottom-right corner corresponding to odd permutations are firmly out of reach.</p>
<p>*It does turns out that all even permutations are in fact solvable.</p>
<hr>
<p>The second approach is based on the notion of inversions. This one is based on <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/video-lectures/lecture-3-strong-induction/">the Strong Induction lecture</a> in the MITOCW course on Mathematics for Computer Science. For this proof I‚Äôll actually switch to the <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%203"> version of the puzzle because <del>I don‚Äôt know how to extend it to the 15-puzzle</del> the case analysis is more manageable for this version:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_11.30.57_PM.png" class="img-fluid figure-img" style="width:77.0%"></p>
<p></p><figcaption class="figure-caption">A move in the 3 X 3 version of the puzzle</figcaption><p></p>
</figure>
</div>
<p>As we said before, the permutation associated with the starting point of the puzzle has exactly one inversion, while the permutation associated with the solved state, which is the identity permutation, has no inversions. So, when you make a move in the puzzle, what happens to the number of inversions?</p>
<p>As before, let‚Äôs say that we are currently in state <img src="https://latex.codecogs.com/png.latex?s"> and we perform some move and move to state <img src="https://latex.codecogs.com/png.latex?t">. Let‚Äôs say the permutation associated with <img src="https://latex.codecogs.com/png.latex?s"> was <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and the permutation associated with <img src="https://latex.codecogs.com/png.latex?t"> is <img src="https://latex.codecogs.com/png.latex?%5Ctau">. Let us say that a pair of elements <img src="https://latex.codecogs.com/png.latex?(p,q)"> is affected by a move in the game if the relative order of <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q"> is different in the permutations <img src="https://latex.codecogs.com/png.latex?%5Csigma"> and <img src="https://latex.codecogs.com/png.latex?%5Ctau">. Now we have the following:</p>
<ul>
<li>if we perform a row move, the relative order of all elements corresponding to numbers remains the same ‚Äî in particular, all affected pairs involve <img src="https://latex.codecogs.com/png.latex?%5Cstar"> ‚Äî so the number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is exactly the same as the number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</li>
<li>if we perform a column move, typically the element that is being moved, say <img src="https://latex.codecogs.com/png.latex?p">, ends up effectively jumping over two other elements, say <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">. In this case the following scenarios arise:
<ul>
<li><p>Neither <img src="https://latex.codecogs.com/png.latex?(p,a)"> nor <img src="https://latex.codecogs.com/png.latex?(p,b)"> is an inversion in <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_11.51.03_PM.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Neither <img src="https://latex.codecogs.com/png.latex?(p,a)"> nor <img src="https://latex.codecogs.com/png.latex?(p,b)"> is an inversion in <img src="https://latex.codecogs.com/png.latex?%5Csigma"></figcaption><p></p>
</figure>
</div>
<ul>
<li>In this case, <em>both</em> <img src="https://latex.codecogs.com/png.latex?(p,a)"> and <img src="https://latex.codecogs.com/png.latex?(p,b)"> emerge as new inversions in <img src="https://latex.codecogs.com/png.latex?%5Ctau">, and the total number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is two <em>more</em> than the total number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</li>
</ul></li>
<li><p>Both <img src="https://latex.codecogs.com/png.latex?(p,a)"> and <img src="https://latex.codecogs.com/png.latex?(p,b)"> are inversions in <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_11.53.09_PM.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Both <img src="https://latex.codecogs.com/png.latex?(p,a)"> and <img src="https://latex.codecogs.com/png.latex?(p,b)"> are inversions in <img src="https://latex.codecogs.com/png.latex?%5Csigma"></figcaption><p></p>
</figure>
</div>
<ul>
<li>In this case, <em>neither</em> <img src="https://latex.codecogs.com/png.latex?(p,a)"> nor <img src="https://latex.codecogs.com/png.latex?(p,b)"> are inversions in <img src="https://latex.codecogs.com/png.latex?%5Ctau"> ‚Äî they both get fixed! So the total number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is two <em>less</em> than the total number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</li>
</ul></li>
<li><p>While <img src="https://latex.codecogs.com/png.latex?(p,a)"> is an inversion in <img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?(p,b)"> is not.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_11.54.46_PM.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">While <img src="https://latex.codecogs.com/png.latex?(p,a)"> is an inversion in <img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?(p,b)"> is not</figcaption><p></p>
</figure>
</div>
<ul>
<li>In this case, you fix some, you spoil some ‚Äî so in <img src="https://latex.codecogs.com/png.latex?%5Ctau">, <img src="https://latex.codecogs.com/png.latex?(p,a)"> is not an inversion any more, but <img src="https://latex.codecogs.com/png.latex?(p,b)"> emerges as a new inversion; so the changes cancel and the number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is exactly the same as the number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</li>
</ul></li>
<li><p>While <img src="https://latex.codecogs.com/png.latex?(p,a)"> is not an inversion in <img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?(p,b)"> is one.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_11.53.39_PM.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">While <img src="https://latex.codecogs.com/png.latex?(p,a)"> is not an inversion in <img src="https://latex.codecogs.com/png.latex?%5Csigma">, <img src="https://latex.codecogs.com/png.latex?(p,b)"> is one</figcaption><p></p>
</figure>
</div>
<ul>
<li>As before, you fix some, you spoil some just the other way now ‚Äî so in <img src="https://latex.codecogs.com/png.latex?%5Ctau">, <img src="https://latex.codecogs.com/png.latex?(p,a)"> is a new inversion, but <img src="https://latex.codecogs.com/png.latex?(p,b)"> is no longer one; so the changes cancel again and the number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Ctau"> is exactly the same as the number of inversions in <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</li>
</ul></li>
</ul></li>
</ul>
<p>The long and short of all this is that after every move, the number of inversions <em>either remains the same or changes by two.</em> So no matter how many moves you perform, a state whose associated permutation has an odd number of inversions is going to remain inaccessible.</p>
<p>Tada!</p>
<hr>
<p>So there we have it‚Ä¶ I have a feeling that a little bit of language connecting transpositions and inversions will really make these proofs quite identical, at least for the <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%203"> case ‚Äî although I did worry that the first approach seemed to rely rather explicitly on the location of the blank tile while the second one didn‚Äôt. It is quite possible that the first one actually demonstrates more than I‚Äôm giving it credit for!</p>
<p>Meanwhile, to be honest, I haven‚Äôt thought much about pushing the second line of attack to the <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> case ‚Äî it seems already that the statement about the change in the number of inversions is no longer true and the change itself is no longer two: in particular, it could apparently go up or down by three or one instead, since the element involved in the action, <img src="https://latex.codecogs.com/png.latex?p"> is now potentially jumping over <em>three</em> other elements, <img src="https://latex.codecogs.com/png.latex?a">, <img src="https://latex.codecogs.com/png.latex?b">, and <img src="https://latex.codecogs.com/png.latex?c">‚Ä¶ so this, at least from an immediate consideration, doesn‚Äôt quite take us where we want to go.</p>
<p>Possibly one has to work with a somewhat different invariant, maybe a notion of inversions that involve triples instead of pairs? Any comments on this would be very welcome, and I‚Äôll have an update once I understand this a little better!</p>



 ]]></description>
  <category>puzzles</category>
  <category>exposition</category>
  <guid>https://neeldhara.blog/posts/15-puzzle/index.html</guid>
  <pubDate>Sat, 02 Oct 2021 18:30:00 GMT</pubDate>
  <media:content url="https://neeldhara.blog/posts/15-puzzle/Screenshot_2021-10-03_at_10.36.37_PM.png" medium="image" type="image/png" height="143" width="144"/>
</item>
</channel>
</rss>
